# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-11-04T21:13:17+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    constr,
)
from typing_extensions import Literal


class Type(Enum):
    ACTION = "ACTION"


class Actions(Enum):
    COMMAND_AND_CONTROL__ESTABLISH_INCIDENT_COMMAND = (
        "COMMAND_AND_CONTROL||ESTABLISH_INCIDENT_COMMAND"
    )
    COMMAND_AND_CONTROL__SAFETY_OFFICER_ASSIGNED = "COMMAND_AND_CONTROL||SAFETY_OFFICER_ASSIGNED"
    COMMAND_AND_CONTROL__PIO_ASSIGNED = "COMMAND_AND_CONTROL||PIO_ASSIGNED"
    COMMAND_AND_CONTROL__NOTIFY_OTHER_AGENCIES = "COMMAND_AND_CONTROL||NOTIFY_OTHER_AGENCIES"
    COMMAND_AND_CONTROL__INCIDENT_ASSESSMENT_COMPLETED = (
        "COMMAND_AND_CONTROL||INCIDENT_ASSESSMENT_COMPLETED"
    )
    COMMAND_AND_CONTROL__ACCOUNTABILITY_OFFICER_ASSIGNED = (
        "COMMAND_AND_CONTROL||ACCOUNTABILITY_OFFICER_ASSIGNED"
    )
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||INTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR_AND_INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR_AND_INTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__ESTABLISH_FIRE_LINES = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||ESTABLISH_FIRE_LINES"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__BACKBURN = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||BACKBURN"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__CONFINEMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||CONFINEMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__STRUCTURE_PROTECTION = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||STRUCTURE_PROTECTION"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_CONTROL_EXTINGUISHMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_CONTROL_EXTINGUISHMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_RETARDANT_DROP = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_RETARDANT_DROP"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__WATER_DROP = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||WATER_DROP"
    )
    CONTAINMENT__OUTSIDE_FIRE_SUPPRESSION__HAND_CREW_FUEL_BREAK = (
        "CONTAINMENT||OUTSIDE_FIRE_SUPPRESSION||HAND_CREW_FUEL_BREAK"
    )
    CONTAINMENT__OUTSIDE_FIRE_SUPPRESSION__DOZER_FUEL_BREAK = (
        "CONTAINMENT||OUTSIDE_FIRE_SUPPRESSION||DOZER_FUEL_BREAK"
    )
    VENTILATION__VERTICAL = "VENTILATION||VERTICAL"
    VENTILATION__VERTICAL__PRIOR_TO_SUPPRESSION = "VENTILATION||VERTICAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__VERTICAL__DURING_SUPPRESSION = "VENTILATION||VERTICAL||DURING_SUPPRESSION"
    VENTILATION__VERTICAL__POST_SUPPRESSION = "VENTILATION||VERTICAL||POST_SUPPRESSION"
    VENTILATION__HORIZONTAL = "VENTILATION||HORIZONTAL"
    VENTILATION__HORIZONTAL__PRIOR_TO_SUPPRESSION = "VENTILATION||HORIZONTAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__HORIZONTAL__DURING_SUPPRESSION = "VENTILATION||HORIZONTAL||DURING_SUPPRESSION"
    VENTILATION__HORIZONTAL__POST_SUPPRESSION = "VENTILATION||HORIZONTAL||POST_SUPPRESSION"
    VENTILATION__POSITIVE_PRESSURE = "VENTILATION||POSITIVE_PRESSURE"
    VENTILATION__POSITIVE_PRESSURE__PRIOR_TO_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||PRIOR_TO_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__DURING_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||DURING_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__POST_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||POST_SUPPRESSION"
    )
    VENTILATION__HYDRAULIC = "VENTILATION||HYDRAULIC"
    VENTILATION__HYDRAULIC__PRIOR_TO_SUPPRESSION = "VENTILATION||HYDRAULIC||PRIOR_TO_SUPPRESSION"
    VENTILATION__HYDRAULIC__DURING_SUPPRESSION = "VENTILATION||HYDRAULIC||DURING_SUPPRESSION"
    VENTILATION__HYDRAULIC__POST_SUPPRESSION = "VENTILATION||HYDRAULIC||POST_SUPPRESSION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH = "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH"
    NON_STRUCTURE_SEARCH__WIDE_AREA_OUTDOOR_SEARCH = (
        "NON_STRUCTURE_SEARCH||WIDE_AREA_OUTDOOR_SEARCH"
    )
    HAZARDOUS_SITUATION_MITIGATION__TAKE_SAMPLES = "HAZARDOUS_SITUATION_MITIGATION||TAKE_SAMPLES"
    HAZARDOUS_SITUATION_MITIGATION__SPILL_CONTROL = "HAZARDOUS_SITUATION_MITIGATION||SPILL_CONTROL"
    HAZARDOUS_SITUATION_MITIGATION__LEAK_STOP = "HAZARDOUS_SITUATION_MITIGATION||LEAK_STOP"
    HAZARDOUS_SITUATION_MITIGATION__REMOVE_HAZARD = "HAZARDOUS_SITUATION_MITIGATION||REMOVE_HAZARD"
    HAZARDOUS_SITUATION_MITIGATION__DECONTAMINATION = (
        "HAZARDOUS_SITUATION_MITIGATION||DECONTAMINATION"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_INTERIOR = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_INTERIOR"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE"
    )
    PROVIDE_EVACUATION_SUPPORT__CONNECTED_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||CONNECTED_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__REMOTE_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||REMOTE_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__NEARBY_BUILDINGS = "PROVIDE_EVACUATION_SUPPORT||NEARBY_BUILDINGS"
    PROVIDE_EVACUATION_SUPPORT__LARGE_AREA = "PROVIDE_EVACUATION_SUPPORT||LARGE_AREA"
    PROVIDE_EQUIPMENT__PROVIDE_SPECIAL_EQUIPMENT = "PROVIDE_EQUIPMENT||PROVIDE_SPECIAL_EQUIPMENT"
    PROVIDE_EQUIPMENT__PROVIDE_LIGHT = "PROVIDE_EQUIPMENT||PROVIDE_LIGHT"
    PROVIDE_EQUIPMENT__PROVIDE_ELECTRICAL_POWER = "PROVIDE_EQUIPMENT||PROVIDE_ELECTRICAL_POWER"
    PROVIDE_EQUIPMENT__PROVIDE_DRONE_VIDEO_EQUIPMENT = (
        "PROVIDE_EQUIPMENT||PROVIDE_DRONE_VIDEO_EQUIPMENT"
    )
    PROVIDE_SERVICES__RESTORE_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||RESTORE_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__RESTORE_RESET_ALARM_SYSTEM = "PROVIDE_SERVICES||RESTORE_RESET_ALARM_SYSTEM"
    PROVIDE_SERVICES__SHUT_DOWN_ALARM = "PROVIDE_SERVICES||SHUT_DOWN_ALARM"
    PROVIDE_SERVICES__SHUT_DOWN_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||SHUT_DOWN_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__SECURE_PROPERTY = "PROVIDE_SERVICES||SECURE_PROPERTY"
    PROVIDE_SERVICES__REMOVE_WATER = "PROVIDE_SERVICES||REMOVE_WATER"
    PROVIDE_SERVICES__ASSIST_UNINJURED_PERSON = "PROVIDE_SERVICES||ASSIST_UNINJURED_PERSON"
    PROVIDE_SERVICES__ASSIST_ANIMAL = "PROVIDE_SERVICES||ASSIST_ANIMAL"
    PROVIDE_SERVICES__PROVIDE_APPARATUS_WATER = "PROVIDE_SERVICES||PROVIDE_APPARATUS_WATER"
    PROVIDE_SERVICES__CONTROL_CROWD = "PROVIDE_SERVICES||CONTROL_CROWD"
    PROVIDE_SERVICES__CONTROL_TRAFFIC = "PROVIDE_SERVICES||CONTROL_TRAFFIC"
    PROVIDE_SERVICES__DAMAGE_ASSESSMENT = "PROVIDE_SERVICES||DAMAGE_ASSESSMENT"
    INFORMATION_ENFORCEMENT__REFER_TO_PROPER_AHJ = "INFORMATION_ENFORCEMENT||REFER_TO_PROPER_AHJ"
    INFORMATION_ENFORCEMENT__ENFORCE_CODE_OR_LAW = "INFORMATION_ENFORCEMENT||ENFORCE_CODE_OR_LAW"
    EMERGENCY_MEDICAL_CARE__PATIENT_ASSESSMENT = "EMERGENCY_MEDICAL_CARE||PATIENT_ASSESSMENT"
    EMERGENCY_MEDICAL_CARE__PROVIDE_BASIC_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_BASIC_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_ADVANCED_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_ADVANCED_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_TRANSPORT = "EMERGENCY_MEDICAL_CARE||PROVIDE_TRANSPORT"
    EMERGENCY_MEDICAL_CARE__PATIENT_REFERRAL = "EMERGENCY_MEDICAL_CARE||PATIENT_REFERRAL"
    INVESTIGATION = "INVESTIGATION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH = "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH"
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    NON_STRUCTURE_SEARCH__SEARCH_AREA_OF_COLLAPSE = "NON_STRUCTURE_SEARCH||SEARCH_AREA_OF_COLLAPSE"
    NON_STRUCTURE_SEARCH__SEARCH_UNDERGROUND_INFRASTRUCTURE = (
        "NON_STRUCTURE_SEARCH||SEARCH_UNDERGROUND_INFRASTRUCTURE"
    )
    NON_STRUCTURE_SEARCH__SEARCH_WATERWAY = "NON_STRUCTURE_SEARCH||SEARCH_WATERWAY"
    NON_STRUCTURE_SEARCH__BODY_RECOVERY = "NON_STRUCTURE_SEARCH||BODY_RECOVERY"
    NON_STRUCTURE_SEARCH__USAR_K9_SEARCH = "NON_STRUCTURE_SEARCH||USAR_K9_SEARCH"
    SALVAGE_AND_OVERHAUL = "SALVAGE_AND_OVERHAUL"
    PERSONNEL_CONTAMINATION_REDUCTION__ON_SCENE_CONTAMINATION_REDUCTION = (
        "PERSONNEL_CONTAMINATION_REDUCTION||ON_SCENE_CONTAMINATION_REDUCTION"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__CLEAN_CAB_TRANSPORT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||CLEAN_CAB_TRANSPORT"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__PPE_WASHED_POST_INCIDENT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||PPE_WASHED_POST_INCIDENT"
    )
    INFORMATION_ENFORCEMENT__PROVIDE_PUBLIC_INFORMATION = (
        "INFORMATION_ENFORCEMENT||PROVIDE_PUBLIC_INFORMATION"
    )


class ActionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["ACTION"] = Field(
        "ACTION", description="`ACTION` indicates action was taken", title="Type"
    )
    actions: Optional[List[str]] = Field(
        None,
        description="Actions taken by the fire department on the scene of the incident.",
        title="Actions",
    )


class AidResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    aid_type: str = Field(..., description="The type of aid provided", title="Aid Type")
    aid_direction: str = Field(
        ..., description="The direction aid was provided", title="Aid Direction"
    )


class Action(Enum):
    append = "append"


class AssessmentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    iso_rating: Optional[int] = Field(None, title="Iso Rating")
    cpse_accredited: Optional[bool] = Field(None, title="Cpse Accredited")
    caas_accredited: Optional[bool] = Field(None, title="Caas Accredited")


class AssessmentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    iso_rating: Optional[int] = Field(None, title="Iso Rating")
    cpse_accredited: Optional[bool] = Field(None, title="Cpse Accredited")
    caas_accredited: Optional[bool] = Field(None, title="Caas Accredited")


class BodyUpsertLogoEntityNerisIdEntityLogoPut(BaseModel):
    upload_logo: bytes = Field(
        ..., description="Logo image that is under 10MB", title="Upload Logo"
    )


class Type2(Enum):
    FF = "FF"
    NONFF = "NONFF"


class Gender(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    TRANSGENDER_MALE_FEMALE_TO_MALE = "TRANSGENDER_MALE_FEMALE_TO_MALE"
    TRANSGENDER_FEMALE_MALE_TO_FEMALE = "TRANSGENDER_FEMALE_MALE_TO_FEMALE"
    OTHER_GENDER_IDENTITY = "OTHER_GENDER_IDENTITY"
    UNKNOWN = "UNKNOWN"


class Race(Enum):
    AMERICAN_INDIAN_ALASKA_NATIVE = "AMERICAN_INDIAN_ALASKA_NATIVE"
    ASIAN = "ASIAN"
    BLACK_AFRICAN_AMERICAN = "BLACK_AFRICAN_AMERICAN"
    MIDDLE_EASTERN_NORTH_AFRICAN = "MIDDLE_EASTERN_NORTH_AFRICAN"
    HISPANIC_LATINO = "HISPANIC_LATINO"
    NATIVE_HAWAIIAN_PACIFIC_ISLANDER = "NATIVE_HAWAIIAN_PACIFIC_ISLANDER"
    WHITE = "WHITE"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class CommentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    comment: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Free text or canned remark comments from dispatcher throughout duration of call.",
        examples=["Dispatch unit 35E to 123 Main Street for possible structure fire"],
        title="Comment",
    )
    timestamp: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the comment.", title="Timestamp"
    )


class CommentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    comment: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Free text or canned remark comments from dispatcher throughout duration of call.",
        examples=["Dispatch unit 35E to 123 Main Street for possible structure fire"],
        title="Comment",
    )
    timestamp: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the comment.", title="Timestamp"
    )


class Type4(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class CookingFireSuppressionNotPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class CookingFireSuppressionNotPresentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., title="Type")


class Type5(Enum):
    PRESENT = "PRESENT"


class OperationType(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"
    NO_OPERATION = "NO_OPERATION"


class CookingFireSuppressionPresentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., title="Type")
    suppression_types: Optional[List[str]] = Field(None, title="Suppression Types")
    operation_type: Optional[str] = Field(None, title="Operation Type")


class CookingFireSuppressionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence: Union[
        CookingFireSuppressionPresentResponse, CookingFireSuppressionNotPresentResponse
    ] = Field(..., title="Presence")


class CreateUserPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    email: str = Field(..., title="Email")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")


class StreetPrefix(Enum):
    CONNECTOR = "CONNECTOR"
    CORNER = "CORNER"
    CORNERS = "CORNERS"
    CORRIDOR = "CORRIDOR"
    CORSO = "CORSO"
    CORTE = "CORTE"
    COUNTY_FOREST_ROAD = "COUNTY FOREST ROAD"
    COUNTY_HIGHWAY = "COUNTY HIGHWAY"
    COUNTY_ROAD = "COUNTY ROAD"
    COUNTY_ROUTE = "COUNTY ROUTE"
    COUNTY_STATE_AID_HIGHWAY = "COUNTY STATE AID HIGHWAY"
    COURS = "COURS"
    COURSE = "COURSE"
    COURT = "COURT"
    COURTS = "COURTS"
    COVE = "COVE"
    COVES = "COVES"
    CREEK = "CREEK"
    CRESCENT = "CRESCENT"
    CREST = "CREST"
    CROSS = "CROSS"
    CROSSING = "CROSSING"
    CROSSINGS = "CROSSINGS"
    CROSSOVER = "CROSSOVER"
    CROSSROAD = "CROSSROAD"
    CROSSROADS = "CROSSROADS"
    CROSSWAY = "CROSSWAY"
    CURVE = "CURVE"
    CUSTER_COUNTY_ROAD = "CUSTER COUNTY ROAD"
    CUTOFF = "CUTOFF"
    CUTTING = "CUTTING"
    DALE = "DALE"
    DAM = "DAM"
    DAWSON_COUNTY_ROAD = "DAWSON COUNTY ROAD"
    DELL = "DELL"
    DIVIDE = "DIVIDE"
    DOCK = "DOCK"
    DOWN = "DOWN"
    DOWNS = "DOWNS"
    DRAW = "DRAW"
    DRIFT = "DRIFT"
    DRIVE = "DRIVE"
    DRIVES = "DRIVES"
    DRIVEWAY = "DRIVEWAY"
    DUGWAY = "DUGWAY"
    ECHO = "ECHO"
    EDGE = "EDGE"
    END = "END"
    ENTRANCE = "ENTRANCE"
    ENTRY = "ENTRY"
    ESPLANADE = "ESPLANADE"
    ESTATE = "ESTATE"
    ESTATES = "ESTATES"
    EXCHANGE = "EXCHANGE"
    EXIT = "EXIT"
    EXPRESSWAY = "EXPRESSWAY"
    EXTENSION = "EXTENSION"
    EXTENSIONS = "EXTENSIONS"
    FALL = "FALL"
    FALLS = "FALLS"
    FARE = "FARE"
    FARM = "FARM"
    FARM_TO_MARKET = "FARM TO MARKET"
    FEDERAL_AID_SECONDARY_HIGHWAY = "FEDERAL-AID SECONDARY HIGHWAY"
    FERRY = "FERRY"
    FIELD = "FIELD"
    FIELDS = "FIELDS"
    FLAT = "FLAT"
    FLATS = "FLATS"
    FLOWAGE = "FLOWAGE"
    FLYWAY = "FLYWAY"
    FORD = "FORD"
    FORDS = "FORDS"
    FOREST = "FOREST"
    FOREST_ROAD = "FOREST ROAD"
    FOREST_HIGHWAY = "FOREST HIGHWAY"
    FORGE = "FORGE"
    FORGES = "FORGES"
    FORK = "FORK"
    FORKS = "FORKS"
    FORT = "FORT"
    FREEWAY = "FREEWAY"
    FRONT = "FRONT"
    FRONTAGE_ROAD = "FRONTAGE ROAD"
    GABLES = "GABLES"
    GARDEN = "GARDEN"
    GARDENS = "GARDENS"
    GARTH = "GARTH"
    GATE = "GATE"
    GATES = "GATES"
    GATEWAY = "GATEWAY"
    GLADE = "GLADE"
    GLEN = "GLEN"
    GLENS = "GLENS"
    GORGE = "GORGE"
    GRADE = "GRADE"
    GREEN = "GREEN"
    GREENS = "GREENS"
    GREENWAY = "GREENWAY"
    GROVE = "GROVE"
    GROVES = "GROVES"
    HARBOR = "HARBOR"
    HARBORS = "HARBORS"
    HARBOUR = "HARBOUR"
    HAUL_ROAD = "HAUL ROAD"
    HAVEN = "HAVEN"
    HEATH = "HEATH"
    HEIGHTS = "HEIGHTS"
    HIDEAWAY = "HIDEAWAY"
    HIGHWAY = "HIGHWAY"
    HILL = "HILL"
    HILLS = "HILLS"
    HOLLOW = "HOLLOW"
    HORN = "HORN"
    HORSESHOE = "HORSESHOE"
    INDIAN_SERVICE_ROAD = "INDIAN SERVICE ROAD"
    INLET = "INLET"
    INTERSTATE = "INTERSTATE"
    INTERVAL = "INTERVAL"
    ISLAND = "ISLAND"
    ISLANDS = "ISLANDS"
    ISLE = "ISLE"
    ISLES = "ISLES"
    J_TURN = "J-TURN"
    JUNCTION = "JUNCTION"
    JUNCTIONS = "JUNCTIONS"
    KEEP = "KEEP"
    KEY = "KEY"
    KEYS = "KEYS"
    KNOLL = "KNOLL"
    KNOLLS = "KNOLLS"
    LAIR = "LAIR"
    LAKE = "LAKE"
    LAKES = "LAKES"
    LAND = "LAND"
    LANDING = "LANDING"
    LANE = "LANE"
    LANE_CIRCLE = "LANE CIRCLE"
    LANE_COURT = "LANE COURT"
    LANE_ROAD = "LANE ROAD"
    LATERAL = "LATERAL"
    LEDGE = "LEDGE"
    LIGHT = "LIGHT"
    LIGHTS = "LIGHTS"
    LINE = "LINE"
    LOAF = "LOAF"
    LOCK = "LOCK"
    LOCKS = "LOCKS"
    LODGE = "LODGE"
    LOOKOUT = "LOOKOUT"
    LOOP = "LOOP"
    LOOP_ROAD = "LOOP ROAD"
    LUGAR = "LUGAR"
    MALL = "MALL"
    MANOR = "MANOR"
    MANORS = "MANORS"
    MARKET = "MARKET"
    MEADOW = "MEADOW"
    MEADOWS = "MEADOWS"
    MEWS = "MEWS"
    MILL = "MILL"
    MILLS = "MILLS"
    MISSION = "MISSION"
    PUBLIC_ACCESS = "PUBLIC ACCESS"
    QUARTER = "QUARTER"
    RADIAL = "RADIAL"
    RANCH = "RANCH"
    RANCHO = "RANCHO"
    RAPID = "RAPID"
    RAPIDS = "RAPIDS"
    REACH = "REACH"
    RECREATIONAL_ROAD = "RECREATIONAL ROAD"
    REST = "REST"
    RETREAT = "RETREAT"
    RIDGE = "RIDGE"
    RIDGES = "RIDGES"
    RISE = "RISE"
    RIVER = "RIVER"
    RIVER_ROAD = "RIVER ROAD"
    ROAD = "ROAD"
    ROADS = "ROADS"
    ROUND = "ROUND"
    ROUTE = "ROUTE"
    ROW = "ROW"
    RUE = "RUE"
    RUN = "RUN"
    RUNNE = "RUNNE"
    RUNWAY = "RUNWAY"
    SHOAL = "SHOAL"
    SHOALS = "SHOALS"
    SHORE = "SHORE"
    SHORES = "SHORES"
    SIDEROAD = "SIDEROAD"
    SKIES = "SKIES"
    SKYWAY = "SKYWAY"
    SLIP = "SLIP"
    SPRING = "SPRING"
    SPRINGS = "SPRINGS"
    SPUR = "SPUR"
    SPURS = "SPURS"
    SQUARE = "SQUARE"
    SQUARES = "SQUARES"
    STATE_HIGHWAY = "STATE HIGHWAY"
    STATE_PARK_ROAD = "STATE PARK ROAD"
    STATE_PARKWAY = "STATE PARKWAY"
    STATE_ROAD = "STATE ROAD"
    STATE_ROUTE = "STATE ROUTE"
    STATE_SECONDARY = "STATE SECONDARY"
    ABBEY = "ABBEY"
    ACCESS = "ACCESS"
    ACCESS_ROAD = "ACCESS ROAD"
    ACRES = "ACRES"
    AIRPORT = "AIRPORT"
    ALCOVE = "ALCOVE"
    ALLE = "ALLE"
    ALLEY = "ALLEY"
    ANNEX = "ANNEX"
    APPROACH = "APPROACH"
    ARC = "ARC"
    ARCADE = "ARCADE"
    ARCH = "ARCH"
    AVENIDA = "AVENIDA"
    AVENUE = "AVENUE"
    AVENUE_CIRCLE = "AVENUE CIRCLE"
    AVENUE_COURT = "AVENUE COURT"
    AVENUE_LOOP = "AVENUE LOOP"
    AVENUE_PATH = "AVENUE PATH"
    AVENUE_PLACE = "AVENUE PLACE"
    AVENUE_WAY = "AVENUE WAY"
    BANK = "BANK"
    BAY = "BAY"
    BAYOU = "BAYOU"
    BAYWAY = "BAYWAY"
    BEACH = "BEACH"
    BEND = "BEND"
    BLUFF = "BLUFF"
    BLUFFS = "BLUFFS"
    BOTTOM = "BOTTOM"
    BOARDWALK = "BOARDWALK"
    BOULEVARD = "BOULEVARD"
    BRANCH = "BRANCH"
    BRIDGE = "BRIDGE"
    BROOK = "BROOK"
    BROOKS = "BROOKS"
    BUREAU_OF_INDIAN_AFFAIRS_ROUTE = "BUREAU OF INDIAN AFFAIRS ROUTE"
    BURG = "BURG"
    BURGS = "BURGS"
    BYPASS = "BYPASS"
    CALLE = "CALLE"
    CALLEJON = "CALLEJON"
    CAMINO = "CAMINO"
    CAMP = "CAMP"
    CANYON = "CANYON"
    CAPE = "CAPE"
    CARTWAY = "CARTWAY"
    CAUSEWAY = "CAUSEWAY"
    CENTER = "CENTER"
    CENTRE = "CENTRE"
    CENTERS = "CENTERS"
    CHANNEL = "CHANNEL"
    CHASE = "CHASE"
    CHEMIN = "CHEMIN"
    CIRCLE = "CIRCLE"
    CIRCLES = "CIRCLES"
    CIRCUS = "CIRCUS"
    CLIFF = "CLIFF"
    CLIFFS = "CLIFFS"
    CLOSE = "CLOSE"
    CLUB = "CLUB"
    CLUSTER = "CLUSTER"
    COAST_HIGHWAY = "COAST HIGHWAY"
    COMMON = "COMMON"
    COMMONS = "COMMONS"
    CONCESSION_ROAD = "CONCESSION ROAD"
    CONCOURSE = "CONCOURSE"
    CONNECT = "CONNECT"
    RAMP = "RAMP"
    UNITED_STATES_HIGHWAY = "UNITED STATES HIGHWAY"
    UNION = "UNION"
    UNIONS = "UNIONS"
    UUNYE = "UUNYE"
    VALLEY = "VALLEY"
    VALLEYS = "VALLEYS"
    VIA = "VIA"
    VIADUCT = "VIADUCT"
    VIEW = "VIEW"
    VIEWS = "VIEWS"
    VILLA = "VILLA"
    VILLAGE = "VILLAGE"
    VILLAGES = "VILLAGES"
    VILLE = "VILLE"
    VISTA = "VISTA"
    VOG = "VOG"
    WADDY = "WADDY"
    WALK = "WALK"
    WALKS = "WALKS"
    WALL = "WALL"
    WAY = "WAY"
    WAYS = "WAYS"
    WEEG = "WEEG"
    WELL = "WELL"
    WELLS = "WELLS"
    WOODS = "WOODS"
    WYE = "WYE"
    WYND = "WYND"
    MONTANA_HIGHWAY = "MONTANA HIGHWAY"
    MOTORWAY = "MOTORWAY"
    MOUNT = "MOUNT"
    MOUNTAIN = "MOUNTAIN"
    MOUNTAINS = "MOUNTAINS"
    NARROWS = "NARROWS"
    NATIONAL_FOREST_DEVELOPMENT_ROAD = "NATIONAL FOREST DEVELOPMENT ROAD"
    NECK = "NECK"
    NOOK = "NOOK"
    NORTH_CAROLINA_HIGHWAY = "NORTH CAROLINA HIGHWAY"
    OAKS = "OAKS"
    OLD_COUNTY_ROAD = "OLD COUNTY ROAD"
    ORCHARD = "ORCHARD"
    OVAL = "OVAL"
    OVERLOOK = "OVERLOOK"
    OVERPASS = "OVERPASS"
    OVI = "OVI"
    PARK = "PARK"
    PARKE = "PARKE"
    PARKS = "PARKS"
    PARKWAY = "PARKWAY"
    PARKWAYS = "PARKWAYS"
    PASEO = "PASEO"
    PASS = "PASS"
    PASSAGE = "PASSAGE"
    PATH = "PATH"
    PATHWAY = "PATHWAY"
    PIKE = "PIKE"
    PINE = "PINE"
    PINES = "PINES"
    PIAZZA = "PIAZZA"
    PLACE = "PLACE"
    PLACITA = "PLACITA"
    PLAIN = "PLAIN"
    PLAINS = "PLAINS"
    PLATZ = "PLATZ"
    PLAZA = "PLAZA"
    POINT = "POINT"
    POINTE = "POINTE"
    POINTS = "POINTS"
    PORT = "PORT"
    PORTS = "PORTS"
    PRAIRIE = "PRAIRIE"
    PRIVATE_ROAD = "PRIVATE ROAD"
    PROMENADE = "PROMENADE"
    QUAY = "QUAY"
    STATE_SPUR = "STATE SPUR"
    STATION = "STATION"
    STRAND = "STRAND"
    STRASSE = "STRASSE"
    STRAVENUE = "STRAVENUE"
    STREAM = "STREAM"
    STREET = "STREET"
    STREETS = "STREETS"
    STREET_COURT = "STREET COURT"
    STREET_LOOP = "STREET LOOP"
    STREET_PATH = "STREET PATH"
    STREET_PLACE = "STREET PLACE"
    STREET_WAY = "STREET WAY"
    STREET_CIRCLE = "STREET CIRCLE"
    STRIP = "STRIP"
    SUMMIT = "SUMMIT"
    TAXIWAY = "TAXIWAY"
    TERMINAL = "TERMINAL"
    TERN = "TERN"
    TERRACE = "TERRACE"
    THROUGHWAY = "THROUGHWAY"
    THRUWAY = "THRUWAY"
    TIMBER_ROAD = "TIMBER ROAD"
    TOWNLINE = "TOWNLINE"
    TOWN_ROAD = "TOWN ROAD"
    TOWNSHIP_ROAD = "TOWNSHIP ROAD"
    TRACE = "TRACE"
    TRACK = "TRACK"
    TRAFFICWAY = "TRAFFICWAY"
    TRAIL = "TRAIL"
    TRAILER = "TRAILER"
    TRIANGLE = "TRIANGLE"
    TRUCK_TRAIL = "TRUCK TRAIL"
    TUNNEL = "TUNNEL"
    TURN = "TURN"
    TURNPIKE = "TURNPIKE"
    UNITED_STATES_FOREST_SERVICE_ROAD = "UNITED STATES FOREST SERVICE ROAD"
    UNDERPASS = "UNDERPASS"


class StreetPrepositionTypeSeparator(Enum):
    OF_THE = "OF_THE"
    AT = "AT"
    DE = "DE"
    DE_LA = "DE_LA"
    DEL = "DEL"
    DE_LAS = "DE_LAS"
    DES = "DES"
    IN_THE = "IN_THE"
    TO_THE = "TO_THE"
    OF = "OF"
    ON_THE = "ON_THE"
    TO = "TO"


class StreetPostfix(Enum):
    CONNECTOR = "CONNECTOR"
    CORNER = "CORNER"
    CORNERS = "CORNERS"
    CORRIDOR = "CORRIDOR"
    CORSO = "CORSO"
    CORTE = "CORTE"
    COUNTY_FOREST_ROAD = "COUNTY FOREST ROAD"
    COUNTY_HIGHWAY = "COUNTY HIGHWAY"
    COUNTY_ROAD = "COUNTY ROAD"
    COUNTY_ROUTE = "COUNTY ROUTE"
    COUNTY_STATE_AID_HIGHWAY = "COUNTY STATE AID HIGHWAY"
    COURS = "COURS"
    COURSE = "COURSE"
    COURT = "COURT"
    COURTS = "COURTS"
    COVE = "COVE"
    COVES = "COVES"
    CREEK = "CREEK"
    CRESCENT = "CRESCENT"
    CREST = "CREST"
    CROSS = "CROSS"
    CROSSING = "CROSSING"
    CROSSINGS = "CROSSINGS"
    CROSSOVER = "CROSSOVER"
    CROSSROAD = "CROSSROAD"
    CROSSROADS = "CROSSROADS"
    CROSSWAY = "CROSSWAY"
    CURVE = "CURVE"
    CUSTER_COUNTY_ROAD = "CUSTER COUNTY ROAD"
    CUTOFF = "CUTOFF"
    CUTTING = "CUTTING"
    DALE = "DALE"
    DAM = "DAM"
    DAWSON_COUNTY_ROAD = "DAWSON COUNTY ROAD"
    DELL = "DELL"
    DIVIDE = "DIVIDE"
    DOCK = "DOCK"
    DOWN = "DOWN"
    DOWNS = "DOWNS"
    DRAW = "DRAW"
    DRIFT = "DRIFT"
    DRIVE = "DRIVE"
    DRIVES = "DRIVES"
    DRIVEWAY = "DRIVEWAY"
    DUGWAY = "DUGWAY"
    ECHO = "ECHO"
    EDGE = "EDGE"
    END = "END"
    ENTRANCE = "ENTRANCE"
    ENTRY = "ENTRY"
    ESPLANADE = "ESPLANADE"
    ESTATE = "ESTATE"
    ESTATES = "ESTATES"
    EXCHANGE = "EXCHANGE"
    EXIT = "EXIT"
    EXPRESSWAY = "EXPRESSWAY"
    EXTENSION = "EXTENSION"
    EXTENSIONS = "EXTENSIONS"
    FALL = "FALL"
    FALLS = "FALLS"
    FARE = "FARE"
    FARM = "FARM"
    FARM_TO_MARKET = "FARM TO MARKET"
    FEDERAL_AID_SECONDARY_HIGHWAY = "FEDERAL-AID SECONDARY HIGHWAY"
    FERRY = "FERRY"
    FIELD = "FIELD"
    FIELDS = "FIELDS"
    FLAT = "FLAT"
    FLATS = "FLATS"
    FLOWAGE = "FLOWAGE"
    FLYWAY = "FLYWAY"
    FORD = "FORD"
    FORDS = "FORDS"
    FOREST = "FOREST"
    FOREST_ROAD = "FOREST ROAD"
    FOREST_HIGHWAY = "FOREST HIGHWAY"
    FORGE = "FORGE"
    FORGES = "FORGES"
    FORK = "FORK"
    FORKS = "FORKS"
    FORT = "FORT"
    FREEWAY = "FREEWAY"
    FRONT = "FRONT"
    FRONTAGE_ROAD = "FRONTAGE ROAD"
    GABLES = "GABLES"
    GARDEN = "GARDEN"
    GARDENS = "GARDENS"
    GARTH = "GARTH"
    GATE = "GATE"
    GATES = "GATES"
    GATEWAY = "GATEWAY"
    GLADE = "GLADE"
    GLEN = "GLEN"
    GLENS = "GLENS"
    GORGE = "GORGE"
    GRADE = "GRADE"
    GREEN = "GREEN"
    GREENS = "GREENS"
    GREENWAY = "GREENWAY"
    GROVE = "GROVE"
    GROVES = "GROVES"
    HARBOR = "HARBOR"
    HARBORS = "HARBORS"
    HARBOUR = "HARBOUR"
    HAUL_ROAD = "HAUL ROAD"
    HAVEN = "HAVEN"
    HEATH = "HEATH"
    HEIGHTS = "HEIGHTS"
    HIDEAWAY = "HIDEAWAY"
    HIGHWAY = "HIGHWAY"
    HILL = "HILL"
    HILLS = "HILLS"
    HOLLOW = "HOLLOW"
    HORN = "HORN"
    HORSESHOE = "HORSESHOE"
    INDIAN_SERVICE_ROAD = "INDIAN SERVICE ROAD"
    INLET = "INLET"
    INTERSTATE = "INTERSTATE"
    INTERVAL = "INTERVAL"
    ISLAND = "ISLAND"
    ISLANDS = "ISLANDS"
    ISLE = "ISLE"
    ISLES = "ISLES"
    J_TURN = "J-TURN"
    JUNCTION = "JUNCTION"
    JUNCTIONS = "JUNCTIONS"
    KEEP = "KEEP"
    KEY = "KEY"
    KEYS = "KEYS"
    KNOLL = "KNOLL"
    KNOLLS = "KNOLLS"
    LAIR = "LAIR"
    LAKE = "LAKE"
    LAKES = "LAKES"
    LAND = "LAND"
    LANDING = "LANDING"
    LANE = "LANE"
    LANE_CIRCLE = "LANE CIRCLE"
    LANE_COURT = "LANE COURT"
    LANE_ROAD = "LANE ROAD"
    LATERAL = "LATERAL"
    LEDGE = "LEDGE"
    LIGHT = "LIGHT"
    LIGHTS = "LIGHTS"
    LINE = "LINE"
    LOAF = "LOAF"
    LOCK = "LOCK"
    LOCKS = "LOCKS"
    LODGE = "LODGE"
    LOOKOUT = "LOOKOUT"
    LOOP = "LOOP"
    LOOP_ROAD = "LOOP ROAD"
    LUGAR = "LUGAR"
    MALL = "MALL"
    MANOR = "MANOR"
    MANORS = "MANORS"
    MARKET = "MARKET"
    MEADOW = "MEADOW"
    MEADOWS = "MEADOWS"
    MEWS = "MEWS"
    MILL = "MILL"
    MILLS = "MILLS"
    MISSION = "MISSION"
    PUBLIC_ACCESS = "PUBLIC ACCESS"
    QUARTER = "QUARTER"
    RADIAL = "RADIAL"
    RANCH = "RANCH"
    RANCHO = "RANCHO"
    RAPID = "RAPID"
    RAPIDS = "RAPIDS"
    REACH = "REACH"
    RECREATIONAL_ROAD = "RECREATIONAL ROAD"
    REST = "REST"
    RETREAT = "RETREAT"
    RIDGE = "RIDGE"
    RIDGES = "RIDGES"
    RISE = "RISE"
    RIVER = "RIVER"
    RIVER_ROAD = "RIVER ROAD"
    ROAD = "ROAD"
    ROADS = "ROADS"
    ROUND = "ROUND"
    ROUTE = "ROUTE"
    ROW = "ROW"
    RUE = "RUE"
    RUN = "RUN"
    RUNNE = "RUNNE"
    RUNWAY = "RUNWAY"
    SHOAL = "SHOAL"
    SHOALS = "SHOALS"
    SHORE = "SHORE"
    SHORES = "SHORES"
    SIDEROAD = "SIDEROAD"
    SKIES = "SKIES"
    SKYWAY = "SKYWAY"
    SLIP = "SLIP"
    SPRING = "SPRING"
    SPRINGS = "SPRINGS"
    SPUR = "SPUR"
    SPURS = "SPURS"
    SQUARE = "SQUARE"
    SQUARES = "SQUARES"
    STATE_HIGHWAY = "STATE HIGHWAY"
    STATE_PARK_ROAD = "STATE PARK ROAD"
    STATE_PARKWAY = "STATE PARKWAY"
    STATE_ROAD = "STATE ROAD"
    STATE_ROUTE = "STATE ROUTE"
    STATE_SECONDARY = "STATE SECONDARY"
    ABBEY = "ABBEY"
    ACCESS = "ACCESS"
    ACCESS_ROAD = "ACCESS ROAD"
    ACRES = "ACRES"
    AIRPORT = "AIRPORT"
    ALCOVE = "ALCOVE"
    ALLE = "ALLE"
    ALLEY = "ALLEY"
    ANNEX = "ANNEX"
    APPROACH = "APPROACH"
    ARC = "ARC"
    ARCADE = "ARCADE"
    ARCH = "ARCH"
    AVENIDA = "AVENIDA"
    AVENUE = "AVENUE"
    AVENUE_CIRCLE = "AVENUE CIRCLE"
    AVENUE_COURT = "AVENUE COURT"
    AVENUE_LOOP = "AVENUE LOOP"
    AVENUE_PATH = "AVENUE PATH"
    AVENUE_PLACE = "AVENUE PLACE"
    AVENUE_WAY = "AVENUE WAY"
    BANK = "BANK"
    BAY = "BAY"
    BAYOU = "BAYOU"
    BAYWAY = "BAYWAY"
    BEACH = "BEACH"
    BEND = "BEND"
    BLUFF = "BLUFF"
    BLUFFS = "BLUFFS"
    BOTTOM = "BOTTOM"
    BOARDWALK = "BOARDWALK"
    BOULEVARD = "BOULEVARD"
    BRANCH = "BRANCH"
    BRIDGE = "BRIDGE"
    BROOK = "BROOK"
    BROOKS = "BROOKS"
    BUREAU_OF_INDIAN_AFFAIRS_ROUTE = "BUREAU OF INDIAN AFFAIRS ROUTE"
    BURG = "BURG"
    BURGS = "BURGS"
    BYPASS = "BYPASS"
    CALLE = "CALLE"
    CALLEJON = "CALLEJON"
    CAMINO = "CAMINO"
    CAMP = "CAMP"
    CANYON = "CANYON"
    CAPE = "CAPE"
    CARTWAY = "CARTWAY"
    CAUSEWAY = "CAUSEWAY"
    CENTER = "CENTER"
    CENTRE = "CENTRE"
    CENTERS = "CENTERS"
    CHANNEL = "CHANNEL"
    CHASE = "CHASE"
    CHEMIN = "CHEMIN"
    CIRCLE = "CIRCLE"
    CIRCLES = "CIRCLES"
    CIRCUS = "CIRCUS"
    CLIFF = "CLIFF"
    CLIFFS = "CLIFFS"
    CLOSE = "CLOSE"
    CLUB = "CLUB"
    CLUSTER = "CLUSTER"
    COAST_HIGHWAY = "COAST HIGHWAY"
    COMMON = "COMMON"
    COMMONS = "COMMONS"
    CONCESSION_ROAD = "CONCESSION ROAD"
    CONCOURSE = "CONCOURSE"
    CONNECT = "CONNECT"
    RAMP = "RAMP"
    UNITED_STATES_HIGHWAY = "UNITED STATES HIGHWAY"
    UNION = "UNION"
    UNIONS = "UNIONS"
    UUNYE = "UUNYE"
    VALLEY = "VALLEY"
    VALLEYS = "VALLEYS"
    VIA = "VIA"
    VIADUCT = "VIADUCT"
    VIEW = "VIEW"
    VIEWS = "VIEWS"
    VILLA = "VILLA"
    VILLAGE = "VILLAGE"
    VILLAGES = "VILLAGES"
    VILLE = "VILLE"
    VISTA = "VISTA"
    VOG = "VOG"
    WADDY = "WADDY"
    WALK = "WALK"
    WALKS = "WALKS"
    WALL = "WALL"
    WAY = "WAY"
    WAYS = "WAYS"
    WEEG = "WEEG"
    WELL = "WELL"
    WELLS = "WELLS"
    WOODS = "WOODS"
    WYE = "WYE"
    WYND = "WYND"
    MONTANA_HIGHWAY = "MONTANA HIGHWAY"
    MOTORWAY = "MOTORWAY"
    MOUNT = "MOUNT"
    MOUNTAIN = "MOUNTAIN"
    MOUNTAINS = "MOUNTAINS"
    NARROWS = "NARROWS"
    NATIONAL_FOREST_DEVELOPMENT_ROAD = "NATIONAL FOREST DEVELOPMENT ROAD"
    NECK = "NECK"
    NOOK = "NOOK"
    NORTH_CAROLINA_HIGHWAY = "NORTH CAROLINA HIGHWAY"
    OAKS = "OAKS"
    OLD_COUNTY_ROAD = "OLD COUNTY ROAD"
    ORCHARD = "ORCHARD"
    OVAL = "OVAL"
    OVERLOOK = "OVERLOOK"
    OVERPASS = "OVERPASS"
    OVI = "OVI"
    PARK = "PARK"
    PARKE = "PARKE"
    PARKS = "PARKS"
    PARKWAY = "PARKWAY"
    PARKWAYS = "PARKWAYS"
    PASEO = "PASEO"
    PASS = "PASS"
    PASSAGE = "PASSAGE"
    PATH = "PATH"
    PATHWAY = "PATHWAY"
    PIKE = "PIKE"
    PINE = "PINE"
    PINES = "PINES"
    PIAZZA = "PIAZZA"
    PLACE = "PLACE"
    PLACITA = "PLACITA"
    PLAIN = "PLAIN"
    PLAINS = "PLAINS"
    PLATZ = "PLATZ"
    PLAZA = "PLAZA"
    POINT = "POINT"
    POINTE = "POINTE"
    POINTS = "POINTS"
    PORT = "PORT"
    PORTS = "PORTS"
    PRAIRIE = "PRAIRIE"
    PRIVATE_ROAD = "PRIVATE ROAD"
    PROMENADE = "PROMENADE"
    QUAY = "QUAY"
    STATE_SPUR = "STATE SPUR"
    STATION = "STATION"
    STRAND = "STRAND"
    STRASSE = "STRASSE"
    STRAVENUE = "STRAVENUE"
    STREAM = "STREAM"
    STREET = "STREET"
    STREETS = "STREETS"
    STREET_COURT = "STREET COURT"
    STREET_LOOP = "STREET LOOP"
    STREET_PATH = "STREET PATH"
    STREET_PLACE = "STREET PLACE"
    STREET_WAY = "STREET WAY"
    STREET_CIRCLE = "STREET CIRCLE"
    STRIP = "STRIP"
    SUMMIT = "SUMMIT"
    TAXIWAY = "TAXIWAY"
    TERMINAL = "TERMINAL"
    TERN = "TERN"
    TERRACE = "TERRACE"
    THROUGHWAY = "THROUGHWAY"
    THRUWAY = "THRUWAY"
    TIMBER_ROAD = "TIMBER ROAD"
    TOWNLINE = "TOWNLINE"
    TOWN_ROAD = "TOWN ROAD"
    TOWNSHIP_ROAD = "TOWNSHIP ROAD"
    TRACE = "TRACE"
    TRACK = "TRACK"
    TRAFFICWAY = "TRAFFICWAY"
    TRAIL = "TRAIL"
    TRAILER = "TRAILER"
    TRIANGLE = "TRIANGLE"
    TRUCK_TRAIL = "TRUCK TRAIL"
    TUNNEL = "TUNNEL"
    TURN = "TURN"
    TURNPIKE = "TURNPIKE"
    UNITED_STATES_FOREST_SERVICE_ROAD = "UNITED STATES FOREST SERVICE ROAD"
    UNDERPASS = "UNDERPASS"


class DirectionOfTravel(Enum):
    NORTHBOUND = "NORTHBOUND"
    SOUTHBOUND = "SOUTHBOUND"
    EASTBOUND = "EASTBOUND"
    WESTBOUND = "WESTBOUND"


class CrossStreetModifier(Enum):
    CLOSEST = "CLOSEST"
    SECOND_CLOSEST = "SECOND_CLOSEST"


class CrossStreetResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    street_prefix: Optional[str] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
        title="Street Prefix",
    )
    street_preposition_type_separator: Optional[str] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
        title="Street Preposition Type Separator",
    )
    street_postfix: Optional[str] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
        title="Street Postfix",
    )
    direction_of_travel: Optional[str] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
        title="Direction Of Travel",
    )
    cross_street_modifier: Optional[str] = Field(
        ...,
        description="Modifier of the cross street, such as 'nearest' or 'second nearest'",
        title="Cross Street Modifier",
    )


class LightningSuspected(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class Grounded(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class DeptSortBy(Enum):
    name = "name"
    neris_id = "neris_id"
    address_line_1 = "address_line_1"
    city = "city"
    state = "state"
    zip_code = "zip_code"
    department_type = "department_type"
    website = "website"


class Type6(Enum):
    DISPATCH = "DISPATCH"


class DispatchTacticTimestampsPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_sizeup: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident sizeup is complete.",
        title="Completed Sizeup",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    extrication_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which extrication (motor vehicle, technical rescue) has been completed.",
        title="Extrication Complete",
    )
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class DispatchTacticTimestampsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_sizeup: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident sizeup is complete.",
        title="Completed Sizeup",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    extrication_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which extrication (motor vehicle, technical rescue) has been completed.",
        title="Extrication Complete",
    )
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class ResponseMode(Enum):
    EMERGENT = "EMERGENT"
    NON_EMERGENT = "NON_EMERGENT"


class TransportMode(Enum):
    EMERGENT = "EMERGENT"
    NON_EMERGENT = "NON_EMERGENT"


class ElectricHazardCrashPayload(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class ElectricHazardCrashResponse(BaseModel):
    pass
    model_config = ConfigDict(
        extra="forbid",
    )


class SuppressionTypes(Enum):
    RUN_COURSE = "RUN_COURSE"
    SUPPRESSION_WATER_ONLY = "SUPPRESSION_WATER_ONLY"
    SUPPRESSION_WATER_ADDITIVE = "SUPPRESSION_WATER_ADDITIVE"
    SUBMERGE_BURY = "SUBMERGE_BURY"
    FIRE_BLANKET = "FIRE_BLANKET"
    BATTERY_PENETRATION = "BATTERY_PENETRATION"


class ElectricHazardFireResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    reignition: Optional[bool] = Field(
        None, description="Whether there was a re-ignition.", title="Reignition"
    )
    suppression_types: Optional[List[str]] = Field(
        None, description="Suppression methods used.", title="Suppression Types"
    )


class SourceOrTarget(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"
    UNKNOWN = "UNKNOWN"


class EntitySetMembershipPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: str = Field(..., description="The entity's NERIS ID", title="Neris Id")


class EntitySetResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    type: str = Field(..., description="The type of entity set.", title="Type")
    members: Optional[List[EntitySetMembershipPayload]] = Field(None, title="Members")
    nuid: UUID = Field(..., description="The unique identifier for the entity set", title="Nuid")


class TypeExternalInternal(Enum):
    EXTERNAL = "EXTERNAL"


class Type10(Enum):
    EXTERNAL_EXPOSURE = "EXTERNAL_EXPOSURE"


class ItemType(Enum):
    STRUCTURE = "STRUCTURE"
    VEHICLE = "VEHICLE"
    OUTDOOR_ENVIRONMENT = "OUTDOOR_ENVIRONMENT"
    OBJECT_OTHER = "OBJECT_OTHER"


class ExternalExposureResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_external_internal: Literal["EXTERNAL"] = Field("EXTERNAL", title="Type External Internal")
    type: str = Field(..., title="Type")
    item_type: Optional[str] = Field(
        None,
        description="Type of property damaged or destroyed from the originating source of the hazard.",
        title="Item Type",
    )


class JobClassification(Enum):
    CAREER = "CAREER"
    PART_TIME = "PART_TIME"
    PAID_ON_CALL = "PAID_ON_CALL"
    INDUSTRIAL = "INDUSTRIAL"
    VOLUNTEER = "VOLUNTEER"
    WILDLAND_FULL_TIME = "WILDLAND_FULL_TIME"
    WILDLAND_PART_TIME = "WILDLAND_PART_TIME"
    WILDLAND_CONTRACT = "WILDLAND_CONTRACT"


class DutyType(Enum):
    RESPONDING_TO_EMERGENCY_INCIDENT = "RESPONDING_TO_EMERGENCY_INCIDENT"
    WORKING_AT_SCENE_OF_FIRE_INCIDENT = "WORKING_AT_SCENE_OF_FIRE_INCIDENT"
    WORKING_AT_SCENE_OF_NONFIRE_INCIDENT = "WORKING_AT_SCENE_OF_NONFIRE_INCIDENT"
    RETURNING_FROM_EMERGENCY_INCIDENT = "RETURNING_FROM_EMERGENCY_INCIDENT"
    TRAINING = "TRAINING"
    AFTER_INCIDENT = "AFTER_INCIDENT"
    OTHER_ON_DUTY_INCIDENT = "OTHER_ON_DUTY_INCIDENT"


class ActionType(Enum):
    SEARCH_RESCUE = "SEARCH_RESCUE"
    CARRYING_SETTINGUP_EQUIPMENT = "CARRYING_SETTINGUP_EQUIPMENT"
    ADVANCING_OPERATING_HOSELINE = "ADVANCING_OPERATING_HOSELINE"
    VEHICLE_EXTRICATION = "VEHICLE_EXTRICATION"
    VENTILATION = "VENTILATION"
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    PUMP_OPERATIONS = "PUMP_OPERATIONS"
    EMS_PATIENT_CARE = "EMS_PATIENT_CARE"
    DURING_INCIDENT_RESPONSE = "DURING_INCIDENT_RESPONSE"
    SCENE_SAFETY_DIRECTING_TRAFFIC = "SCENE_SAFETY_DIRECTING_TRAFFIC"
    STANDBY = "STANDBY"
    INCIDENT_COMMAND = "INCIDENT_COMMAND"
    OTHER = "OTHER"


class IncidentStage(Enum):
    RESPONDING = "RESPONDING"
    INITIAL_RESPONSE = "INITIAL_RESPONSE"
    CONTINUING_OPERATIONS = "CONTINUING_OPERATIONS"
    EXTENDED_OPERATIONS = "EXTENDED_OPERATIONS"
    AFTER_CONCLUSION_OF_INCIDENT = "AFTER_CONCLUSION_OF_INCIDENT"
    UNKNOWN = "UNKNOWN"


class InjuryFfPpe(Enum):
    TURNOUT_COAT = "TURNOUT_COAT"
    BUNKER_PANTS = "BUNKER_PANTS"
    PROTECTIVE_HOOD = "PROTECTIVE_HOOD"
    GLOVES = "GLOVES"
    FACE_SHIELD_GOGGLES = "FACE_SHIELD_GOGGLES"
    HELMET = "HELMET"
    SCBA = "SCBA"
    PASS_DEVICE = "PASS_DEVICE"
    RUBBER_KNEE_BOOTS = "RUBBER_KNEE_BOOTS"
    field_3_4_BOOTS = "3_4_BOOTS"
    BRUSH_GEAR = "BRUSH_GEAR"
    REFLECTIVE_VEST = "REFLECTIVE_VEST"
    OTHER_SPECIAL_EQUIPMENT = "OTHER_SPECIAL_EQUIPMENT"


class FfInjuryDetailsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident in FD Spec.",
        examples=["FD24027442S000U000", "FD24027442S000U001"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the unit responding to the incident if neris id not yet in FD Spec.",
        examples=["A702"],
        title="Reported Unit Id",
    )
    unit_continuity: Optional[bool] = Field(
        None,
        description="Continuity of company at the time of incident.",
        title="Unit Continuity",
    )
    incident_command: Optional[bool] = Field(
        None,
        description="Whether an incident command structure was in place during incident.",
        title="Incident Command",
    )
    job_classification: Optional[str] = Field(
        None,
        description="Job classification of firefighter.",
        title="Job Classification",
    )
    duty_type: Optional[str] = Field(
        None,
        description="Duty state of the firefighter at the time of the incident.",
        title="Duty Type",
    )
    action_type: Optional[str] = Field(
        None,
        description="Actions that occurred during the time of the incident.",
        title="Action Type",
    )
    incident_stage: Optional[str] = Field(
        None,
        description="Stage of the incident when the injury occurred.",
        title="Incident Stage",
    )
    injury_ff_ppe: Optional[List[str]] = Field(
        None, description="PPE worn during time of incident.", title="Injury Ff Ppe"
    )


class TypeFfrescue(Enum):
    FFRESCUE = "FFRESCUE"


class Actions2(Enum):
    VENTILATION = "VENTILATION"
    HYDRAULIC_TOOL_USE = "HYDRAULIC_TOOL_USE"
    UNDERWATER_DIVE = "UNDERWATER_DIVE"
    ROPE_RIGGING = "ROPE_RIGGING"
    BREAK_BREACH_WALL = "BREAK_BREACH_WALL"
    BRACE_WALL_INFRASTRUCTURE = "BRACE_WALL_INFRASTRUCTURE"
    TRENCH_SHORING = "TRENCH_SHORING"
    SUPPLY_AIR = "SUPPLY_AIR"


class Type11(Enum):
    FIREFIGHTER_RESCUED = "FIREFIGHTER_RESCUED"
    FIREFIGHTER_ASSISTED_EVAC = "FIREFIGHTER_ASSISTED_EVAC"
    RESCUED_BY_FIREFIGHTER = "RESCUED_BY_FIREFIGHTER"
    RESCUED_BY_FF_RIT = "RESCUED_BY_FF_RIT"
    EVAC_ASSISTED_BY_FIREFIGHTER = "EVAC_ASSISTED_BY_FIREFIGHTER"


class Impediments(Enum):
    HOARDING_CONDITIONS = "HOARDING_CONDITIONS"
    ACCESS_LIMITATIONS = "ACCESS_LIMITATIONS"
    PHYSICAL_MEDICAL_CONDITIONS_PERSON = "PHYSICAL_MEDICAL_CONDITIONS_PERSON"
    IMPAIRED_PERSON = "IMPAIRED_PERSON"
    OTHER = "OTHER"
    NONE = "NONE"


class Type12(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class FireAlarmNotPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type13(Enum):
    PRESENT = "PRESENT"


class InvestigationTypes(Enum):
    INVESTIGATED_ON_SCENE_RESOURCE = "INVESTIGATED_ON_SCENE_RESOURCE"
    INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR = "INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR"
    INVESTIGATED_BY_OUTSIDE_AGENCY = "INVESTIGATED_BY_OUTSIDE_AGENCY"
    INVESTIGATED_BY_STATE_FIRE_MARSHAL = "INVESTIGATED_BY_STATE_FIRE_MARSHAL"
    INVESTIGATED_BY_INSURANCE = "INVESTIGATED_BY_INSURANCE"
    INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT = "INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT"
    INVESTIGATED_BY_OTHER = "INVESTIGATED_BY_OTHER"


class SuppressionAppliances(Enum):
    FIRE_EXTINGUISHER = "FIRE_EXTINGUISHER"
    BOOSTER_FIRE_HOSE = "BOOSTER_FIRE_HOSE"
    SMALL_DIAMETER_FIRE_HOSE = "SMALL_DIAMETER_FIRE_HOSE"
    MEDIUM_DIAMETER_FIRE_HOSE = "MEDIUM_DIAMETER_FIRE_HOSE"
    GROUND_MONITOR = "GROUND_MONITOR"
    MASTER_STREAM = "MASTER_STREAM"
    ELEVATED_MASTER_STREAM_STANDPIPE = "ELEVATED_MASTER_STREAM_STANDPIPE"
    BUILDING_STANDPIPE = "BUILDING_STANDPIPE"
    BUILDING_FDC = "BUILDING_FDC"
    AIRATTACK_HELITACK = "AIRATTACK_HELITACK"
    OTHER = "OTHER"
    NONE = "NONE"


class RelativeSuppressionTime(Enum):
    PRE_SUPPRESSION = "PRE_SUPPRESSION"
    DURING_SUPPRESSION = "DURING_SUPPRESSION"
    POST_SUPPRESSION = "POST_SUPPRESSION"


class FireRemovalResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    relative_suppression_time: Optional[str] = Field(
        None,
        description="Relative to suppression, when the firefighter was removed from the structure.",
        title="Relative Suppression Time",
    )


class TypeOperationEffective(Enum):
    EFFECTIVE = "EFFECTIVE"


class Type14(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"


class FireSuppressionEffectivePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["EFFECTIVE"] = Field(
        "EFFECTIVE", title="Type Operation Effective"
    )
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )
    type: Literal["OPERATED_EFFECTIVE"] = Field(..., title="Type")


class FireSuppressionEffectiveResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["EFFECTIVE"] = Field(
        "EFFECTIVE", title="Type Operation Effective"
    )
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )
    type: str = Field(..., title="Type")


class TypeOperationEffective2(Enum):
    FAILED = "FAILED"


class Type15(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"
    NO_OPERATION = "NO_OPERATION"


class FailureReason(Enum):
    SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT = "SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT"
    SYSTEM_SHUTOFF_DURING_INCIDENT = "SYSTEM_SHUTOFF_DURING_INCIDENT"
    SYSTEM_INOPERABLE = "SYSTEM_INOPERABLE"
    SYSTEM_DAMAGED_COMPROMISED = "SYSTEM_DAMAGED_COMPROMISED"
    SYSTEM_NOT_SUITABLE = "SYSTEM_NOT_SUITABLE"
    INSUFFICIENT_WATER_SUPPLY = "INSUFFICIENT_WATER_SUPPLY"
    INSUFFICIENT_SOURCE = "INSUFFICIENT_SOURCE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class FireSuppressionFailedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["FAILED"] = Field("FAILED", title="Type Operation Effective")
    type: str = Field(..., title="Type")
    failure_reason: Optional[str] = Field(
        None,
        description="Reason for suppression system failure.",
        title="Failure Reason",
    )


class TypeOperationEffective4(Enum):
    INEFFECTIVE = "INEFFECTIVE"


class Type16(Enum):
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"


class FireSuppressionIneffectiveResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["INEFFECTIVE"] = Field(
        "INEFFECTIVE", title="Type Operation Effective"
    )
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )
    type: str = Field(..., title="Type")
    failure_reason: Optional[str] = Field(
        None,
        description="Reason for suppression system failure.",
        title="Failure Reason",
    )


class Type17(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class FireSuppressionNotPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class FireSuppressionNotPresentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., title="Type")


class FireSuppressionOperationResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    effectiveness: Union[
        FireSuppressionEffectiveResponse,
        FireSuppressionIneffectiveResponse,
        FireSuppressionFailedResponse,
    ] = Field(..., title="Effectiveness")


class Type18(Enum):
    PRESENT = "PRESENT"


class FullPartial(Enum):
    FULL = "FULL"
    PARTIAL = "PARTIAL"
    EXTENT_UNKNOWN = "EXTENT_UNKNOWN"


class FireSuppressionTypeResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type: str = Field(..., description="Type of fire suppression system.", title="Type")
    full_partial: Optional[str] = Field(
        None,
        description="Whether the fire suppression system was full or partial.",
        title="Full Partial",
    )


class Type19(Enum):
    MultiPolygon = "MultiPolygon"


class GeoJsonMultiPolygon(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["MultiPolygon"] = Field(
        "MultiPolygon",
        description='A literal type indicating the GeoJSON object type. Always "MultiPolygon" for this class.',
        examples=["MultiPolygon"],
        title="Type",
    )
    coordinates: List[List[List[List[float]]]] = Field(
        ...,
        description="A list of polygons, each represented as a list of linear rings. The first linear ring in each polygon is the exterior ring, with subsequent rings being interior rings (holes).",
        examples=[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [1.0, 2.0]]]],
        title="Coordinates",
    )


class Type20(Enum):
    Point = "Point"


class GeoJsonPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["Point"] = Field(
        "Point",
        description='A literal type indicating the GeoJSON object type. Always "Point" for this class.',
        examples=["Point"],
        title="Type",
    )
    coordinates: List[float] = Field(
        ...,
        description="The coordinates of the point. Must be a valid set of coordinates.",
        examples=[[1.0, 2.0], [3.0, 4.0]],
        title="Coordinates",
    )


class GeoMultipolygon(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    geometry: GeoJsonMultiPolygon


class GeoPoint(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    geometry: GeoJsonPoint


class IncidentCreatedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Neris Id",
    )


class IncidentSortBy(Enum):
    call_create = "call_create"
    neris_id_entity = "neris_id_entity"
    incident_number = "incident_number"
    dispatch_incident_number = "dispatch_incident_number"
    status = "status"


class Type21(Enum):
    INCIDENT = "INCIDENT"


class IncidentTacticTimestampsPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_sizeup: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident sizeup is complete.",
        title="Completed Sizeup",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    extrication_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which extrication (motor vehicle, technical rescue) has been completed.",
        title="Extrication Complete",
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class IncidentTacticTimestampsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_sizeup: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident sizeup is complete.",
        title="Completed Sizeup",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    extrication_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which extrication (motor vehicle, technical rescue) has been completed.",
        title="Extrication Complete",
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class IncidentTypeResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    primary: Optional[bool] = Field(
        None,
        description="Flag for the primary incident type. Only one type can be `True`.",
        title="Primary",
    )
    type: str = Field(
        ...,
        description="Specific incident type that details the nature of the incident; levels up into incident_category.",
        title="Type",
    )


class IncidentUpdatedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )


class TypeInjuryNoinjury(Enum):
    INJURY = "INJURY"


class Type24(Enum):
    INJURED_NONFATAL = "INJURED_NONFATAL"
    INJURED_FATAL = "INJURED_FATAL"


class Cause(Enum):
    CAUGHT_TRAPPED_BY_FIRE_EXPLOSION = "CAUGHT_TRAPPED_BY_FIRE_EXPLOSION"
    FALL_JUMP = "FALL_JUMP"
    STRESS_OVEREXERTION = "STRESS_OVEREXERTION"
    COLLAPSE = "COLLAPSE"
    CAUGHT_TRAPPED_BY_OBJECT = "CAUGHT_TRAPPED_BY_OBJECT"
    STRUCK_CONTACT_WITH_OBJECT = "STRUCK_CONTACT_WITH_OBJECT"
    EXPOSURE = "EXPOSURE"
    VEHICLE_COLLISION = "VEHICLE_COLLISION"
    OTHER = "OTHER"


class InjuryResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_injury_noinjury: Literal["INJURY"] = Field("INJURY", title="Type Injury Noinjury")
    type_casualty: str = Field(..., title="Type Casualty")
    cause: Optional[str] = Field(
        None, description="Apparent cause of the injury or fatality.", title="Cause"
    )
    injury_ff: Optional[FfInjuryDetailsResponse] = Field(
        None,
        description="Details of the injury sustained by a firefighter. Only possible if casualty-rescue type is `FF`",
    )


class TypeExternalInternal2(Enum):
    INTERNAL = "INTERNAL"


class Type25(Enum):
    INTERNAL_EXPOSURE = "INTERNAL_EXPOSURE"


class InternalExposurePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_external_internal: Literal["INTERNAL"] = Field("INTERNAL", title="Type External Internal")
    type: Literal["INTERNAL_EXPOSURE"] = Field(..., title="Type")


class InternalExposureResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_external_internal: Literal["INTERNAL"] = Field("INTERNAL", title="Type External Internal")
    type: str = Field(..., title="Type")


class InUse(Enum):
    boolean_True = True


class InusePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    in_use: Literal[True] = Field(
        True,
        description="Whether the location is in use. Always true if Location has an 'in_use' attribute.",
        title="In Use",
    )
    intended: Optional[bool] = Field(
        None,
        description="Whether the location is being used as intended.",
        title="Intended",
    )


class InuseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    in_use: Literal[True] = Field(
        True,
        description="Whether the location is in use. Always true if Location has an 'in_use' attribute.",
        title="In Use",
    )
    intended: Optional[bool] = Field(
        None,
        description="Whether the location is being used as intended.",
        title="Intended",
    )


class ListEntitySetsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    entity_sets: List[EntitySetResponse] = Field(..., title="Entity Sets")


class PlaceType(Enum):
    AIRCRAFT = "AIRCRAFT"
    AIRPORT = "AIRPORT"
    ARENA = "ARENA"
    AUTOMOBILE = "AUTOMOBILE"
    BANK = "BANK"
    BAR = "BAR"
    BUS = "BUS"
    BICYCLE = "BICYCLE"
    BUS_STATION = "BUS_STATION"
    CAFE = "CAFE"
    CLASSROOM = "CLASSROOM"
    CLUB = "CLUB"
    CONSTRUCTION = "CONSTRUCTION"
    CONVENTION_CENTER = "CONVENTION_CENTER"
    GOVERNMENT = "GOVERNMENT"
    HOSPITAL = "HOSPITAL"
    HOTEL = "HOTEL"
    INDUSTRIAL = "INDUSTRIAL"
    LIBRARY = "LIBRARY"
    MOTORCYCLE = "MOTORCYCLE"
    MUSEUM = "MUSEUM"
    OFFICE = "OFFICE"
    OTHER = "OTHER"
    OUTDOORS = "OUTDOORS"
    PARKING = "PARKING"
    PLACE_OF_WORSHIP = "PLACE_OF_WORSHIP"
    PRISON = "PRISON"
    PUBLIC = "PUBLIC"
    PUBLIC_TRANSPORT = "PUBLIC_TRANSPORT"
    RESIDENCE = "RESIDENCE"
    RESTAURANT = "RESTAURANT"
    SCHOOL = "SCHOOL"
    SHOPPING_AREA = "SHOPPING_AREA"
    STADIUM = "STADIUM"
    STORE = "STORE"
    STREET = "STREET"
    THEATER = "THEATER"
    TRAIN = "TRAIN"
    TRAIN_STATION = "TRAIN_STATION"
    TRUCK = "TRUCK"
    UNDERWAY = "UNDERWAY"
    UNKNOWN = "UNKNOWN"
    WAREHOUSE = "WAREHOUSE"
    WATER = "WATER"
    WATERCRAFT = "WATERCRAFT"


class Country(Enum):
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class LocationResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    additional_attributes: Optional[Dict[str, Any]] = Field(
        None,
        description="JSON string of structure address elements which the transmitter wishes to include.",
        examples=[{"common_name": "Eastside Walmart"}],
        title="Additional Attributes",
    )
    place_type: Optional[str] = Field(
        None,
        description="Type of feature identified by the address.",
        examples=["AIRPORT"],
        title="Place Type",
    )
    postal_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="City name for the ZIP Code of an address, as given in the USPS City State file.",
        examples=["Stanton (a post office name in KY)"],
        title="Postal Community",
    )
    neighborhood_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated neighborhood, subdivision or area, either within an incorporated municipality, or in an unincorporated portion of a county or both, where the address is located. ",
        examples=["Cypress Meadows Subdivision"],
        title="Neighborhood Community",
    )
    unincorporated_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated community, either within an incorporated municipality or in an unincorporated portion of a county, or both, where the address is located. ",
        examples=["14th Ward (a ward in the incorporated municipality of Pittsburgh, PA) "],
        title="Unincorporated Community",
    )
    incorporated_municipality: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the incorporated municipality or other general-purpose local governmental unit (if any) where the address is located.",
        examples=["Haleyville"],
        title="Incorporated Municipality",
    )
    county: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the county or county-equivalent where the address is located. A county (or its equivalent) is the primary legal division of a state or territory.",
        examples=["Winston County"],
        title="County",
    )
    state: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a state or state equivalent, represented by the two- letter UPPER CASE abbreviation given in USPS Publication 28 [15], Appendix B. A state is a primary governmental division of the United States.",
        examples=["VA"],
        title="State",
    )
    postal_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 5-digit codes that identifies the individual USPS Post Office or metropolitan area delivery station associated with an address.",
        examples=["02109 (one of many ZIP Codes for Boston, MA)"],
        title="Postal Code",
    )
    postal_code_extension: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 4-digit codes that are used after the 5-digit ZIP Code to specify a range of USPS delivery addresses.",
        examples=['"0001" in "02109-0001" (portion of a 02109 ZIP Code).'],
        title="Postal Code Extension",
    )
    country: Optional[str] = Field(
        None,
        description="Name of a country represented by its two-letter ISO 3166-1[14] English country alpha-2 code elements in UPPER CASE letters.",
        examples=["US"],
        title="Country",
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    street_prefix: Optional[str] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
        title="Street Prefix",
    )
    street_preposition_type_separator: Optional[str] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
        title="Street Preposition Type Separator",
    )
    street_postfix: Optional[str] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
        title="Street Postfix",
    )
    direction_of_travel: Optional[str] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
        title="Direction Of Travel",
    )
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    structure: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="A built feature which has a vertical dimension, including both conventional buildings which have walls, doors, and a roof, and other kinds of infrastructure such as cell towers, transformer stations, fuel tanks, and so on. ",
        examples=['"Fuel Storage Shed" in "100 Cantwell Avenue, Fuel Storage Shed"'],
        title="Structure",
    )
    subsite: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a sub-area within a larger area specified either by site name, by a thoroughfare address, or both.",
        examples=['"Buckeye Village" in "The Ohio State University, Buckeye Village"'],
        title="Subsite",
    )
    site: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an exterior area which is publicly known and unique within a given place. A site may contain one or more structures and/or sub-sites.",
        examples=['"Winslow Park and Campground" in "Winslow Park and Campground, Freeport, ME" '],
        title="Site",
    )
    wing: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Designated part of a structure which spans one or many floors, typically including more than one unit or room and representing a significant portion of the structure floor area. ",
        examples=[
            '"Concourse A" in "Pittsburgh International Airport, Airside Terminal, Concourse A" '
        ],
        title="Wing",
    )
    floor: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Standardized identifier for a story or level within a structure, wing, or unit.",
        examples=['"5" in "800 Jefferson Street, 5th Floor" '],
        title="Floor",
    )
    unit_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that precedes the Unit Value and indicates the kind of unit.",
        examples=['"Apartment" in "422 Via Casitas, Apartment 12" '],
        title="Unit Prefix",
    )
    unit_value: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that uniquely identifies a particular unit.",
        examples=['"12" in "422 Via Casitas, Apartment 12" '],
        title="Unit Value",
    )
    room: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Single, distinctly identified, enclosed space within a structure. ",
        examples=['"E427" in "Gilman Memorial Hospital, Room E247" '],
        title="Room",
    )
    section: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified, unenclosed area within a structure, wing, unit, or room. ",
        examples=['"Customer Seating" in "Coastland Mall, Food Court, Customer Seating" '],
        title="Section",
    )
    row: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified linear feature, such as a linear arrangement of seats, workstations, equipment, or storage, within a structure, wing, unit, or room. ",
        examples=['"Aisle 4" in "Warehouse 3, Aisle 4"'],
        title="Row",
    )
    seat: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified seat, desk, workstation, or similar precise location within a structure, wing, unit, room, section, or row.",
        examples=['"Cubicle A-7" in "1 Ashburton Place, Room 819, Cubicle A-7"'],
        title="Seat",
    )
    additional_info: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Information that relates to location but does not meet the definition of any other named location elements.",
        examples=["Main Loading Dock"],
        title="Additional Info",
    )
    marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Uniquely identified and indivisible infrastructure component, smaller than a structure, which exists either within a structure or exterior to any structure, such as an alarm box, a utility pole, a callbox, or other similar feature. ",
        examples=[
            "Call Box CC-680-118 (an emergency call box on Interstate 680 in Contra Costa County, CA)"
        ],
        title="Marker",
    )
    cross_streets: Optional[List[CrossStreetResponse]] = Field(
        None,
        description="Array of (Street name + optional address number) for the nearest intersection(s).",
        title="Cross Streets",
    )
    location_aliases: Optional[List[LocationResponse]] = Field(
        None,
        description="A location that is an alias for the for the top-level location",
        title="Location Aliases",
    )


class UseType(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__AUCTION_FEEDLOT = "AGRICULTURE_STRUCT||AUCTION_FEEDLOT"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"
    INDUSTRIAL__COLD_STORAGE = "INDUSTRIAL||COLD_STORAGE"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    HEALTH_CARE__ALCOHOL_DRUG_REHABILITATION_CENTER = (
        "HEALTH_CARE||ALCOHOL_DRUG_REHABILITATION_CENTER"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATERFRONT = "OUTDOOR||WATERFRONT"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__OUTDOOR_ARENA_AMPHITHEATER_PARK = "ASSEMBLY||OUTDOOR_ARENA_AMPHITHEATER_PARK"
    ASSEMBLY__TEMP_OUTDOOR_STRUCT_EVENT = "ASSEMBLY||TEMP_OUTDOOR_STRUCT_EVENT"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"


class VacancyCause(Enum):
    NEW_CONSTRUCTION_REMODEL = "NEW_CONSTRUCTION_REMODEL"
    ABANDONED = "ABANDONED"
    FOR_SALE_LEASE = "FOR_SALE_LEASE"
    FORECLOSURE = "FORECLOSURE"
    DAMAGE_DECAY = "DAMAGE_DECAY"
    SEASONAL_OCCASIONALLY_OCCUPIED = "SEASONAL_OCCASIONALLY_OCCUPIED"
    UNKNOWN = "UNKNOWN"


class SecondaryUse(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__AUCTION_FEEDLOT = "AGRICULTURE_STRUCT||AUCTION_FEEDLOT"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"
    INDUSTRIAL__COLD_STORAGE = "INDUSTRIAL||COLD_STORAGE"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    HEALTH_CARE__ALCOHOL_DRUG_REHABILITATION_CENTER = (
        "HEALTH_CARE||ALCOHOL_DRUG_REHABILITATION_CENTER"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATERFRONT = "OUTDOOR||WATERFRONT"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__OUTDOOR_ARENA_AMPHITHEATER_PARK = "ASSEMBLY||OUTDOOR_ARENA_AMPHITHEATER_PARK"
    ASSEMBLY__TEMP_OUTDOOR_STRUCT_EVENT = "ASSEMBLY||TEMP_OUTDOOR_STRUCT_EVENT"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"


class LocationUseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    in_use: Optional[InuseResponse] = Field(
        None,
        description="If the location is being used, whether it is being used as intended.",
    )
    use_type: Optional[str] = Field(None, description="Location use type.", title="Use Type")
    vacancy_cause: Optional[str] = Field(
        None,
        description="Apparent reason the location is vacant.",
        title="Vacancy Cause",
    )
    secondary_use: Optional[str] = Field(
        None,
        description="Secondary location use type, if there was one that impacted the incident response.",
        title="Secondary Use",
    )


class Mayday(Enum):
    boolean_True = True


class MaydayResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    mayday: Literal[True] = Field(
        True,
        description="Whether there was a mayday called to indicate a firefighter needed assistance during the incident.",
        title="Mayday",
    )
    rit_activated: Optional[bool] = Field(
        None,
        description="Whether a RIT team was activated following a mayday declaration.",
        title="Rit Activated",
    )
    relative_suppression_time: Optional[str] = Field(
        None,
        description="Relative to suppression, when the mayday was called.",
        title="Relative Suppression Time",
    )


class MedResponsePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    at_patient: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider reaches the patient's side.",
        title="At Patient",
    )
    enroute_to_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit statuses enroute to the hospital.",
        title="Enroute To Hospital",
    )
    arrived_at_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit arrives at the hospital.",
        title="Arrived At Hospital",
    )
    transferred_to_agency: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a transporting agency.",
        title="Transferred To Agency",
    )
    transferred_to_facility: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a hospital or facility.",
        title="Transferred To Facility",
    )
    hospital_cleared: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the hospital.",
        title="Hospital Cleared",
    )
    hospital_destination: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the hospital where the patient is transported.",
        examples=["University of Maryland Capital Regional Medical Center"],
        title="Hospital Destination",
    )


class MedResponseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    at_patient: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider reaches the patient's side.",
        title="At Patient",
    )
    enroute_to_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit statuses enroute to the hospital.",
        title="Enroute To Hospital",
    )
    arrived_at_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit arrives at the hospital.",
        title="Arrived At Hospital",
    )
    transferred_to_agency: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a transporting agency.",
        title="Transferred To Agency",
    )
    transferred_to_facility: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a hospital or facility.",
        title="Transferred To Facility",
    )
    hospital_cleared: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the hospital.",
        title="Hospital Cleared",
    )
    hospital_destination: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the hospital where the patient is transported.",
        examples=["University of Maryland Capital Regional Medical Center"],
        title="Hospital Destination",
    )


class PatientStatus(Enum):
    IMPROVED = "IMPROVED"
    UNCHANGED = "UNCHANGED"
    WORSE = "WORSE"


class TransportDisposition(Enum):
    TRANSPORT_BY_EMS_UNIT = "TRANSPORT_BY_EMS_UNIT"
    OTHER_AGENCY_TRANSPORT = "OTHER_AGENCY_TRANSPORT"
    PATIENT_REFUSED_TRANSPORT = "PATIENT_REFUSED_TRANSPORT"
    NONPATIENT_TRANSPORT = "NONPATIENT_TRANSPORT"
    NO_TRANSPORT = "NO_TRANSPORT"


class MedicalResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    patient_care_report_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Patient care report identification number.",
        examples=["VAE456M1-02202024"],
        title="Patient Care Report Id",
    )
    patient_care_evaluation: str = Field(
        ...,
        description="Status of patient care needs based on evaluation.",
        title="Patient Care Evaluation",
    )
    patient_status: Optional[str] = Field(
        None,
        description="Status of the patient after FD arrival and intervention.",
        title="Patient Status",
    )
    transport_disposition: Optional[str] = Field(
        None,
        description="Transport outcome of the incident.",
        title="Transport Disposition",
    )


class Type26(Enum):
    NOACTION = "NOACTION"


class NoactionType(Enum):
    CANCELLED = "CANCELLED"
    STAGED_STANDBY = "STAGED_STANDBY"
    NO_INCIDENT_FOUND = "NO_INCIDENT_FOUND"


class NoactionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOACTION"] = Field(
        "NOACTION", description="`NOACTION` indicates no action was taken", title="Type"
    )
    noaction_type: Optional[str] = Field(
        None,
        description="Reason no action taken by the fire department on the scene of the incident.",
        title="Noaction Type",
    )


class TypeInjuryNoinjury2(Enum):
    NOINJURY = "NOINJURY"


class Type28(Enum):
    UNINJURED = "UNINJURED"


class NoinjuryPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_injury_noinjury: Literal["NOINJURY"] = Field("NOINJURY", title="Type Injury Noinjury")
    type: Literal["UNINJURED"] = Field(..., title="Type")


class NoinjuryResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_injury_noinjury: Literal["NOINJURY"] = Field("NOINJURY", title="Type Injury Noinjury")
    type_casualty: str = Field(..., title="Type Casualty")


class TypeFfrescue2(Enum):
    NONFFRESCUE = "NONFFRESCUE"


class Type29(Enum):
    NON_FIREFIGHTER_RESCUED = "NON_FIREFIGHTER_RESCUED"
    RESCUED_BY_NONFIREFIGHTER = "RESCUED_BY_NONFIREFIGHTER"
    SELF_EVACUATION = "SELF_EVACUATION"
    NO_RESCUE_NEEDED = "NO_RESCUE_NEEDED"


class NonFfRescuePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_ffrescue: Literal["NONFFRESCUE"] = Field("NONFFRESCUE", title="Type Ffrescue")
    type: Literal[
        "NON_FIREFIGHTER_RESCUED",
        "NO_RESCUE_NEEDED",
        "RESCUED_BY_NONFIREFIGHTER",
        "SELF_EVACUATION",
    ] = Field(..., title="Type")


class NonFfRescueResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type_ffrescue: Literal["NONFFRESCUE"] = Field("NONFFRESCUE", title="Type Ffrescue")
    type: str = Field(..., title="Type")


class NonfdAidResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type: str = Field(
        ...,
        description="Type of non-fire department entities giving aid received.",
        title="Type",
    )


class TypeRemovalNonremoval(Enum):
    NONREMOVAL = "NONREMOVAL"


class Type30(Enum):
    EXTRICATION = "EXTRICATION"
    DISENTANGLEMENT = "DISENTANGLEMENT"
    RECOVERY = "RECOVERY"
    OTHER = "OTHER"


class NonremovalPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_removal_nonremoval: Literal["NONREMOVAL"] = Field(
        "NONREMOVAL", title="Type Removal Nonremoval"
    )
    type: Literal["DISENTANGLEMENT", "EXTRICATION", "OTHER", "RECOVERY"] = Field(..., title="Type")


class NonremovalResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type_removal_nonremoval: Literal["NONREMOVAL"] = Field(
        "NONREMOVAL", title="Type Removal Nonremoval"
    )
    type: str = Field(..., title="Type")


class Type31(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class Type32(Enum):
    PRESENT = "PRESENT"


class TypePvOther(Enum):
    OTHER = "OTHER"


class Type33(Enum):
    NONE = "NONE"
    WIND_TURBINE = "WIND_TURBINE"
    OTHER = "OTHER"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class OtherPowergenHazardPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_pv_other: Literal["OTHER"] = Field("OTHER", title="Type Pv Other")
    type: Literal["NONE", "NOT_APPLICABLE", "OTHER", "WIND_TURBINE"] = Field(..., title="Type")


class OtherPowergenHazardResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_pv_other: Literal["OTHER"] = Field("OTHER", title="Type Pv Other")
    type: str = Field(..., title="Type")


class Type34(Enum):
    OUTSIDE = "OUTSIDE"


class OutsideFireLocationDetailResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["OUTSIDE"] = Field("OUTSIDE", title="Type")
    acres_burned: Optional[float] = Field(
        None,
        description="Estimated number of acres burned during the incident.",
        examples=["0.5"],
        title="Acres Burned",
    )
    cause: str = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the outdoor fire.",
        title="Cause",
    )


class Action15(Enum):
    patch = "patch"


class PopulationResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source: Optional[str] = Field(None, title="Source")
    protected: Optional[int] = Field(None, title="Protected")


class PresenceKnownType(Enum):
    KNOWN_DISPATCH = "KNOWN_DISPATCH"
    KNOWN_ARRIVAL = "KNOWN_ARRIVAL"
    KNOWN_DURING = "KNOWN_DURING"


class PresenceKnownResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence_known_type: Optional[str] = Field(
        None,
        description="Whether the presence of an occupant in need of rescue was known",
        title="Presence Known Type",
    )


class TypePvOther2(Enum):
    PV = "PV"


class Type36(Enum):
    PHOTOVOLTAICS = "PHOTOVOLTAICS"


class SourceOrTarget1(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"


class PvType(Enum):
    PANEL_WATER_HEATING = "PANEL_WATER_HEATING"
    PANEL_POWER_GENERATION = "PANEL_POWER_GENERATION"
    TILE_POWER_GENERATION = "TILE_POWER_GENERATION"
    THIN_FILM_POWER_GENERATION = "THIN_FILM_POWER_GENERATION"
    OTHER = "OTHER"


class PvPowergenHazardResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_pv_other: Literal["PV"] = Field("PV", title="Type Pv Other")
    type: str = Field(..., title="Type")
    source_or_target: Optional[str] = Field(
        None,
        description="Whether photovoltaics were the source of ignition or target. Only applies to `PHOTOVOLTAICS` type.",
        title="Source Or Target",
    )
    pv_type: Optional[str] = Field(
        None,
        description="Type of photovoltaics were involved in the incident. Only applies to `PHOTOVOLTAICS` type.",
        title="Pv Type",
    )


class RegionPayload(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    geometry: GeoJsonMultiPolygon
    name: Optional[str] = Field(None, title="Name")
    internal_id: Optional[str] = Field(None, title="Internal Id")


class RegionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(None, title="Name")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    url: str = Field(..., title="Url")
    crs: Optional[int] = Field(None, title="Crs")
    source: Optional[str] = Field(None, title="Source")


class RegionSetResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(None, title="Name")
    type: str = Field(..., title="Type")
    primary: bool = Field(..., title="Primary")
    coverage: bool = Field(..., title="Coverage")
    juris: bool = Field(..., title="Juris")
    regions: Optional[List[RegionResponse]] = Field(None, title="Regions")


class UnitOfMeasurement(Enum):
    GAS_CUBIC_FOOT = "GAS_CUBIC_FOOT"
    GAS_CUBIC_INCH = "GAS_CUBIC_INCH"
    GAS_CUBIC_CENTIMETER = "GAS_CUBIC_CENTIMETER"
    GAS_CUBIC_METER = "GAS_CUBIC_METER"
    GAS_POUND = "GAS_POUND"
    LIQUID_CUBIC_CENTIMETER = "LIQUID_CUBIC_CENTIMETER"
    LIQUID_CUP = "LIQUID_CUP"
    LIQUID_GALLON = "LIQUID_GALLON"
    LIQUID_GRAM = "LIQUID_GRAM"
    LIQUID_KILOGRAM = "LIQUID_KILOGRAM"
    LIQUID_POUND = "LIQUID_POUND"
    LIQUID_LITER = "LIQUID_LITER"
    LIQUID_MILLIGRAM = "LIQUID_MILLIGRAM"
    LIQUID_MILLILITER = "LIQUID_MILLILITER"
    LIQUID_OUNCE = "LIQUID_OUNCE"
    LIQUID_PINT = "LIQUID_PINT"
    LIQUID_QUART = "LIQUID_QUART"
    LIQUID_TABLESPOON = "LIQUID_TABLESPOON"
    LIQUID_TEASPOON = "LIQUID_TEASPOON"
    SOLID_GRAM = "SOLID_GRAM"
    SOLID_KILOGRAM = "SOLID_KILOGRAM"
    SOLID_POUND = "SOLID_POUND"
    SOLID_LITER = "SOLID_LITER"
    SOLID_MILLIGRAM = "SOLID_MILLIGRAM"
    SOLID_OUNCE = "SOLID_OUNCE"
    SOLID_TABLESPOON = "SOLID_TABLESPOON"
    SOLID_TON = "SOLID_TON"
    SOLID_TEASPOON = "SOLID_TEASPOON"
    RADIOACTIVE_CURIE = "RADIOACTIVE_CURIE"
    RADIOACTIVE_MEGABECQUEREL = "RADIOACTIVE_MEGABECQUEREL"
    RADIOACTIVE_MILLICURIE = "RADIOACTIVE_MILLICURIE"
    RADIOACTIVE_TERABECQUEREL = "RADIOACTIVE_TERABECQUEREL"
    RADIOACTIVE_MICROCURIE = "RADIOACTIVE_MICROCURIE"


class PhysicalState(Enum):
    SOLID = "SOLID"
    LIQUID = "LIQUID"
    GAS = "GAS"
    RADIOACTIVE = "RADIOACTIVE"
    UNKNOWN = "UNKNOWN"


class ReleasedInto(Enum):
    AIR = "AIR"
    WATER = "WATER"
    GROUND = "GROUND"


class Cause1(Enum):
    INTENTIONAL = "INTENTIONAL"
    UNINTENTIONAL = "UNINTENTIONAL"
    CONTAINER_CONTAINMENT_FAILURE = "CONTAINER_CONTAINMENT_FAILURE"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    CAUSE_UNDER_INVESTIGATION = "CAUSE_UNDER_INVESTIGATION"


class TypeRemovalNonremoval2(Enum):
    REMOVAL = "REMOVAL"


class Type37(Enum):
    REMOVAL_FROM_STRUCTURE = "REMOVAL_FROM_STRUCTURE"


class RoomType(Enum):
    ASSEMBLY = "ASSEMBLY"
    BATHROOM = "BATHROOM"
    BEDROOM = "BEDROOM"
    KITCHEN = "KITCHEN"
    LIVING_SPACE = "LIVING_SPACE"
    HALLWAY_FOYER = "HALLWAY_FOYER"
    GARAGE = "GARAGE"
    BALCONY_PORCH_DECK = "BALCONY_PORCH_DECK"
    BASEMENT = "BASEMENT"
    ATTIC = "ATTIC"
    OFFICE = "OFFICE"
    UTILITY_ROOM = "UTILITY_ROOM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class ElevationType(Enum):
    ON_FLOOR = "ON_FLOOR"
    ON_BED = "ON_BED"
    ON_FURNITURE = "ON_FURNITURE"
    OTHER = "OTHER"


class RescuePathType(Enum):
    REMOVAL_ALONG_PRIMARY_PATH = "REMOVAL_ALONG_PRIMARY_PATH"
    REMOVAL_ALONG_ALT_PATH = "REMOVAL_ALONG_ALT_PATH"


class RemovalResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type_removal_nonremoval: Literal["REMOVAL"] = Field("REMOVAL", title="Type Removal Nonremoval")
    gas_isolation: Optional[bool] = Field(
        None,
        description="Whether the space was isolated from the flow of heat and/or toxic gases.",
        title="Gas Isolation",
    )
    type: str = Field(..., title="Type")
    room_type: Optional[str] = Field(
        None,
        description="Type of room/space from which the occupant was rescued.",
        title="Room Type",
    )
    elevation_type: Optional[str] = Field(
        None,
        description="Elevation at which the occupant was found.",
        title="Elevation Type",
    )
    rescue_path_type: Optional[str] = Field(
        None,
        description="How the firefighter was removed from the structure.",
        title="Rescue Path Type",
    )
    fire_removal: Optional[FireRemovalResponse] = None


class Action82(Enum):
    remove = "remove"


class RemoveElectricHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["remove"] = Field(
        ..., description="Remove an element from the array", title="Action"
    )
    neris_uid: int = Field(
        ...,
        description="The NERIS unique identifier (nuid) of the element to be removed",
        title="Neris Uid",
    )


class RemoveElementAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["remove"] = Field(
        ..., description="Remove an element from the array", title="Action"
    )
    neris_uid: int = Field(
        ...,
        description="The NERIS unique identifier (nuid) of the element to be removed",
        title="Neris Uid",
    )


class RemovePowergenHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["remove"] = Field(
        ..., description="Remove an element from the array", title="Action"
    )
    neris_uid: int = Field(
        ...,
        description="The NERIS unique identifier (nuid) of the element to be removed",
        title="Neris Uid",
    )


class Action85(Enum):
    set = "set"


class SetBoolAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: bool = Field(..., title="Value")


class SetDateTimeAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: AwareDatetime = Field(
        ...,
        description="An ISO 8601 formatted datetime string or Unix time (seconds since 1 January 1970) as a float, integer, or string.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Value",
    )


class SetDeterminantCodeAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: constr(max_length=8) = Field(..., title="Value")


class SetDictAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Dict[str, Any] = Field(..., title="Value")


class SetFloatAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: float = Field(..., title="Value")


class SetGeoMultipolygonAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: GeoMultipolygon


class SetGeoPointAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: GeoPoint


class SetIncidentTacticTimestampsAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: IncidentTacticTimestampsPayload


class SetIntAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: int = Field(..., title="Value")


class SetInuseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: InusePayload


class SetNarrativeStrAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: constr(min_length=1, max_length=100000) = Field(..., title="Value")


class SetNerisIdDeptStrAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: constr(pattern=r"^FD\d{8}$") = Field(
        ..., examples=["FD24027334", "FD24160543"], title="Value"
    )


class SetNerisIdUnitStrAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$") = Field(
        ..., examples=["FD24027334S001U003", "FD24160543S010U001"], title="Value"
    )


class Value(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class SetNotpresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value = Field(..., title="Value")


class SetOperation(Enum):
    INTERSECTION = "INTERSECTION"
    UNION = "UNION"


class Value1(Enum):
    PRESENT = "PRESENT"


class SetPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["PRESENT"] = Field(..., title="Value")


class SetSimpleStrAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: constr(min_length=1, max_length=255) = Field(..., title="Value")


class ShiftPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    count: Optional[int] = Field(None, title="Count")
    duration: Optional[int] = Field(None, title="Duration")
    signup: Optional[int] = Field(None, title="Signup")


class ShiftResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    count: Optional[int] = Field(None, title="Count")
    duration: Optional[int] = Field(None, title="Duration")
    signup: Optional[int] = Field(None, title="Signup")


class TypeOperationAlerted(Enum):
    ALERTED = "ALERTED"


class Type38(Enum):
    WORKING_ALERTED_OCCUPANT = "WORKING_ALERTED_OCCUPANT"
    OPERATED_ALERTED_OCCUPANT = "OPERATED_ALERTED_OCCUPANT"


class OccupantAction(Enum):
    EVACUATED = "EVACUATED"
    IGNORED_ALARM = "IGNORED_ALARM"
    UNABLE_TO_RESPOND = "UNABLE_TO_RESPOND"
    ATTEMPTED_TO_EXTINGUISH = "ATTEMPTED_TO_EXTINGUISH"
    ATTEMPTED_TO_RESCUE_OCCUPANTS = "ATTEMPTED_TO_RESCUE_OCCUPANTS"
    ATTEMPTED_TO_RESCUE_ANIMALS = "ATTEMPTED_TO_RESCUE_ANIMALS"
    UNKNOWN = "UNKNOWN"


class TypeOperationAlerted1(Enum):
    FAILED = "FAILED"


class Type39(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"


class FailureReason2(Enum):
    EXPIRED = "EXPIRED"
    NO_BATTERY = "NO_BATTERY"
    IMPROPER_INSTALLATION = "IMPROPER_INSTALLATION"
    DEVICE_MALFUNCTION = "DEVICE_MALFUNCTION"
    TAMPER = "TAMPER"
    OTHER_NON_FUNCTIONAL_CAUSE = "OTHER_NON_FUNCTIONAL_CAUSE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class Type40(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class SmokeAlarmNotPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class TypeOperationAlerted2(Enum):
    ALERTED = "ALERTED"


class Type41(Enum):
    WORKING_FAILED_TO_ALERT_OCCUPANT = "WORKING_FAILED_TO_ALERT_OCCUPANT"
    INSUFFICENT_SOURCE = "INSUFFICENT_SOURCE"
    UNKNOWN = "UNKNOWN"
    OPERATED_FAILED_TO_ALERT_OCCUPANT = "OPERATED_FAILED_TO_ALERT_OCCUPANT"
    NO_OCCUPANT_TO_NOTIFY = "NO_OCCUPANT_TO_NOTIFY"
    INSUFFICIENT_SOURCE = "INSUFFICIENT_SOURCE"


class SmokeAlarmOtherPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_alerted: Literal["ALERTED"] = Field("ALERTED", title="Type Operation Alerted")
    type: Literal[
        "INSUFFICENT_SOURCE",
        "INSUFFICIENT_SOURCE",
        "NO_OCCUPANT_TO_NOTIFY",
        "OPERATED_FAILED_TO_ALERT_OCCUPANT",
        "UNKNOWN",
        "WORKING_FAILED_TO_ALERT_OCCUPANT",
    ] = Field(..., title="Type")


class Type42(Enum):
    PRESENT = "PRESENT"


class SortDirection(Enum):
    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class SpecialModifierResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type: str = Field(
        ...,
        description="Incident modifier(s) that can help describe the magnitude or class of the incident.",
        title="Type",
    )


class StaffingPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    active_firefighters_career_ft: Optional[int] = Field(
        None, title="Active Firefighters Career Ft"
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title="Active Firefighters Career Pt"
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title="Active Firefighters Volunteer"
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title="Active Ems Only Career Ft")
    active_ems_only_career_pt: Optional[int] = Field(None, title="Active Ems Only Career Pt")
    active_ems_only_volunteer: Optional[int] = Field(None, title="Active Ems Only Volunteer")
    active_civilians_career_ft: Optional[int] = Field(None, title="Active Civilians Career Ft")
    active_civilians_career_pt: Optional[int] = Field(None, title="Active Civilians Career Pt")
    active_civilians_volunteer: Optional[int] = Field(None, title="Active Civilians Volunteer")


class StaffingResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    active_firefighters_career_ft: Optional[int] = Field(
        None, title="Active Firefighters Career Ft"
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title="Active Firefighters Career Pt"
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title="Active Firefighters Volunteer"
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title="Active Ems Only Career Ft")
    active_ems_only_career_pt: Optional[int] = Field(None, title="Active Ems Only Career Pt")
    active_ems_only_volunteer: Optional[int] = Field(None, title="Active Ems Only Volunteer")
    active_civilians_career_ft: Optional[int] = Field(None, title="Active Civilians Career Ft")
    active_civilians_career_pt: Optional[int] = Field(None, title="Active Civilians Career Pt")
    active_civilians_volunteer: Optional[int] = Field(None, title="Active Civilians Volunteer")


class Type43(Enum):
    STRUCTURE = "STRUCTURE"


class StructureFireLocationDetailResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["STRUCTURE"] = Field("STRUCTURE", title="Type")
    progression_evident: Optional[bool] = Field(
        None,
        description="Whether the fire extended beyond the conditions found upon arrival.",
        title="Progression Evident",
    )
    floor_of_origin: int = Field(
        ...,
        description="Storey above or below ground of fire origin.",
        examples=[1, 2, 3],
        title="Floor Of Origin",
    )
    arrival_condition: str = Field(
        ...,
        description="Fire conditions upon arriving on the scene of the incident.",
        title="Arrival Condition",
    )
    damage_type: str = Field(
        ...,
        description="Rating of damage to the fire building of origin as selected from a list of values.",
        title="Damage Type",
    )
    room_of_origin_type: str = Field(
        ...,
        description="Type of room of origin of the fire.",
        title="Room Of Origin Type",
    )
    cause: str = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the structure fire.",
        title="Cause",
    )


class TypeActionTacticValue(Enum):
    COMMAND_AND_CONTROL__ESTABLISH_INCIDENT_COMMAND = (
        "COMMAND_AND_CONTROL||ESTABLISH_INCIDENT_COMMAND"
    )
    COMMAND_AND_CONTROL__SAFETY_OFFICER_ASSIGNED = "COMMAND_AND_CONTROL||SAFETY_OFFICER_ASSIGNED"
    COMMAND_AND_CONTROL__PIO_ASSIGNED = "COMMAND_AND_CONTROL||PIO_ASSIGNED"
    COMMAND_AND_CONTROL__NOTIFY_OTHER_AGENCIES = "COMMAND_AND_CONTROL||NOTIFY_OTHER_AGENCIES"
    COMMAND_AND_CONTROL__INCIDENT_ASSESSMENT_COMPLETED = (
        "COMMAND_AND_CONTROL||INCIDENT_ASSESSMENT_COMPLETED"
    )
    COMMAND_AND_CONTROL__ACCOUNTABILITY_OFFICER_ASSIGNED = (
        "COMMAND_AND_CONTROL||ACCOUNTABILITY_OFFICER_ASSIGNED"
    )
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||INTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR_AND_INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR_AND_INTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__ESTABLISH_FIRE_LINES = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||ESTABLISH_FIRE_LINES"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__BACKBURN = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||BACKBURN"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__CONFINEMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||CONFINEMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__STRUCTURE_PROTECTION = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||STRUCTURE_PROTECTION"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_CONTROL_EXTINGUISHMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_CONTROL_EXTINGUISHMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_RETARDANT_DROP = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_RETARDANT_DROP"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__WATER_DROP = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||WATER_DROP"
    )
    CONTAINMENT__OUTSIDE_FIRE_SUPPRESSION__HAND_CREW_FUEL_BREAK = (
        "CONTAINMENT||OUTSIDE_FIRE_SUPPRESSION||HAND_CREW_FUEL_BREAK"
    )
    CONTAINMENT__OUTSIDE_FIRE_SUPPRESSION__DOZER_FUEL_BREAK = (
        "CONTAINMENT||OUTSIDE_FIRE_SUPPRESSION||DOZER_FUEL_BREAK"
    )
    VENTILATION__VERTICAL = "VENTILATION||VERTICAL"
    VENTILATION__VERTICAL__PRIOR_TO_SUPPRESSION = "VENTILATION||VERTICAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__VERTICAL__DURING_SUPPRESSION = "VENTILATION||VERTICAL||DURING_SUPPRESSION"
    VENTILATION__VERTICAL__POST_SUPPRESSION = "VENTILATION||VERTICAL||POST_SUPPRESSION"
    VENTILATION__HORIZONTAL = "VENTILATION||HORIZONTAL"
    VENTILATION__HORIZONTAL__PRIOR_TO_SUPPRESSION = "VENTILATION||HORIZONTAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__HORIZONTAL__DURING_SUPPRESSION = "VENTILATION||HORIZONTAL||DURING_SUPPRESSION"
    VENTILATION__HORIZONTAL__POST_SUPPRESSION = "VENTILATION||HORIZONTAL||POST_SUPPRESSION"
    VENTILATION__POSITIVE_PRESSURE = "VENTILATION||POSITIVE_PRESSURE"
    VENTILATION__POSITIVE_PRESSURE__PRIOR_TO_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||PRIOR_TO_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__DURING_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||DURING_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__POST_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||POST_SUPPRESSION"
    )
    VENTILATION__HYDRAULIC = "VENTILATION||HYDRAULIC"
    VENTILATION__HYDRAULIC__PRIOR_TO_SUPPRESSION = "VENTILATION||HYDRAULIC||PRIOR_TO_SUPPRESSION"
    VENTILATION__HYDRAULIC__DURING_SUPPRESSION = "VENTILATION||HYDRAULIC||DURING_SUPPRESSION"
    VENTILATION__HYDRAULIC__POST_SUPPRESSION = "VENTILATION||HYDRAULIC||POST_SUPPRESSION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH = "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH"
    NON_STRUCTURE_SEARCH__WIDE_AREA_OUTDOOR_SEARCH = (
        "NON_STRUCTURE_SEARCH||WIDE_AREA_OUTDOOR_SEARCH"
    )
    HAZARDOUS_SITUATION_MITIGATION__TAKE_SAMPLES = "HAZARDOUS_SITUATION_MITIGATION||TAKE_SAMPLES"
    HAZARDOUS_SITUATION_MITIGATION__SPILL_CONTROL = "HAZARDOUS_SITUATION_MITIGATION||SPILL_CONTROL"
    HAZARDOUS_SITUATION_MITIGATION__LEAK_STOP = "HAZARDOUS_SITUATION_MITIGATION||LEAK_STOP"
    HAZARDOUS_SITUATION_MITIGATION__REMOVE_HAZARD = "HAZARDOUS_SITUATION_MITIGATION||REMOVE_HAZARD"
    HAZARDOUS_SITUATION_MITIGATION__DECONTAMINATION = (
        "HAZARDOUS_SITUATION_MITIGATION||DECONTAMINATION"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_INTERIOR = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_INTERIOR"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE"
    )
    PROVIDE_EVACUATION_SUPPORT__CONNECTED_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||CONNECTED_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__REMOTE_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||REMOTE_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__NEARBY_BUILDINGS = "PROVIDE_EVACUATION_SUPPORT||NEARBY_BUILDINGS"
    PROVIDE_EVACUATION_SUPPORT__LARGE_AREA = "PROVIDE_EVACUATION_SUPPORT||LARGE_AREA"
    PROVIDE_EQUIPMENT__PROVIDE_SPECIAL_EQUIPMENT = "PROVIDE_EQUIPMENT||PROVIDE_SPECIAL_EQUIPMENT"
    PROVIDE_EQUIPMENT__PROVIDE_LIGHT = "PROVIDE_EQUIPMENT||PROVIDE_LIGHT"
    PROVIDE_EQUIPMENT__PROVIDE_ELECTRICAL_POWER = "PROVIDE_EQUIPMENT||PROVIDE_ELECTRICAL_POWER"
    PROVIDE_EQUIPMENT__PROVIDE_DRONE_VIDEO_EQUIPMENT = (
        "PROVIDE_EQUIPMENT||PROVIDE_DRONE_VIDEO_EQUIPMENT"
    )
    PROVIDE_SERVICES__RESTORE_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||RESTORE_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__RESTORE_RESET_ALARM_SYSTEM = "PROVIDE_SERVICES||RESTORE_RESET_ALARM_SYSTEM"
    PROVIDE_SERVICES__SHUT_DOWN_ALARM = "PROVIDE_SERVICES||SHUT_DOWN_ALARM"
    PROVIDE_SERVICES__SHUT_DOWN_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||SHUT_DOWN_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__SECURE_PROPERTY = "PROVIDE_SERVICES||SECURE_PROPERTY"
    PROVIDE_SERVICES__REMOVE_WATER = "PROVIDE_SERVICES||REMOVE_WATER"
    PROVIDE_SERVICES__ASSIST_UNINJURED_PERSON = "PROVIDE_SERVICES||ASSIST_UNINJURED_PERSON"
    PROVIDE_SERVICES__ASSIST_ANIMAL = "PROVIDE_SERVICES||ASSIST_ANIMAL"
    PROVIDE_SERVICES__PROVIDE_APPARATUS_WATER = "PROVIDE_SERVICES||PROVIDE_APPARATUS_WATER"
    PROVIDE_SERVICES__CONTROL_CROWD = "PROVIDE_SERVICES||CONTROL_CROWD"
    PROVIDE_SERVICES__CONTROL_TRAFFIC = "PROVIDE_SERVICES||CONTROL_TRAFFIC"
    PROVIDE_SERVICES__DAMAGE_ASSESSMENT = "PROVIDE_SERVICES||DAMAGE_ASSESSMENT"
    INFORMATION_ENFORCEMENT__REFER_TO_PROPER_AHJ = "INFORMATION_ENFORCEMENT||REFER_TO_PROPER_AHJ"
    INFORMATION_ENFORCEMENT__ENFORCE_CODE_OR_LAW = "INFORMATION_ENFORCEMENT||ENFORCE_CODE_OR_LAW"
    EMERGENCY_MEDICAL_CARE__PATIENT_ASSESSMENT = "EMERGENCY_MEDICAL_CARE||PATIENT_ASSESSMENT"
    EMERGENCY_MEDICAL_CARE__PROVIDE_BASIC_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_BASIC_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_ADVANCED_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_ADVANCED_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_TRANSPORT = "EMERGENCY_MEDICAL_CARE||PROVIDE_TRANSPORT"
    EMERGENCY_MEDICAL_CARE__PATIENT_REFERRAL = "EMERGENCY_MEDICAL_CARE||PATIENT_REFERRAL"
    INVESTIGATION = "INVESTIGATION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH = "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH"
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    NON_STRUCTURE_SEARCH__SEARCH_AREA_OF_COLLAPSE = "NON_STRUCTURE_SEARCH||SEARCH_AREA_OF_COLLAPSE"
    NON_STRUCTURE_SEARCH__SEARCH_UNDERGROUND_INFRASTRUCTURE = (
        "NON_STRUCTURE_SEARCH||SEARCH_UNDERGROUND_INFRASTRUCTURE"
    )
    NON_STRUCTURE_SEARCH__SEARCH_WATERWAY = "NON_STRUCTURE_SEARCH||SEARCH_WATERWAY"
    NON_STRUCTURE_SEARCH__BODY_RECOVERY = "NON_STRUCTURE_SEARCH||BODY_RECOVERY"
    NON_STRUCTURE_SEARCH__USAR_K9_SEARCH = "NON_STRUCTURE_SEARCH||USAR_K9_SEARCH"
    SALVAGE_AND_OVERHAUL = "SALVAGE_AND_OVERHAUL"
    PERSONNEL_CONTAMINATION_REDUCTION__ON_SCENE_CONTAMINATION_REDUCTION = (
        "PERSONNEL_CONTAMINATION_REDUCTION||ON_SCENE_CONTAMINATION_REDUCTION"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__CLEAN_CAB_TRANSPORT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||CLEAN_CAB_TRANSPORT"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__PPE_WASHED_POST_INCIDENT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||PPE_WASHED_POST_INCIDENT"
    )
    INFORMATION_ENFORCEMENT__PROVIDE_PUBLIC_INFORMATION = (
        "INFORMATION_ENFORCEMENT||PROVIDE_PUBLIC_INFORMATION"
    )


class TypeActionValue(Enum):
    CREATE = "CREATE"
    READ = "READ"
    UPDATE = "UPDATE"
    DELETE = "DELETE"


class TypeAidDirectionValue(Enum):
    GIVEN = "GIVEN"
    RECEIVED = "RECEIVED"


class TypeAidNonfdValue(Enum):
    LAW_ENFORCEMENT = "LAW_ENFORCEMENT"
    SOCIAL_SERVICES = "SOCIAL_SERVICES"
    ANIMAL_SERVICES = "ANIMAL_SERVICES"
    HOUSING_SERVICES = "HOUSING_SERVICES"
    UTILITIES_PUBLIC_WORKS = "UTILITIES_PUBLIC_WORKS"
    REMEDIATION_SERVICES = "REMEDIATION_SERVICES"


class TypeAidValue(Enum):
    SUPPORT_AID = "SUPPORT_AID"
    IN_LIEU_AID = "IN_LIEU_AID"
    ACTING_AS_AID = "ACTING_AS_AID"


class TypeAlarmFailureValue(Enum):
    EXPIRED = "EXPIRED"
    NO_BATTERY = "NO_BATTERY"
    IMPROPER_INSTALLATION = "IMPROPER_INSTALLATION"
    DEVICE_MALFUNCTION = "DEVICE_MALFUNCTION"
    TAMPER = "TAMPER"
    OTHER_NON_FUNCTIONAL_CAUSE = "OTHER_NON_FUNCTIONAL_CAUSE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class TypeAlarmFireValue(Enum):
    MANUAL = "MANUAL"
    AUTOMATIC = "AUTOMATIC"
    MANUAL_AND_AUTOMATIC = "MANUAL_AND_AUTOMATIC"


class TypeAlarmOperationValue(Enum):
    OPERATED_ALERTED_OCCUPANT = "OPERATED_ALERTED_OCCUPANT"
    OPERATED_FAILED_TO_ALERT_OCCUPANT = "OPERATED_FAILED_TO_ALERT_OCCUPANT"
    NO_OCCUPANT_TO_NOTIFY = "NO_OCCUPANT_TO_NOTIFY"
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"
    INSUFFICIENT_SOURCE = "INSUFFICIENT_SOURCE"


class TypeAlarmOtherValue(Enum):
    CARBON_MONOXIDE = "CARBON_MONOXIDE"
    NATURAL_GAS = "NATURAL_GAS"
    HEAT_DETECTOR = "HEAT_DETECTOR"
    OTHER_CHEMICAL_DETECTOR = "OTHER_CHEMICAL_DETECTOR"


class TypeAlarmSmokeValue(Enum):
    LONG_LIFE_BATTERY_POWERED = "LONG_LIFE_BATTERY_POWERED"
    REPLACEABLE_BATTERY_POWERED = "REPLACEABLE_BATTERY_POWERED"
    HARDWIRED = "HARDWIRED"
    INTERCONNECTED = "INTERCONNECTED"
    HARD_OF_HEARING_WITH_STROBE = "HARD_OF_HEARING_WITH_STROBE"
    BED_SHAKER = "BED_SHAKER"
    COMBINATION = "COMBINATION"
    UNKNOWN = "UNKNOWN"


class TypeCasualtyActionValue(Enum):
    SEARCH_RESCUE = "SEARCH_RESCUE"
    CARRYING_SETTINGUP_EQUIPMENT = "CARRYING_SETTINGUP_EQUIPMENT"
    ADVANCING_OPERATING_HOSELINE = "ADVANCING_OPERATING_HOSELINE"
    VEHICLE_EXTRICATION = "VEHICLE_EXTRICATION"
    VENTILATION = "VENTILATION"
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    PUMP_OPERATIONS = "PUMP_OPERATIONS"
    EMS_PATIENT_CARE = "EMS_PATIENT_CARE"
    DURING_INCIDENT_RESPONSE = "DURING_INCIDENT_RESPONSE"
    SCENE_SAFETY_DIRECTING_TRAFFIC = "SCENE_SAFETY_DIRECTING_TRAFFIC"
    STANDBY = "STANDBY"
    INCIDENT_COMMAND = "INCIDENT_COMMAND"
    OTHER = "OTHER"


class TypeCasualtyCauseValue(Enum):
    CAUGHT_TRAPPED_BY_FIRE_EXPLOSION = "CAUGHT_TRAPPED_BY_FIRE_EXPLOSION"
    FALL_JUMP = "FALL_JUMP"
    STRESS_OVEREXERTION = "STRESS_OVEREXERTION"
    COLLAPSE = "COLLAPSE"
    CAUGHT_TRAPPED_BY_OBJECT = "CAUGHT_TRAPPED_BY_OBJECT"
    STRUCK_CONTACT_WITH_OBJECT = "STRUCK_CONTACT_WITH_OBJECT"
    EXPOSURE = "EXPOSURE"
    VEHICLE_COLLISION = "VEHICLE_COLLISION"
    OTHER = "OTHER"


class TypeCasualtyPpeValue(Enum):
    TURNOUT_COAT = "TURNOUT_COAT"
    BUNKER_PANTS = "BUNKER_PANTS"
    PROTECTIVE_HOOD = "PROTECTIVE_HOOD"
    GLOVES = "GLOVES"
    FACE_SHIELD_GOGGLES = "FACE_SHIELD_GOGGLES"
    HELMET = "HELMET"
    SCBA = "SCBA"
    PASS_DEVICE = "PASS_DEVICE"
    RUBBER_KNEE_BOOTS = "RUBBER_KNEE_BOOTS"
    field_3_4_BOOTS = "3_4_BOOTS"
    BRUSH_GEAR = "BRUSH_GEAR"
    REFLECTIVE_VEST = "REFLECTIVE_VEST"
    OTHER_SPECIAL_EQUIPMENT = "OTHER_SPECIAL_EQUIPMENT"


class TypeCasualtyTimelineValue(Enum):
    RESPONDING = "RESPONDING"
    INITIAL_RESPONSE = "INITIAL_RESPONSE"
    CONTINUING_OPERATIONS = "CONTINUING_OPERATIONS"
    EXTENDED_OPERATIONS = "EXTENDED_OPERATIONS"
    AFTER_CONCLUSION_OF_INCIDENT = "AFTER_CONCLUSION_OF_INCIDENT"
    UNKNOWN = "UNKNOWN"


class TypeDeptValue(Enum):
    CAREER = "CAREER"
    VOLUNTEER = "VOLUNTEER"
    COMBINATION = "COMBINATION"


class TypeDispProtoFireValue(Enum):
    PROQA = "PROQA"
    IAED = "IAED"
    APCO = "APCO"
    OTHER = "OTHER"


class TypeDispProtoMedValue(Enum):
    PROQA = "PROQA"
    IAED = "IAED"
    APCO = "APCO"
    OTHER = "OTHER"


class TypeDisplaceCauseValueRelExposure(Enum):
    FIRE = "FIRE"
    SMOKE = "SMOKE"
    WATER = "WATER"
    UTILITIES = "UTILITIES"
    HAZARDOUS_SITUATION = "HAZARDOUS_SITUATION"
    COLLAPSE = "COLLAPSE"
    OTHER = "OTHER"


class TypeDisplaceCauseValueRelIncident(Enum):
    FIRE = "FIRE"
    SMOKE = "SMOKE"
    WATER = "WATER"
    UTILITIES = "UTILITIES"
    HAZARDOUS_SITUATION = "HAZARDOUS_SITUATION"
    COLLAPSE = "COLLAPSE"
    OTHER = "OTHER"


class TypeDutyValue(Enum):
    RESPONDING_TO_EMERGENCY_INCIDENT = "RESPONDING_TO_EMERGENCY_INCIDENT"
    WORKING_AT_SCENE_OF_FIRE_INCIDENT = "WORKING_AT_SCENE_OF_FIRE_INCIDENT"
    WORKING_AT_SCENE_OF_NONFIRE_INCIDENT = "WORKING_AT_SCENE_OF_NONFIRE_INCIDENT"
    RETURNING_FROM_EMERGENCY_INCIDENT = "RETURNING_FROM_EMERGENCY_INCIDENT"
    TRAINING = "TRAINING"
    AFTER_INCIDENT = "AFTER_INCIDENT"
    OTHER_ON_DUTY_INCIDENT = "OTHER_ON_DUTY_INCIDENT"


class TypeEmerghazElecValue(Enum):
    CONSUMER_PRODUCTS__APPLIANCE_TOOL = "CONSUMER_PRODUCTS||APPLIANCE_TOOL"
    CONSUMER_PRODUCTS__CELL_PHONE = "CONSUMER_PRODUCTS||CELL_PHONE"
    CONSUMER_PRODUCTS__COMPUTER_TABLET = "CONSUMER_PRODUCTS||COMPUTER_TABLET"
    CONSUMER_PRODUCTS__ELECTRONIC_CIGARETTE = "CONSUMER_PRODUCTS||ELECTRONIC_CIGARETTE"
    CONSUMER_PRODUCTS__POWER_BANK = "CONSUMER_PRODUCTS||POWER_BANK"
    CONSUMER_PRODUCTS__TOY = "CONSUMER_PRODUCTS||TOY"
    CONSUMER_PRODUCTS__OTHER = "CONSUMER_PRODUCTS||OTHER"
    ENERGY_STORAGE_SYSTEM__HYDROELECTRIC = "ENERGY_STORAGE_SYSTEM||HYDROELECTRIC"
    ENERGY_STORAGE_SYSTEM__BATTERY = "ENERGY_STORAGE_SYSTEM||BATTERY"
    ENERGY_STORAGE_SYSTEM__COMPRESSED_AIR = "ENERGY_STORAGE_SYSTEM||COMPRESSED_AIR"
    ENERGY_STORAGE_SYSTEM__FLYWHEEL = "ENERGY_STORAGE_SYSTEM||FLYWHEEL"
    ENERGY_STORAGE_SYSTEM__OTHER = "ENERGY_STORAGE_SYSTEM||OTHER"
    E_MOBILITY__POWER_ASSISTED_BICYCLE = "E_MOBILITY||POWER_ASSISTED_BICYCLE"
    E_MOBILITY__ELECTRIC_SCOOTER_MOPED = "E_MOBILITY||ELECTRIC_SCOOTER_MOPED"
    E_MOBILITY__PERSONAL_MOBILITY_ASSIST = "E_MOBILITY||PERSONAL_MOBILITY_ASSIST"
    E_MOBILITY__OTHER = "E_MOBILITY||OTHER"
    ELECTRIC_VEHICLE__CAR_RR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||CAR_RR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__CAR_RR__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||CAR_RR||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__CAR_RR__HYBRID = "ELECTRIC_VEHICLE||CAR_RR||HYBRID"
    ELECTRIC_VEHICLE__CAR_RR__FUEL_CELL = "ELECTRIC_VEHICLE||CAR_RR||FUEL_CELL"
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__HYBRID = "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||HYBRID"
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__FUEL_CELL = (
        "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||FUEL_CELL"
    )
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__HYBRID = "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||HYBRID"
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__FUEL_CELL = (
        "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||FUEL_CELL"
    )
    ELECTRIC_VEHICLE__BUS_RR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||BUS_RR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__BUS_RR__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||BUS_RR||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__BUS_RR__HYBRID = "ELECTRIC_VEHICLE||BUS_RR||HYBRID"
    ELECTRIC_VEHICLE__BUS_RR__FUEL_CELL = "ELECTRIC_VEHICLE||BUS_RR||FUEL_CELL"
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__HYBRID = "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||HYBRID"
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__Fuel_Cell = (
        "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||Fuel_Cell"
    )
    ELECTRIC_VEHICLE__BOAT_COMMERCIAL__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||BOAT_COMMERCIAL||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__BOAT_COMMERCIAL__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||BOAT_COMMERCIAL||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__BOAT_COMMERCIAL__HYBRID = "ELECTRIC_VEHICLE||BOAT_COMMERCIAL||HYBRID"
    ELECTRIC_VEHICLE__BOAT_COMMERCIAL__FUEL_CELL = "ELECTRIC_VEHICLE||BOAT_COMMERCIAL||FUEL_CELL"
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||LIGHT_EV_NRR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||LIGHT_EV_NRR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__HYBRID = "ELECTRIC_VEHICLE||LIGHT_EV_NRR||HYBRID"
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__FUEL_CELL = "ELECTRIC_VEHICLE||LIGHT_EV_NRR||FUEL_CELL"
    ELECTRIC_VEHICLE__OTHER__FULL_ELECTRIC = "ELECTRIC_VEHICLE||OTHER||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__OTHER__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||OTHER||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__OTHER__HYBRID = "ELECTRIC_VEHICLE||OTHER||HYBRID"
    ELECTRIC_VEHICLE__OTHER__FUEL_CELL = "ELECTRIC_VEHICLE||OTHER||FUEL_CELL"


class TypeEmerghazPvIgnValue(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"


class TypeEmerghazPvValue(Enum):
    PANEL_WATER_HEATING = "PANEL_WATER_HEATING"
    PANEL_POWER_GENERATION = "PANEL_POWER_GENERATION"
    TILE_POWER_GENERATION = "TILE_POWER_GENERATION"
    THIN_FILM_POWER_GENERATION = "THIN_FILM_POWER_GENERATION"
    OTHER = "OTHER"


class TypeEmerghazSuppressionValue(Enum):
    RUN_COURSE = "RUN_COURSE"
    SUPPRESSION_WATER_ONLY = "SUPPRESSION_WATER_ONLY"
    SUPPRESSION_WATER_ADDITIVE = "SUPPRESSION_WATER_ADDITIVE"
    SUBMERGE_BURY = "SUBMERGE_BURY"
    FIRE_BLANKET = "FIRE_BLANKET"
    BATTERY_PENETRATION = "BATTERY_PENETRATION"


class TypeEntitySetValue(Enum):
    ALL = "ALL"
    NONE = "NONE"
    INDIVIDUAL = "INDIVIDUAL"
    STATE = "STATE"
    FEDERAL = "FEDERAL"
    NGO = "NGO"


class TypeEntityValue(Enum):
    LOCAL = "LOCAL"
    CONTRACT = "CONTRACT"
    FEDERAL = "FEDERAL"
    STATE = "STATE"
    OTHER = "OTHER"
    PRIVATE = "PRIVATE"
    TRANSPORTATION = "TRANSPORTATION"
    TRIBAL = "TRIBAL"


class TypeExposureDamageValue(Enum):
    NO_DAMAGE = "NO_DAMAGE"
    MINOR_DAMAGE = "MINOR_DAMAGE"
    MODERATE_DAMAGE = "MODERATE_DAMAGE"
    MAJOR_DAMAGE = "MAJOR_DAMAGE"


class TypeExposureItemValue(Enum):
    STRUCTURE = "STRUCTURE"
    VEHICLE = "VEHICLE"
    OUTDOOR_ENVIRONMENT = "OUTDOOR_ENVIRONMENT"
    OBJECT_OTHER = "OBJECT_OTHER"


class TypeFireBldgDamageValue(Enum):
    NO_DAMAGE = "NO_DAMAGE"
    MINOR_DAMAGE = "MINOR_DAMAGE"
    MODERATE_DAMAGE = "MODERATE_DAMAGE"
    MAJOR_DAMAGE = "MAJOR_DAMAGE"


class TypeFireCauseInValue(Enum):
    OPERATING_EQUIPMENT = "OPERATING_EQUIPMENT"
    ELECTRICAL = "ELECTRICAL"
    BATTERY_POWER_STORAGE = "BATTERY_POWER_STORAGE"
    HEAT_FROM_ANOTHER_OBJECT = "HEAT_FROM_ANOTHER_OBJECT"
    EXPLOSIVES_FIREWORKS = "EXPLOSIVES_FIREWORKS"
    SMOKING_MATERIALS_ILLICIT_DRUGS = "SMOKING_MATERIALS_ILLICIT_DRUGS"
    OPEN_FLAME = "OPEN_FLAME"
    COOKING = "COOKING"
    CHEMICAL = "CHEMICAL"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    INCENDIARY = "INCENDIARY"
    OTHER_HEAT_SOURCE = "OTHER_HEAT_SOURCE"
    UNABLE_TO_BE_DETERMINED = "UNABLE_TO_BE_DETERMINED"


class TypeFireCauseOutValue(Enum):
    NATURAL = "NATURAL"
    EQUIPMENT_VEHICLE_USE = "EQUIPMENT_VEHICLE_USE"
    SMOKING_MATERIALS_ILLICIT_DRUGS = "SMOKING_MATERIALS_ILLICIT_DRUGS"
    RECREATION_CEREMONY = "RECREATION_CEREMONY"
    DEBRIS_OPEN_BURNING = "DEBRIS_OPEN_BURNING"
    RAILROAD_OPS_MAINTENANCE = "RAILROAD_OPS_MAINTENANCE"
    FIREARMS_EXPLOSIVES = "FIREARMS_EXPLOSIVES"
    FIREWORKS = "FIREWORKS"
    POWER_GEN_TRANS_DIST = "POWER_GEN_TRANS_DIST"
    STRUCTURE = "STRUCTURE"
    INCENDIARY = "INCENDIARY"
    BATTERY_POWER_STORAGE = "BATTERY_POWER_STORAGE"
    SPREAD_FROM_CONTROLLED_BURN = "SPREAD_FROM_CONTROLLED_BURN"
    UNABLE_TO_BE_DETERMINED = "UNABLE_TO_BE_DETERMINED"


class TypeFireConditionArrivalValue(Enum):
    NO_SMOKE_FIRE_SHOWING = "NO_SMOKE_FIRE_SHOWING"
    SMOKE_SHOWING = "SMOKE_SHOWING"
    SMOKE_FIRE_SHOWING = "SMOKE_FIRE_SHOWING"
    STRUCTURE_INVOLVED = "STRUCTURE_INVOLVED"
    FIRE_SPREAD_BEYOND_STRUCTURE = "FIRE_SPREAD_BEYOND_STRUCTURE"
    FIRE_OUT_UPON_ARRIVAL = "FIRE_OUT_UPON_ARRIVAL"


class TypeFireInvestNeedValue(Enum):
    YES = "YES"
    NO = "NO"
    NOT_EVALUATED = "NOT_EVALUATED"
    NOT_APPLICABLE = "NOT_APPLICABLE"
    NO_CAUSE_OBVIOUS = "NO_CAUSE_OBVIOUS"
    OTHER = "OTHER"


class TypeFireInvestValue(Enum):
    INVESTIGATED_ON_SCENE_RESOURCE = "INVESTIGATED_ON_SCENE_RESOURCE"
    INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR = "INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR"
    INVESTIGATED_BY_OUTSIDE_AGENCY = "INVESTIGATED_BY_OUTSIDE_AGENCY"
    INVESTIGATED_BY_STATE_FIRE_MARSHAL = "INVESTIGATED_BY_STATE_FIRE_MARSHAL"
    INVESTIGATED_BY_INSURANCE = "INVESTIGATED_BY_INSURANCE"
    INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT = "INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT"
    INVESTIGATED_BY_OTHER = "INVESTIGATED_BY_OTHER"


class TypeFullPartialValue(Enum):
    FULL = "FULL"
    PARTIAL = "PARTIAL"
    EXTENT_UNKNOWN = "EXTENT_UNKNOWN"


class TypeGenderValue(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    TRANSGENDER_MALE_FEMALE_TO_MALE = "TRANSGENDER_MALE_FEMALE_TO_MALE"
    TRANSGENDER_FEMALE_MALE_TO_FEMALE = "TRANSGENDER_FEMALE_MALE_TO_FEMALE"
    OTHER_GENDER_IDENTITY = "OTHER_GENDER_IDENTITY"
    UNKNOWN = "UNKNOWN"


class TypeHazardCauseValue(Enum):
    INTENTIONAL = "INTENTIONAL"
    UNINTENTIONAL = "UNINTENTIONAL"
    CONTAINER_CONTAINMENT_FAILURE = "CONTAINER_CONTAINMENT_FAILURE"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    CAUSE_UNDER_INVESTIGATION = "CAUSE_UNDER_INVESTIGATION"


class TypeHazardDispositionValue(Enum):
    COMPLETED_FIRE_SERVICE_ONLY = "COMPLETED_FIRE_SERVICE_ONLY"
    COMPLETED_WITH_FIRE_SERVICE_PRESENT = "COMPLETED_WITH_FIRE_SERVICE_PRESENT"
    RELEASED_TO_LOCAL_AGENCY = "RELEASED_TO_LOCAL_AGENCY"
    RELEASED_TO_COUNTY_AGENCY = "RELEASED_TO_COUNTY_AGENCY"
    RELEASED_TO_STATE_AGENCY = "RELEASED_TO_STATE_AGENCY"
    RELEASED_TO_FEDERAL_AGENCY = "RELEASED_TO_FEDERAL_AGENCY"
    RELEASED_TO_PRIVATE_AGENCY = "RELEASED_TO_PRIVATE_AGENCY"
    RELEASED_TO_PROPERTY_OWNER = "RELEASED_TO_PROPERTY_OWNER"


class TypeHazardDotValue(Enum):
    EXPLOSIVES = "EXPLOSIVES"
    GASES = "GASES"
    FLAMMABLE_LIQUIDS = "FLAMMABLE_LIQUIDS"
    FLAMMABLE_SOLIDS = "FLAMMABLE_SOLIDS"
    OXIDIZERS = "OXIDIZERS"
    POISONS_AND_ETIOLOGIC_MATERIALS = "POISONS_AND_ETIOLOGIC_MATERIALS"
    RADIOACTIVE_MATERIALS = "RADIOACTIVE_MATERIALS"
    CORROSIVES = "CORROSIVES"
    MISCELLANEOUS_DANGEROUS_SUBSTANCES = "MISCELLANEOUS_DANGEROUS_SUBSTANCES"


class TypeHazardPhysicalStateValue(Enum):
    SOLID = "SOLID"
    LIQUID = "LIQUID"
    GAS = "GAS"
    RADIOACTIVE = "RADIOACTIVE"
    UNKNOWN = "UNKNOWN"


class TypeHazardReleasedIntoValue(Enum):
    AIR = "AIR"
    WATER = "WATER"
    GROUND = "GROUND"


class TypeHazardUnitValue(Enum):
    GAS_CUBIC_FOOT = "GAS_CUBIC_FOOT"
    GAS_CUBIC_INCH = "GAS_CUBIC_INCH"
    GAS_CUBIC_CENTIMETER = "GAS_CUBIC_CENTIMETER"
    GAS_CUBIC_METER = "GAS_CUBIC_METER"
    GAS_POUND = "GAS_POUND"
    LIQUID_CUBIC_CENTIMETER = "LIQUID_CUBIC_CENTIMETER"
    LIQUID_CUP = "LIQUID_CUP"
    LIQUID_GALLON = "LIQUID_GALLON"
    LIQUID_GRAM = "LIQUID_GRAM"
    LIQUID_KILOGRAM = "LIQUID_KILOGRAM"
    LIQUID_POUND = "LIQUID_POUND"
    LIQUID_LITER = "LIQUID_LITER"
    LIQUID_MILLIGRAM = "LIQUID_MILLIGRAM"
    LIQUID_MILLILITER = "LIQUID_MILLILITER"
    LIQUID_OUNCE = "LIQUID_OUNCE"
    LIQUID_PINT = "LIQUID_PINT"
    LIQUID_QUART = "LIQUID_QUART"
    LIQUID_TABLESPOON = "LIQUID_TABLESPOON"
    LIQUID_TEASPOON = "LIQUID_TEASPOON"
    SOLID_GRAM = "SOLID_GRAM"
    SOLID_KILOGRAM = "SOLID_KILOGRAM"
    SOLID_POUND = "SOLID_POUND"
    SOLID_LITER = "SOLID_LITER"
    SOLID_MILLIGRAM = "SOLID_MILLIGRAM"
    SOLID_OUNCE = "SOLID_OUNCE"
    SOLID_TABLESPOON = "SOLID_TABLESPOON"
    SOLID_TON = "SOLID_TON"
    SOLID_TEASPOON = "SOLID_TEASPOON"
    RADIOACTIVE_CURIE = "RADIOACTIVE_CURIE"
    RADIOACTIVE_MEGABECQUEREL = "RADIOACTIVE_MEGABECQUEREL"
    RADIOACTIVE_MILLICURIE = "RADIOACTIVE_MILLICURIE"
    RADIOACTIVE_TERABECQUEREL = "RADIOACTIVE_TERABECQUEREL"
    RADIOACTIVE_MICROCURIE = "RADIOACTIVE_MICROCURIE"


class TypeIncidentStatusValue(Enum):
    SUBMITTED = "SUBMITTED"
    REJECTED = "REJECTED"
    APPROVED = "APPROVED"
    PENDING_APPROVAL = "PENDING_APPROVAL"
    FAILED = "FAILED"


class TypeIncidentValue(Enum):
    FIRE__TRANSPORTATION_FIRE__AIRCRAFT_FIRE = "FIRE||TRANSPORTATION_FIRE||AIRCRAFT_FIRE"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_PASSENGER = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_PASSENGER"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_COMMERCIAL = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_COMMERCIAL"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_RV = "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_RV"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_FOOD_TRUCK = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_FOOD_TRUCK"
    )
    FIRE__TRANSPORTATION_FIRE__BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE"
    )
    FIRE__TRANSPORTATION_FIRE__POWERED_MOBILITY_DEVICE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||POWERED_MOBILITY_DEVICE_FIRE"
    )
    FIRE__TRANSPORTATION_FIRE__TRAIN_RAIL_FIRE = "FIRE||TRANSPORTATION_FIRE||TRAIN_RAIL_FIRE"
    HAZSIT__HAZARD_NONCHEM__BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE = (
        "HAZSIT||HAZARD_NONCHEM||BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_HAZARD_SHORT_CIRCUIT = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_HAZARD_SHORT_CIRCUIT"
    )
    HAZSIT__HAZARD_NONCHEM__MOTOR_VEHICLE_COLLISION = (
        "HAZSIT||HAZARD_NONCHEM||MOTOR_VEHICLE_COLLISION"
    )
    HAZSIT__HAZARDOUS_MATERIALS__FUEL_SPILL_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||FUEL_SPILL_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__GAS_LEAK_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||GAS_LEAK_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__CARBON_MONOXIDE_RELEASE = (
        "HAZSIT||HAZARDOUS_MATERIALS||CARBON_MONOXIDE_RELEASE"
    )
    HAZSIT__HAZARDOUS_MATERIALS__BIOLOGICAL_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||BIOLOGICAL_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__RADIOACTIVE_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||RADIOACTIVE_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_TRANSPORT = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_TRANSPORT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_FACILITY = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_FACILITY"
    )
    HAZSIT__OVERPRESSURE__RUPTURE_WITHOUT_FIRE = "HAZSIT||OVERPRESSURE||RUPTURE_WITHOUT_FIRE"
    HAZSIT__OVERPRESSURE__NO_RUPTURE = "HAZSIT||OVERPRESSURE||NO_RUPTURE"
    HAZSIT__INVESTIGATION__ODOR = "HAZSIT||INVESTIGATION||ODOR"
    HAZSIT__INVESTIGATION__SMOKE_INVESTIGATION = "HAZSIT||INVESTIGATION||SMOKE_INVESTIGATION"
    MEDICAL__ILLNESS__ABDOMINAL_PAIN = "MEDICAL||ILLNESS||ABDOMINAL_PAIN"
    MEDICAL__ILLNESS__ALLERGIC_REACTION_STINGS = "MEDICAL||ILLNESS||ALLERGIC_REACTION_STINGS"
    MEDICAL__ILLNESS__BACK_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||BACK_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__BREATHING_PROBLEMS = "MEDICAL||ILLNESS||BREATHING_PROBLEMS"
    MEDICAL__ILLNESS__CARDIAC_ARREST = "MEDICAL||ILLNESS||CARDIAC_ARREST"
    MEDICAL__ILLNESS__CHEST_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||CHEST_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__CONVULSIONS_SEIZURES = "MEDICAL||ILLNESS||CONVULSIONS_SEIZURES"
    MEDICAL__ILLNESS__DIABETIC_PROBLEMS = "MEDICAL||ILLNESS||DIABETIC_PROBLEMS"
    MEDICAL__ILLNESS__HEADACHE = "MEDICAL||ILLNESS||HEADACHE"
    MEDICAL__ILLNESS__HEART_PROBLEMS = "MEDICAL||ILLNESS||HEART_PROBLEMS"
    MEDICAL__ILLNESS__OVERDOSE = "MEDICAL||ILLNESS||OVERDOSE"
    MEDICAL__ILLNESS__PANDEMIC_EPIDEMIC_OUTBREAK = "MEDICAL||ILLNESS||PANDEMIC_EPIDEMIC_OUTBREAK"
    MEDICAL__ILLNESS__PREGNANCY_CHILDBIRTH = "MEDICAL||ILLNESS||PREGNANCY_CHILDBIRTH"
    MEDICAL__ILLNESS__PSYCHOLOGICAL_BEHAVIOR_ISSUES = (
        "MEDICAL||ILLNESS||PSYCHOLOGICAL_BEHAVIOR_ISSUES"
    )
    MEDICAL__ILLNESS__SICK_CASE = "MEDICAL||ILLNESS||SICK_CASE"
    MEDICAL__ILLNESS__STROKE_CVA = "MEDICAL||ILLNESS||STROKE_CVA"
    MEDICAL__ILLNESS__UNCONSCIOUS_VICTIM = "MEDICAL||ILLNESS||UNCONSCIOUS_VICTIM"
    MEDICAL__ILLNESS__WELL_PERSON_CHECK = "MEDICAL||ILLNESS||WELL_PERSON_CHECK"
    MEDICAL__ILLNESS__ALTERED_MENTAL_STATUS = "MEDICAL||ILLNESS||ALTERED_MENTAL_STATUS"
    MEDICAL__ILLNESS__NAUSEA_VOMITING = "MEDICAL||ILLNESS||NAUSEA_VOMITING"
    MEDICAL__ILLNESS__UNKNOWN_PROBLEM = "MEDICAL||ILLNESS||UNKNOWN_PROBLEM"
    MEDICAL__ILLNESS__NO_APPROPRIATE_CHOICE = "MEDICAL||ILLNESS||NO_APPROPRIATE_CHOICE"
    MEDICAL__INJURY__ANIMAL_BITES = "MEDICAL||INJURY||ANIMAL_BITES"
    MEDICAL__INJURY__ASSAULT = "MEDICAL||INJURY||ASSAULT"
    MEDICAL__INJURY__BURNS_EXPLOSION = "MEDICAL||INJURY||BURNS_EXPLOSION"
    MEDICAL__INJURY__CARBON_MONOXIDE_OTHER_INHALATION_INJURY = (
        "MEDICAL||INJURY||CARBON_MONOXIDE_OTHER_INHALATION_INJURY"
    )
    MEDICAL__INJURY__CHOKING = "MEDICAL||INJURY||CHOKING"
    MEDICAL__INJURY__DROWNING_DIVING_SCUBA_ACCIDENT = (
        "MEDICAL||INJURY||DROWNING_DIVING_SCUBA_ACCIDENT"
    )
    MEDICAL__INJURY__ELECTROCUTION = "MEDICAL||INJURY||ELECTROCUTION"
    MEDICAL__INJURY__EYE_TRAUMA = "MEDICAL||INJURY||EYE_TRAUMA"
    MEDICAL__INJURY__FALL = "MEDICAL||INJURY||FALL"
    MEDICAL__INJURY__HEAT_COLD_EXPOSURE = "MEDICAL||INJURY||HEAT_COLD_EXPOSURE"
    MEDICAL__INJURY__MOTOR_VEHICLE_COLLISION = "MEDICAL||INJURY||MOTOR_VEHICLE_COLLISION"
    MEDICAL__INJURY__INDUSTRIAL_INACCESSIBLE_ENTRAPMENT = (
        "MEDICAL||INJURY||INDUSTRIAL_INACCESSIBLE_ENTRAPMENT"
    )
    MEDICAL__INJURY__POISONING = "MEDICAL||INJURY||POISONING"
    MEDICAL__INJURY__GUNSHOT_WOUND = "MEDICAL||INJURY||GUNSHOT_WOUND"
    MEDICAL__INJURY__HEMORRHAGE_LACERATION = "MEDICAL||INJURY||HEMORRHAGE_LACERATION"
    MEDICAL__INJURY__STAB_PENETRATING_TRAUMA = "MEDICAL||INJURY||STAB_PENETRATING_TRAUMA"
    MEDICAL__INJURY__OTHER_TRAUMATIC_INJURY = "MEDICAL||INJURY||OTHER_TRAUMATIC_INJURY"
    MEDICAL__OTHER__HEALTHCARE_PROFESSIONAL_ADMISSION = (
        "MEDICAL||OTHER||HEALTHCARE_PROFESSIONAL_ADMISSION"
    )
    RESCUE__STRUCTURE__BUILDING_STRUCTURE_COLLAPSE = (
        "RESCUE||STRUCTURE||BUILDING_STRUCTURE_COLLAPSE"
    )
    RESCUE__STRUCTURE__CONFINED_SPACE_RESCUE = "RESCUE||STRUCTURE||CONFINED_SPACE_RESCUE"
    RESCUE__STRUCTURE__ELEVATOR_ESCALATOR_RESCUE = "RESCUE||STRUCTURE||ELEVATOR_ESCALATOR_RESCUE"
    RESCUE__STRUCTURE__EXTRICATION_ENTRAPPED = "RESCUE||STRUCTURE||EXTRICATION_ENTRAPPED"
    RESCUE__TRANSPORTATION__MOTOR_VEHICLE_EXTRICATION_ENTRAPPED = (
        "RESCUE||TRANSPORTATION||MOTOR_VEHICLE_EXTRICATION_ENTRAPPED"
    )
    RESCUE__TRANSPORTATION__TRAIN_RAIL_COLLISION_DERAILMENT = (
        "RESCUE||TRANSPORTATION||TRAIN_RAIL_COLLISION_DERAILMENT"
    )
    RESCUE__TRANSPORTATION__AVIATION_COLLISION_CRASH = (
        "RESCUE||TRANSPORTATION||AVIATION_COLLISION_CRASH"
    )
    RESCUE__TRANSPORTATION__AVIATION_STANDBY = "RESCUE||TRANSPORTATION||AVIATION_STANDBY"
    FIRE__OUTSIDE_FIRE__CONSTRUCTION_WASTE = "FIRE||OUTSIDE_FIRE||CONSTRUCTION_WASTE"
    FIRE__OUTSIDE_FIRE__OTHER_OUTSIDE_FIRE = "FIRE||OUTSIDE_FIRE||OTHER_OUTSIDE_FIRE"
    FIRE__OUTSIDE_FIRE__OUTSIDE_TANK_FIRE = "FIRE||OUTSIDE_FIRE||OUTSIDE_TANK_FIRE"
    FIRE__OUTSIDE_FIRE__TRASH_RUBBISH_FIRE = "FIRE||OUTSIDE_FIRE||TRASH_RUBBISH_FIRE"
    FIRE__OUTSIDE_FIRE__VEGETATION_GRASS_FIRE = "FIRE||OUTSIDE_FIRE||VEGETATION_GRASS_FIRE"
    FIRE__OUTSIDE_FIRE__WILDFIRE_WILDLAND = "FIRE||OUTSIDE_FIRE||WILDFIRE_WILDLAND"
    FIRE__OUTSIDE_FIRE__WILDFIRE_URBAN_INTERFACE = "FIRE||OUTSIDE_FIRE||WILDFIRE_URBAN_INTERFACE"
    FIRE__OUTSIDE_FIRE__UTILITY_INFRASTRUCTURE_FIRE = (
        "FIRE||OUTSIDE_FIRE||UTILITY_INFRASTRUCTURE_FIRE"
    )
    FIRE__OUTSIDE_FIRE__DUMPSTER_OUTDOOR_CONTAINER_FIRE = (
        "FIRE||OUTSIDE_FIRE||DUMPSTER_OUTDOOR_CONTAINER_FIRE"
    )
    FIRE__SPECIAL_FIRE__ESS_FIRE = "FIRE||SPECIAL_FIRE||ESS_FIRE"
    FIRE__SPECIAL_FIRE__EXPLOSION = "FIRE||SPECIAL_FIRE||EXPLOSION"
    FIRE__SPECIAL_FIRE__INFRASTRUCTURE_FIRE = "FIRE||SPECIAL_FIRE||INFRASTRUCTURE_FIRE"
    FIRE__STRUCTURE_FIRE__STRUCTURAL_INVOLVEMENT_FIRE = (
        "FIRE||STRUCTURE_FIRE||STRUCTURAL_INVOLVEMENT_FIRE"
    )
    FIRE__STRUCTURE_FIRE__ROOM_AND_CONTENTS_FIRE = "FIRE||STRUCTURE_FIRE||ROOM_AND_CONTENTS_FIRE"
    FIRE__STRUCTURE_FIRE__CONFINED_COOKING_APPLIANCE_FIRE = (
        "FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE"
    )
    FIRE__STRUCTURE_FIRE__CHIMNEY_FIRE = "FIRE||STRUCTURE_FIRE||CHIMNEY_FIRE"
    NOEMERG__GOOD_INTENT__NO_INCIDENT_FOUND_LOCATION_ERROR = (
        "NOEMERG||GOOD_INTENT||NO_INCIDENT_FOUND_LOCATION_ERROR"
    )
    NOEMERG__GOOD_INTENT__CONTROLLED_BURNING_AUTHORIZED = (
        "NOEMERG||GOOD_INTENT||CONTROLLED_BURNING_AUTHORIZED"
    )
    NOEMERG__GOOD_INTENT__SMOKE_FROM_NONHOSTILE_SOURCE = (
        "NOEMERG||GOOD_INTENT||SMOKE_FROM_NONHOSTILE_SOURCE"
    )
    NOEMERG__GOOD_INTENT__INVESTIGATE_HAZARDOUS_RELEASE = (
        "NOEMERG||GOOD_INTENT||INVESTIGATE_HAZARDOUS_RELEASE"
    )
    LAWENFORCE = "LAWENFORCE"
    MEDICAL__OTHER__MEDICAL_ALARM = "MEDICAL||OTHER||MEDICAL_ALARM"
    MEDICAL__OTHER__STANDBY_REQUEST = "MEDICAL||OTHER||STANDBY_REQUEST"
    MEDICAL__OTHER__TRANSFER_INTERFACILITY = "MEDICAL||OTHER||TRANSFER_INTERFACILITY"
    MEDICAL__OTHER__AIRMEDICAL_TRANSPORT = "MEDICAL||OTHER||AIRMEDICAL_TRANSPORT"
    MEDICAL__OTHER__INTERCEPT_OTHER_UNIT = "MEDICAL||OTHER||INTERCEPT_OTHER_UNIT"
    MEDICAL__OTHER__COMMUNITY_PUBLIC_HEALTH = "MEDICAL||OTHER||COMMUNITY_PUBLIC_HEALTH"
    PUBSERV__CITIZEN_ASSIST__LOST_PERSON = "PUBSERV||CITIZEN_ASSIST||LOST_PERSON"
    PUBSERV__CITIZEN_ASSIST__PERSON_IN_DISTRESS = "PUBSERV||CITIZEN_ASSIST||PERSON_IN_DISTRESS"
    PUBSERV__CITIZEN_ASSIST__CITIZEN_ASSIST_SERVICE_CALL = (
        "PUBSERV||CITIZEN_ASSIST||CITIZEN_ASSIST_SERVICE_CALL"
    )
    PUBSERV__CITIZEN_ASSIST__LIFT_ASSIST = "PUBSERV||CITIZEN_ASSIST||LIFT_ASSIST"
    PUBSERV__ALARMS_NONMED__FIRE_ALARM = "PUBSERV||ALARMS_NONMED||FIRE_ALARM"
    PUBSERV__ALARMS_NONMED__GAS_ALARM = "PUBSERV||ALARMS_NONMED||GAS_ALARM"
    PUBSERV__ALARMS_NONMED__CO_ALARM = "PUBSERV||ALARMS_NONMED||CO_ALARM"
    PUBSERV__ALARMS_NONMED__OTHER_ALARM = "PUBSERV||ALARMS_NONMED||OTHER_ALARM"
    PUBSERV__DISASTER_WEATHER__DAMAGE_ASSESSMENT = "PUBSERV||DISASTER_WEATHER||DAMAGE_ASSESSMENT"
    PUBSERV__DISASTER_WEATHER__WEATHER_RESPONSE = "PUBSERV||DISASTER_WEATHER||WEATHER_RESPONSE"
    PUBSERV__OTHER__MOVE_UP = "PUBSERV||OTHER||MOVE_UP"
    PUBSERV__OTHER__STANDBY = "PUBSERV||OTHER||STANDBY"
    PUBSERV__OTHER__DAMAGED_HYDRANT = "PUBSERV||OTHER||DAMAGED_HYDRANT"
    RESCUE__OUTSIDE__BACKOUNTRY_RESCUE = "RESCUE||OUTSIDE||BACKOUNTRY_RESCUE"
    RESCUE__OUTSIDE__CONFINED_SPACE_RESCUE = "RESCUE||OUTSIDE||CONFINED_SPACE_RESCUE"
    RESCUE__OUTSIDE__TRENCH = "RESCUE||OUTSIDE||TRENCH"
    RESCUE__OUTSIDE__EXTRICATION_ENTRAPPED = "RESCUE||OUTSIDE||EXTRICATION_ENTRAPPED"
    RESCUE__OUTSIDE__HIGH_ANGLE_RESCUE = "RESCUE||OUTSIDE||HIGH_ANGLE_RESCUE"
    RESCUE__OUTSIDE__LOW_ANGLE_RESCUE = "RESCUE||OUTSIDE||LOW_ANGLE_RESCUE"
    RESCUE__OUTSIDE__STEEP_ANGLE_RESCUE = "RESCUE||OUTSIDE||STEEP_ANGLE_RESCUE"
    RESCUE__OUTSIDE__LIMITED_NO_ACCESS = "RESCUE||OUTSIDE||LIMITED_NO_ACCESS"
    RESCUE__WATER__PERSON_IN_WATER_STANDING = "RESCUE||WATER||PERSON_IN_WATER_STANDING"
    RESCUE__WATER__PERSON_IN_WATER_SWIFTWATER = "RESCUE||WATER||PERSON_IN_WATER_SWIFTWATER"
    RESCUE__WATER__WATERCRAFT_IN_DISTRESS = "RESCUE||WATER||WATERCRAFT_IN_DISTRESS"
    NOEMERG__FALSE_ALARM__INTENTIONAL_FALSE_ALARM = "NOEMERG||FALSE_ALARM||INTENTIONAL_FALSE_ALARM"
    NOEMERG__FALSE_ALARM__MALFUNCTIONING_ALARM = "NOEMERG||FALSE_ALARM||MALFUNCTIONING_ALARM"
    NOEMERG__FALSE_ALARM__ACCIDENTAL_ALARM = "NOEMERG||FALSE_ALARM||ACCIDENTAL_ALARM"
    NOEMERG__FALSE_ALARM__OTHER_FALSE_CALL = "NOEMERG||FALSE_ALARM||OTHER_FALSE_CALL"
    NOEMERG__FALSE_ALARM__BOMB_SCARE = "NOEMERG||FALSE_ALARM||BOMB_SCARE"
    NOEMERG__CANCELLED = "NOEMERG||CANCELLED"


class TypeJobClassificationValue(Enum):
    CAREER = "CAREER"
    PART_TIME = "PART_TIME"
    PAID_ON_CALL = "PAID_ON_CALL"
    INDUSTRIAL = "INDUSTRIAL"
    VOLUNTEER = "VOLUNTEER"
    WILDLAND_FULL_TIME = "WILDLAND_FULL_TIME"
    WILDLAND_PART_TIME = "WILDLAND_PART_TIME"
    WILDLAND_CONTRACT = "WILDLAND_CONTRACT"


class TypeLocCspCountryValue(Enum):
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class TypeLocPlaceValue(Enum):
    AIRCRAFT = "AIRCRAFT"
    AIRPORT = "AIRPORT"
    ARENA = "ARENA"
    AUTOMOBILE = "AUTOMOBILE"
    BANK = "BANK"
    BAR = "BAR"
    BUS = "BUS"
    BICYCLE = "BICYCLE"
    BUS_STATION = "BUS_STATION"
    CAFE = "CAFE"
    CLASSROOM = "CLASSROOM"
    CLUB = "CLUB"
    CONSTRUCTION = "CONSTRUCTION"
    CONVENTION_CENTER = "CONVENTION_CENTER"
    GOVERNMENT = "GOVERNMENT"
    HOSPITAL = "HOSPITAL"
    HOTEL = "HOTEL"
    INDUSTRIAL = "INDUSTRIAL"
    LIBRARY = "LIBRARY"
    MOTORCYCLE = "MOTORCYCLE"
    MUSEUM = "MUSEUM"
    OFFICE = "OFFICE"
    OTHER = "OTHER"
    OUTDOORS = "OUTDOORS"
    PARKING = "PARKING"
    PLACE_OF_WORSHIP = "PLACE_OF_WORSHIP"
    PRISON = "PRISON"
    PUBLIC = "PUBLIC"
    PUBLIC_TRANSPORT = "PUBLIC_TRANSPORT"
    RESIDENCE = "RESIDENCE"
    RESTAURANT = "RESTAURANT"
    SCHOOL = "SCHOOL"
    SHOPPING_AREA = "SHOPPING_AREA"
    STADIUM = "STADIUM"
    STORE = "STORE"
    STREET = "STREET"
    THEATER = "THEATER"
    TRAIN = "TRAIN"
    TRAIN_STATION = "TRAIN_STATION"
    TRUCK = "TRUCK"
    UNDERWAY = "UNDERWAY"
    UNKNOWN = "UNKNOWN"
    WAREHOUSE = "WAREHOUSE"
    WATER = "WATER"
    WATERCRAFT = "WATERCRAFT"


class TypeLocSnDirectionValue(Enum):
    NORTHBOUND = "NORTHBOUND"
    SOUTHBOUND = "SOUTHBOUND"
    EASTBOUND = "EASTBOUND"
    WESTBOUND = "WESTBOUND"


class TypeLocSnPrePostValue(Enum):
    CONNECTOR = "CONNECTOR"
    CORNER = "CORNER"
    CORNERS = "CORNERS"
    CORRIDOR = "CORRIDOR"
    CORSO = "CORSO"
    CORTE = "CORTE"
    COUNTY_FOREST_ROAD = "COUNTY FOREST ROAD"
    COUNTY_HIGHWAY = "COUNTY HIGHWAY"
    COUNTY_ROAD = "COUNTY ROAD"
    COUNTY_ROUTE = "COUNTY ROUTE"
    COUNTY_STATE_AID_HIGHWAY = "COUNTY STATE AID HIGHWAY"
    COURS = "COURS"
    COURSE = "COURSE"
    COURT = "COURT"
    COURTS = "COURTS"
    COVE = "COVE"
    COVES = "COVES"
    CREEK = "CREEK"
    CRESCENT = "CRESCENT"
    CREST = "CREST"
    CROSS = "CROSS"
    CROSSING = "CROSSING"
    CROSSINGS = "CROSSINGS"
    CROSSOVER = "CROSSOVER"
    CROSSROAD = "CROSSROAD"
    CROSSROADS = "CROSSROADS"
    CROSSWAY = "CROSSWAY"
    CURVE = "CURVE"
    CUSTER_COUNTY_ROAD = "CUSTER COUNTY ROAD"
    CUTOFF = "CUTOFF"
    CUTTING = "CUTTING"
    DALE = "DALE"
    DAM = "DAM"
    DAWSON_COUNTY_ROAD = "DAWSON COUNTY ROAD"
    DELL = "DELL"
    DIVIDE = "DIVIDE"
    DOCK = "DOCK"
    DOWN = "DOWN"
    DOWNS = "DOWNS"
    DRAW = "DRAW"
    DRIFT = "DRIFT"
    DRIVE = "DRIVE"
    DRIVES = "DRIVES"
    DRIVEWAY = "DRIVEWAY"
    DUGWAY = "DUGWAY"
    ECHO = "ECHO"
    EDGE = "EDGE"
    END = "END"
    ENTRANCE = "ENTRANCE"
    ENTRY = "ENTRY"
    ESPLANADE = "ESPLANADE"
    ESTATE = "ESTATE"
    ESTATES = "ESTATES"
    EXCHANGE = "EXCHANGE"
    EXIT = "EXIT"
    EXPRESSWAY = "EXPRESSWAY"
    EXTENSION = "EXTENSION"
    EXTENSIONS = "EXTENSIONS"
    FALL = "FALL"
    FALLS = "FALLS"
    FARE = "FARE"
    FARM = "FARM"
    FARM_TO_MARKET = "FARM TO MARKET"
    FEDERAL_AID_SECONDARY_HIGHWAY = "FEDERAL-AID SECONDARY HIGHWAY"
    FERRY = "FERRY"
    FIELD = "FIELD"
    FIELDS = "FIELDS"
    FLAT = "FLAT"
    FLATS = "FLATS"
    FLOWAGE = "FLOWAGE"
    FLYWAY = "FLYWAY"
    FORD = "FORD"
    FORDS = "FORDS"
    FOREST = "FOREST"
    FOREST_ROAD = "FOREST ROAD"
    FOREST_HIGHWAY = "FOREST HIGHWAY"
    FORGE = "FORGE"
    FORGES = "FORGES"
    FORK = "FORK"
    FORKS = "FORKS"
    FORT = "FORT"
    FREEWAY = "FREEWAY"
    FRONT = "FRONT"
    FRONTAGE_ROAD = "FRONTAGE ROAD"
    GABLES = "GABLES"
    GARDEN = "GARDEN"
    GARDENS = "GARDENS"
    GARTH = "GARTH"
    GATE = "GATE"
    GATES = "GATES"
    GATEWAY = "GATEWAY"
    GLADE = "GLADE"
    GLEN = "GLEN"
    GLENS = "GLENS"
    GORGE = "GORGE"
    GRADE = "GRADE"
    GREEN = "GREEN"
    GREENS = "GREENS"
    GREENWAY = "GREENWAY"
    GROVE = "GROVE"
    GROVES = "GROVES"
    HARBOR = "HARBOR"
    HARBORS = "HARBORS"
    HARBOUR = "HARBOUR"
    HAUL_ROAD = "HAUL ROAD"
    HAVEN = "HAVEN"
    HEATH = "HEATH"
    HEIGHTS = "HEIGHTS"
    HIDEAWAY = "HIDEAWAY"
    HIGHWAY = "HIGHWAY"
    HILL = "HILL"
    HILLS = "HILLS"
    HOLLOW = "HOLLOW"
    HORN = "HORN"
    HORSESHOE = "HORSESHOE"
    INDIAN_SERVICE_ROAD = "INDIAN SERVICE ROAD"
    INLET = "INLET"
    INTERSTATE = "INTERSTATE"
    INTERVAL = "INTERVAL"
    ISLAND = "ISLAND"
    ISLANDS = "ISLANDS"
    ISLE = "ISLE"
    ISLES = "ISLES"
    J_TURN = "J-TURN"
    JUNCTION = "JUNCTION"
    JUNCTIONS = "JUNCTIONS"
    KEEP = "KEEP"
    KEY = "KEY"
    KEYS = "KEYS"
    KNOLL = "KNOLL"
    KNOLLS = "KNOLLS"
    LAIR = "LAIR"
    LAKE = "LAKE"
    LAKES = "LAKES"
    LAND = "LAND"
    LANDING = "LANDING"
    LANE = "LANE"
    LANE_CIRCLE = "LANE CIRCLE"
    LANE_COURT = "LANE COURT"
    LANE_ROAD = "LANE ROAD"
    LATERAL = "LATERAL"
    LEDGE = "LEDGE"
    LIGHT = "LIGHT"
    LIGHTS = "LIGHTS"
    LINE = "LINE"
    LOAF = "LOAF"
    LOCK = "LOCK"
    LOCKS = "LOCKS"
    LODGE = "LODGE"
    LOOKOUT = "LOOKOUT"
    LOOP = "LOOP"
    LOOP_ROAD = "LOOP ROAD"
    LUGAR = "LUGAR"
    MALL = "MALL"
    MANOR = "MANOR"
    MANORS = "MANORS"
    MARKET = "MARKET"
    MEADOW = "MEADOW"
    MEADOWS = "MEADOWS"
    MEWS = "MEWS"
    MILL = "MILL"
    MILLS = "MILLS"
    MISSION = "MISSION"
    PUBLIC_ACCESS = "PUBLIC ACCESS"
    QUARTER = "QUARTER"
    RADIAL = "RADIAL"
    RANCH = "RANCH"
    RANCHO = "RANCHO"
    RAPID = "RAPID"
    RAPIDS = "RAPIDS"
    REACH = "REACH"
    RECREATIONAL_ROAD = "RECREATIONAL ROAD"
    REST = "REST"
    RETREAT = "RETREAT"
    RIDGE = "RIDGE"
    RIDGES = "RIDGES"
    RISE = "RISE"
    RIVER = "RIVER"
    RIVER_ROAD = "RIVER ROAD"
    ROAD = "ROAD"
    ROADS = "ROADS"
    ROUND = "ROUND"
    ROUTE = "ROUTE"
    ROW = "ROW"
    RUE = "RUE"
    RUN = "RUN"
    RUNNE = "RUNNE"
    RUNWAY = "RUNWAY"
    SHOAL = "SHOAL"
    SHOALS = "SHOALS"
    SHORE = "SHORE"
    SHORES = "SHORES"
    SIDEROAD = "SIDEROAD"
    SKIES = "SKIES"
    SKYWAY = "SKYWAY"
    SLIP = "SLIP"
    SPRING = "SPRING"
    SPRINGS = "SPRINGS"
    SPUR = "SPUR"
    SPURS = "SPURS"
    SQUARE = "SQUARE"
    SQUARES = "SQUARES"
    STATE_HIGHWAY = "STATE HIGHWAY"
    STATE_PARK_ROAD = "STATE PARK ROAD"
    STATE_PARKWAY = "STATE PARKWAY"
    STATE_ROAD = "STATE ROAD"
    STATE_ROUTE = "STATE ROUTE"
    STATE_SECONDARY = "STATE SECONDARY"
    ABBEY = "ABBEY"
    ACCESS = "ACCESS"
    ACCESS_ROAD = "ACCESS ROAD"
    ACRES = "ACRES"
    AIRPORT = "AIRPORT"
    ALCOVE = "ALCOVE"
    ALLE = "ALLE"
    ALLEY = "ALLEY"
    ANNEX = "ANNEX"
    APPROACH = "APPROACH"
    ARC = "ARC"
    ARCADE = "ARCADE"
    ARCH = "ARCH"
    AVENIDA = "AVENIDA"
    AVENUE = "AVENUE"
    AVENUE_CIRCLE = "AVENUE CIRCLE"
    AVENUE_COURT = "AVENUE COURT"
    AVENUE_LOOP = "AVENUE LOOP"
    AVENUE_PATH = "AVENUE PATH"
    AVENUE_PLACE = "AVENUE PLACE"
    AVENUE_WAY = "AVENUE WAY"
    BANK = "BANK"
    BAY = "BAY"
    BAYOU = "BAYOU"
    BAYWAY = "BAYWAY"
    BEACH = "BEACH"
    BEND = "BEND"
    BLUFF = "BLUFF"
    BLUFFS = "BLUFFS"
    BOTTOM = "BOTTOM"
    BOARDWALK = "BOARDWALK"
    BOULEVARD = "BOULEVARD"
    BRANCH = "BRANCH"
    BRIDGE = "BRIDGE"
    BROOK = "BROOK"
    BROOKS = "BROOKS"
    BUREAU_OF_INDIAN_AFFAIRS_ROUTE = "BUREAU OF INDIAN AFFAIRS ROUTE"
    BURG = "BURG"
    BURGS = "BURGS"
    BYPASS = "BYPASS"
    CALLE = "CALLE"
    CALLEJON = "CALLEJON"
    CAMINO = "CAMINO"
    CAMP = "CAMP"
    CANYON = "CANYON"
    CAPE = "CAPE"
    CARTWAY = "CARTWAY"
    CAUSEWAY = "CAUSEWAY"
    CENTER = "CENTER"
    CENTRE = "CENTRE"
    CENTERS = "CENTERS"
    CHANNEL = "CHANNEL"
    CHASE = "CHASE"
    CHEMIN = "CHEMIN"
    CIRCLE = "CIRCLE"
    CIRCLES = "CIRCLES"
    CIRCUS = "CIRCUS"
    CLIFF = "CLIFF"
    CLIFFS = "CLIFFS"
    CLOSE = "CLOSE"
    CLUB = "CLUB"
    CLUSTER = "CLUSTER"
    COAST_HIGHWAY = "COAST HIGHWAY"
    COMMON = "COMMON"
    COMMONS = "COMMONS"
    CONCESSION_ROAD = "CONCESSION ROAD"
    CONCOURSE = "CONCOURSE"
    CONNECT = "CONNECT"
    RAMP = "RAMP"
    UNITED_STATES_HIGHWAY = "UNITED STATES HIGHWAY"
    UNION = "UNION"
    UNIONS = "UNIONS"
    UUNYE = "UUNYE"
    VALLEY = "VALLEY"
    VALLEYS = "VALLEYS"
    VIA = "VIA"
    VIADUCT = "VIADUCT"
    VIEW = "VIEW"
    VIEWS = "VIEWS"
    VILLA = "VILLA"
    VILLAGE = "VILLAGE"
    VILLAGES = "VILLAGES"
    VILLE = "VILLE"
    VISTA = "VISTA"
    VOG = "VOG"
    WADDY = "WADDY"
    WALK = "WALK"
    WALKS = "WALKS"
    WALL = "WALL"
    WAY = "WAY"
    WAYS = "WAYS"
    WEEG = "WEEG"
    WELL = "WELL"
    WELLS = "WELLS"
    WOODS = "WOODS"
    WYE = "WYE"
    WYND = "WYND"
    MONTANA_HIGHWAY = "MONTANA HIGHWAY"
    MOTORWAY = "MOTORWAY"
    MOUNT = "MOUNT"
    MOUNTAIN = "MOUNTAIN"
    MOUNTAINS = "MOUNTAINS"
    NARROWS = "NARROWS"
    NATIONAL_FOREST_DEVELOPMENT_ROAD = "NATIONAL FOREST DEVELOPMENT ROAD"
    NECK = "NECK"
    NOOK = "NOOK"
    NORTH_CAROLINA_HIGHWAY = "NORTH CAROLINA HIGHWAY"
    OAKS = "OAKS"
    OLD_COUNTY_ROAD = "OLD COUNTY ROAD"
    ORCHARD = "ORCHARD"
    OVAL = "OVAL"
    OVERLOOK = "OVERLOOK"
    OVERPASS = "OVERPASS"
    OVI = "OVI"
    PARK = "PARK"
    PARKE = "PARKE"
    PARKS = "PARKS"
    PARKWAY = "PARKWAY"
    PARKWAYS = "PARKWAYS"
    PASEO = "PASEO"
    PASS = "PASS"
    PASSAGE = "PASSAGE"
    PATH = "PATH"
    PATHWAY = "PATHWAY"
    PIKE = "PIKE"
    PINE = "PINE"
    PINES = "PINES"
    PIAZZA = "PIAZZA"
    PLACE = "PLACE"
    PLACITA = "PLACITA"
    PLAIN = "PLAIN"
    PLAINS = "PLAINS"
    PLATZ = "PLATZ"
    PLAZA = "PLAZA"
    POINT = "POINT"
    POINTE = "POINTE"
    POINTS = "POINTS"
    PORT = "PORT"
    PORTS = "PORTS"
    PRAIRIE = "PRAIRIE"
    PRIVATE_ROAD = "PRIVATE ROAD"
    PROMENADE = "PROMENADE"
    QUAY = "QUAY"
    STATE_SPUR = "STATE SPUR"
    STATION = "STATION"
    STRAND = "STRAND"
    STRASSE = "STRASSE"
    STRAVENUE = "STRAVENUE"
    STREAM = "STREAM"
    STREET = "STREET"
    STREETS = "STREETS"
    STREET_COURT = "STREET COURT"
    STREET_LOOP = "STREET LOOP"
    STREET_PATH = "STREET PATH"
    STREET_PLACE = "STREET PLACE"
    STREET_WAY = "STREET WAY"
    STREET_CIRCLE = "STREET CIRCLE"
    STRIP = "STRIP"
    SUMMIT = "SUMMIT"
    TAXIWAY = "TAXIWAY"
    TERMINAL = "TERMINAL"
    TERN = "TERN"
    TERRACE = "TERRACE"
    THROUGHWAY = "THROUGHWAY"
    THRUWAY = "THRUWAY"
    TIMBER_ROAD = "TIMBER ROAD"
    TOWNLINE = "TOWNLINE"
    TOWN_ROAD = "TOWN ROAD"
    TOWNSHIP_ROAD = "TOWNSHIP ROAD"
    TRACE = "TRACE"
    TRACK = "TRACK"
    TRAFFICWAY = "TRAFFICWAY"
    TRAIL = "TRAIL"
    TRAILER = "TRAILER"
    TRIANGLE = "TRIANGLE"
    TRUCK_TRAIL = "TRUCK TRAIL"
    TUNNEL = "TUNNEL"
    TURN = "TURN"
    TURNPIKE = "TURNPIKE"
    UNITED_STATES_FOREST_SERVICE_ROAD = "UNITED STATES FOREST SERVICE ROAD"
    UNDERPASS = "UNDERPASS"


class TypeLocSnPreSepValue(Enum):
    OF_THE = "OF_THE"
    AT = "AT"
    DE = "DE"
    DE_LA = "DE_LA"
    DEL = "DEL"
    DE_LAS = "DE_LAS"
    DES = "DES"
    IN_THE = "IN_THE"
    TO_THE = "TO_THE"
    OF = "OF"
    ON_THE = "ON_THE"
    TO = "TO"


class TypeLocationCrossStreetValue(Enum):
    CLOSEST = "CLOSEST"
    SECOND_CLOSEST = "SECOND_CLOSEST"


class TypeLocationUseValue(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__AUCTION_FEEDLOT = "AGRICULTURE_STRUCT||AUCTION_FEEDLOT"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"
    INDUSTRIAL__COLD_STORAGE = "INDUSTRIAL||COLD_STORAGE"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    HEALTH_CARE__ALCOHOL_DRUG_REHABILITATION_CENTER = (
        "HEALTH_CARE||ALCOHOL_DRUG_REHABILITATION_CENTER"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATERFRONT = "OUTDOOR||WATERFRONT"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__OUTDOOR_ARENA_AMPHITHEATER_PARK = "ASSEMBLY||OUTDOOR_ARENA_AMPHITHEATER_PARK"
    ASSEMBLY__TEMP_OUTDOOR_STRUCT_EVENT = "ASSEMBLY||TEMP_OUTDOOR_STRUCT_EVENT"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"


class TypeMedicalPatientCareValue(Enum):
    PATIENT_EVALUATED_CARE_PROVIDED = "PATIENT_EVALUATED_CARE_PROVIDED"
    PATIENT_EVALUATED_REFUSED_CARE = "PATIENT_EVALUATED_REFUSED_CARE"
    PATIENT_EVALUATED_NO_CARE_REQUIRED = "PATIENT_EVALUATED_NO_CARE_REQUIRED"
    PATIENT_REFUSED_EVALUATION_CARE = "PATIENT_REFUSED_EVALUATION_CARE"
    PATIENT_SUPPORT_SERVICES_PROVIDED = "PATIENT_SUPPORT_SERVICES_PROVIDED"
    PATIENT_DEAD_ON_ARRIVAL = "PATIENT_DEAD_ON_ARRIVAL"


class TypeMedicalPatientStatusValue(Enum):
    IMPROVED = "IMPROVED"
    UNCHANGED = "UNCHANGED"
    WORSE = "WORSE"


class TypeMedicalTransportValue(Enum):
    TRANSPORT_BY_EMS_UNIT = "TRANSPORT_BY_EMS_UNIT"
    OTHER_AGENCY_TRANSPORT = "OTHER_AGENCY_TRANSPORT"
    PATIENT_REFUSED_TRANSPORT = "PATIENT_REFUSED_TRANSPORT"
    NONPATIENT_TRANSPORT = "NONPATIENT_TRANSPORT"
    NO_TRANSPORT = "NO_TRANSPORT"


class TypeNoactionValue(Enum):
    CANCELLED = "CANCELLED"
    STAGED_STANDBY = "STAGED_STANDBY"
    NO_INCIDENT_FOUND = "NO_INCIDENT_FOUND"


class TypeOccupantResponseValue(Enum):
    EVACUATED = "EVACUATED"
    IGNORED_ALARM = "IGNORED_ALARM"
    UNABLE_TO_RESPOND = "UNABLE_TO_RESPOND"
    ATTEMPTED_TO_EXTINGUISH = "ATTEMPTED_TO_EXTINGUISH"
    ATTEMPTED_TO_RESCUE_OCCUPANTS = "ATTEMPTED_TO_RESCUE_OCCUPANTS"
    ATTEMPTED_TO_RESCUE_ANIMALS = "ATTEMPTED_TO_RESCUE_ANIMALS"
    UNKNOWN = "UNKNOWN"


class TypePopSourceValue(Enum):
    DEPARTMENT_ENTERED = "DEPARTMENT_ENTERED"
    CENSUS_DERIVED = "CENSUS_DERIVED"


class TypePsapCapaValue(Enum):
    LEGACY = "LEGACY"
    NG911 = "NG911"


class TypePsapDiscValue(Enum):
    SINGLE = "SINGLE"
    MULTIPLE = "MULTIPLE"


class TypePsapJurisValue(Enum):
    SINGLE = "SINGLE"
    MULTIPLE = "MULTIPLE"


class TypePsapValue(Enum):
    PRIMARY = "PRIMARY"
    SECONDARY = "SECONDARY"


class TypeRaceValue(Enum):
    AMERICAN_INDIAN_ALASKA_NATIVE = "AMERICAN_INDIAN_ALASKA_NATIVE"
    ASIAN = "ASIAN"
    BLACK_AFRICAN_AMERICAN = "BLACK_AFRICAN_AMERICAN"
    MIDDLE_EASTERN_NORTH_AFRICAN = "MIDDLE_EASTERN_NORTH_AFRICAN"
    HISPANIC_LATINO = "HISPANIC_LATINO"
    NATIVE_HAWAIIAN_PACIFIC_ISLANDER = "NATIVE_HAWAIIAN_PACIFIC_ISLANDER"
    WHITE = "WHITE"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class TypeRegionValue(Enum):
    JURISDICTION = "JURISDICTION"
    BATTALION = "BATTALION"
    COUNCIL_DISTRICT = "COUNCIL_DISTRICT"
    DISTRICT = "DISTRICT"
    DIVISION = "DIVISION"
    FIRST_DUE = "FIRST_DUE"
    OTHER = "OTHER"


class TypeRescueActionValue(Enum):
    VENTILATION = "VENTILATION"
    HYDRAULIC_TOOL_USE = "HYDRAULIC_TOOL_USE"
    UNDERWATER_DIVE = "UNDERWATER_DIVE"
    ROPE_RIGGING = "ROPE_RIGGING"
    BREAK_BREACH_WALL = "BREAK_BREACH_WALL"
    BRACE_WALL_INFRASTRUCTURE = "BRACE_WALL_INFRASTRUCTURE"
    TRENCH_SHORING = "TRENCH_SHORING"
    SUPPLY_AIR = "SUPPLY_AIR"


class TypeRescueElevationValue(Enum):
    ON_FLOOR = "ON_FLOOR"
    ON_BED = "ON_BED"
    ON_FURNITURE = "ON_FURNITURE"
    OTHER = "OTHER"


class TypeRescueImpedimentValue(Enum):
    HOARDING_CONDITIONS = "HOARDING_CONDITIONS"
    ACCESS_LIMITATIONS = "ACCESS_LIMITATIONS"
    PHYSICAL_MEDICAL_CONDITIONS_PERSON = "PHYSICAL_MEDICAL_CONDITIONS_PERSON"
    IMPAIRED_PERSON = "IMPAIRED_PERSON"
    OTHER = "OTHER"
    NONE = "NONE"


class TypeRescueModeValue(Enum):
    REMOVAL_FROM_STRUCTURE = "REMOVAL_FROM_STRUCTURE"
    EXTRICATION = "EXTRICATION"
    DISENTANGLEMENT = "DISENTANGLEMENT"
    RECOVERY = "RECOVERY"
    OTHER = "OTHER"


class TypeRescuePathValue(Enum):
    REMOVAL_ALONG_PRIMARY_PATH = "REMOVAL_ALONG_PRIMARY_PATH"
    REMOVAL_ALONG_ALT_PATH = "REMOVAL_ALONG_ALT_PATH"


class TypeRescuePresenceKnownValue(Enum):
    KNOWN_DISPATCH = "KNOWN_DISPATCH"
    KNOWN_ARRIVAL = "KNOWN_ARRIVAL"
    KNOWN_DURING = "KNOWN_DURING"


class TypeResourceValue(Enum):
    ENTITY = "ENTITY"
    STATION = "STATION"
    INCIDENT = "INCIDENT"
    INCIDENT_STATUS = "INCIDENT_STATUS"
    USER = "USER"
    ROLE = "ROLE"
    ENTITY_SET = "ENTITY_SET"
    USER_ACTIVATION = "USER_ACTIVATION"
    USER_PERMISSIONS = "USER_PERMISSIONS"
    USER_ENTITY_ACTIVATION = "USER_ENTITY_ACTIVATION"
    USER_ENTITY_MEMBERSHIP = "USER_ENTITY_MEMBERSHIP"
    USER_ROLE_ENTITY_SET_ATTACHMENT = "USER_ROLE_ENTITY_SET_ATTACHMENT"


class TypeResponseModeValue(Enum):
    EMERGENT = "EMERGENT"
    NON_EMERGENT = "NON_EMERGENT"


class TypeRoomValue(Enum):
    ASSEMBLY = "ASSEMBLY"
    BATHROOM = "BATHROOM"
    BEDROOM = "BEDROOM"
    KITCHEN = "KITCHEN"
    LIVING_SPACE = "LIVING_SPACE"
    HALLWAY_FOYER = "HALLWAY_FOYER"
    GARAGE = "GARAGE"
    BALCONY_PORCH_DECK = "BALCONY_PORCH_DECK"
    BASEMENT = "BASEMENT"
    ATTIC = "ATTIC"
    OFFICE = "OFFICE"
    UTILITY_ROOM = "UTILITY_ROOM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class TypeServEmsValue(Enum):
    NO_MEDICAL = "NO_MEDICAL"
    BLS_NO_TRANSPORT = "BLS_NO_TRANSPORT"
    ALS_NO_TRANSPORT = "ALS_NO_TRANSPORT"
    BLS_TRANSPORT = "BLS_TRANSPORT"
    ALS_TRANSPORT = "ALS_TRANSPORT"
    AERO_TRANSPORT = "AERO_TRANSPORT"
    COMMUNITY_MED = "COMMUNITY_MED"


class TypeServFdValue(Enum):
    STRUCTURAL_FIREFIGHTING = "STRUCTURAL_FIREFIGHTING"
    HIGHRISE_FIREFIGHTING = "HIGHRISE_FIREFIGHTING"
    WILDLAND_FIREFIGHTING = "WILDLAND_FIREFIGHTING"
    PETROCHEM_FIREFIGHTING = "PETROCHEM_FIREFIGHTING"
    ARFF_FIREFIGHTING = "ARFF_FIREFIGHTING"
    MARINE_FIREFIGHTING = "MARINE_FIREFIGHTING"
    HAZMAT_OPS = "HAZMAT_OPS"
    HAZMAT_TECHNICIAN = "HAZMAT_TECHNICIAN"
    ROPE_RESCUE = "ROPE_RESCUE"
    COLLAPSE_RESCUE = "COLLAPSE_RESCUE"
    VEHICLE_RESCUE = "VEHICLE_RESCUE"
    ANIMAL_TECHRESCUE = "ANIMAL_TECHRESCUE"
    WILDERNESS_SAR = "WILDERNESS_SAR"
    TRENCH_RESCUE = "TRENCH_RESCUE"
    CONFINED_SPACE = "CONFINED_SPACE"
    MACHINERY_RESCUE = "MACHINERY_RESCUE"
    CAVE_SAR = "CAVE_SAR"
    MINE_SAR = "MINE_SAR"
    HELO_SAR = "HELO_SAR"
    WATER_SAR = "WATER_SAR"
    SWIFTWATER_SAR = "SWIFTWATER_SAR"
    DIVE_SAR = "DIVE_SAR"
    ICE_RESCUE = "ICE_RESCUE"
    SURF_RESCUE = "SURF_RESCUE"
    WATERCRAFT_RESCUE = "WATERCRAFT_RESCUE"
    FLOOD_SAR = "FLOOD_SAR"
    TOWER_SAR = "TOWER_SAR"
    REHABILITATION = "REHABILITATION"
    RRD_EXISTING = "RRD_EXISTING"
    RRD_NEWCONST = "RRD_NEWCONST"
    RRD_PUBLICED = "RRD_PUBLICED"
    RRD_PLANS = "RRD_PLANS"
    CAUSE_ORIGIN = "CAUSE_ORIGIN"
    TRAINING_ELF = "TRAINING_ELF"
    TRAINING_VETFF = "TRAINING_VETFF"
    TRAINING_OD = "TRAINING_OD"
    TRAINING_DRIVER = "TRAINING_DRIVER"


class TypeServInvestValue(Enum):
    COMPANY_LEVEL = "COMPANY_LEVEL"
    YOUTH_FIRESETTER = "YOUTH_FIRESETTER"
    DEDICATED = "DEDICATED"
    LAW_ENFORCEMENT = "LAW_ENFORCEMENT"
    K9_DETECT = "K9_DETECT"


class TypeSourceTargetValue(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"
    UNKNOWN = "UNKNOWN"


class TypeSpecialModifierValue(Enum):
    ACTIVE_ASSAILANT = "ACTIVE_ASSAILANT"
    MCI = "MCI"
    FEDERAL_DECLARED_DISASTER = "FEDERAL_DECLARED_DISASTER"
    STATE_DECLARED_DISASTER = "STATE_DECLARED_DISASTER"
    COUNTY_LOCAL_DECLARED_DISASTER = "COUNTY_LOCAL_DECLARED_DISASTER"
    URBAN_CONFLAGRATION = "URBAN_CONFLAGRATION"
    VIOLENCE_AGAINST_RESPONDER = "VIOLENCE_AGAINST_RESPONDER"


class TypeSuppressApplianceValue(Enum):
    FIRE_EXTINGUISHER = "FIRE_EXTINGUISHER"
    BOOSTER_FIRE_HOSE = "BOOSTER_FIRE_HOSE"
    SMALL_DIAMETER_FIRE_HOSE = "SMALL_DIAMETER_FIRE_HOSE"
    MEDIUM_DIAMETER_FIRE_HOSE = "MEDIUM_DIAMETER_FIRE_HOSE"
    GROUND_MONITOR = "GROUND_MONITOR"
    MASTER_STREAM = "MASTER_STREAM"
    ELEVATED_MASTER_STREAM_STANDPIPE = "ELEVATED_MASTER_STREAM_STANDPIPE"
    BUILDING_STANDPIPE = "BUILDING_STANDPIPE"
    BUILDING_FDC = "BUILDING_FDC"
    AIRATTACK_HELITACK = "AIRATTACK_HELITACK"
    OTHER = "OTHER"
    NONE = "NONE"


class TypeSuppressCookingValue(Enum):
    COMMERCIAL_HOOD_SUPPRESSION = "COMMERCIAL_HOOD_SUPPRESSION"
    RESIDENTIAL_HOOD_MOUNTED = "RESIDENTIAL_HOOD_MOUNTED"
    TEMPERATURE_LIMITING_STOVE = "TEMPERATURE_LIMITING_STOVE"
    ELECTRIC_POWER_CUTOFF_DEVICE = "ELECTRIC_POWER_CUTOFF_DEVICE"
    OTHER = "OTHER"


class TypeSuppressFireValue(Enum):
    WET_PIPE_SPRINKLER_SYSTEM = "WET_PIPE_SPRINKLER_SYSTEM"
    DRY_PIPE_SPRINKLER_SYSTEM = "DRY_PIPE_SPRINKLER_SYSTEM"
    PRE_ACTION_SYSTEM = "PRE_ACTION_SYSTEM"
    DELUGE_SYSTEM = "DELUGE_SYSTEM"
    CLEAN_AGENT_SYSTEM = "CLEAN_AGENT_SYSTEM"
    INDUSTRIAL_DRY_CHEM_SYSTEM = "INDUSTRIAL_DRY_CHEM_SYSTEM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class TypeSuppressNoOperationValue(Enum):
    SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT = "SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT"
    SYSTEM_SHUTOFF_DURING_INCIDENT = "SYSTEM_SHUTOFF_DURING_INCIDENT"
    SYSTEM_INOPERABLE = "SYSTEM_INOPERABLE"
    SYSTEM_DAMAGED_COMPROMISED = "SYSTEM_DAMAGED_COMPROMISED"
    SYSTEM_NOT_SUITABLE = "SYSTEM_NOT_SUITABLE"
    INSUFFICIENT_WATER_SUPPLY = "INSUFFICIENT_WATER_SUPPLY"
    INSUFFICIENT_SOURCE = "INSUFFICIENT_SOURCE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class TypeSuppressOperationValue(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"
    NO_OPERATION = "NO_OPERATION"


class TypeSuppressTimeValue(Enum):
    PRE_SUPPRESSION = "PRE_SUPPRESSION"
    DURING_SUPPRESSION = "DURING_SUPPRESSION"
    POST_SUPPRESSION = "POST_SUPPRESSION"


class TypeUnitValue(Enum):
    CREW_TRANS = "CREW_TRANS"
    ENGINE_STRUCT = "ENGINE_STRUCT"
    ENGINE_WUI = "ENGINE_WUI"
    BOAT = "BOAT"
    BOAT_LARGE = "BOAT_LARGE"
    LADDER_SMALL = "LADDER_SMALL"
    LADDER_QUINT = "LADDER_QUINT"
    LADDER_TALL = "LADDER_TALL"
    QUINT_TALL = "QUINT_TALL"
    PLATFORM = "PLATFORM"
    PLATFORM_QUINT = "PLATFORM_QUINT"
    LADDER_TILLER = "LADDER_TILLER"
    ARFF = "ARFF"
    FOAM = "FOAM"
    TENDER = "TENDER"
    CREW = "CREW"
    HELO_GENERAL = "HELO_GENERAL"
    HELO_FIRE = "HELO_FIRE"
    HELO_RESCUE = "HELO_RESCUE"
    UAS_FIRE = "UAS_FIRE"
    UAS_RECON = "UAS_RECON"
    AIR_TANKER = "AIR_TANKER"
    AIR_EMS = "AIR_EMS"
    AIR_RECON = "AIR_RECON"
    ALS_AMB = "ALS_AMB"
    BLS_AMB = "BLS_AMB"
    EMS_NOTRANS = "EMS_NOTRANS"
    EMS_SUPV = "EMS_SUPV"
    MAB = "MAB"
    CHIEF_STAFF_COMMAND = "CHIEF_STAFF_COMMAND"
    HAZMAT = "HAZMAT"
    DECON = "DECON"
    POV = "POV"
    RESCUE_HEAVY = "RESCUE_HEAVY"
    RESCUE_MEDIUM = "RESCUE_MEDIUM"
    RESCUE_LIGHT = "RESCUE_LIGHT"
    RESCUE_USAR = "RESCUE_USAR"
    RESCUE_WATER = "RESCUE_WATER"
    SCBA = "SCBA"
    AIR_LIGHT = "AIR_LIGHT"
    REHAB = "REHAB"
    MOBILE_ICP = "MOBILE_ICP"
    MOBILE_COMMS = "MOBILE_COMMS"
    DOZER = "DOZER"
    OTHER_GROUND = "OTHER_GROUND"
    ATV_EMS = "ATV_EMS"
    ATV_FIRE = "ATV_FIRE"
    INVEST = "INVEST"
    UTIL = "UTIL"


class TypeVacancyValue(Enum):
    NEW_CONSTRUCTION_REMODEL = "NEW_CONSTRUCTION_REMODEL"
    ABANDONED = "ABANDONED"
    FOR_SALE_LEASE = "FOR_SALE_LEASE"
    FORECLOSURE = "FORECLOSURE"
    DAMAGE_DECAY = "DAMAGE_DECAY"
    SEASONAL_OCCASIONALLY_OCCUPIED = "SEASONAL_OCCASIONALLY_OCCUPIED"
    UNKNOWN = "UNKNOWN"


class TypeWaterSupplyValue(Enum):
    HYDRANT_LESS_500 = "HYDRANT_LESS_500"
    HYDRANT_GREATER_500 = "HYDRANT_GREATER_500"
    TANK_WATER = "TANK_WATER"
    WATER_TENDER_SHUTTLE = "WATER_TENDER_SHUTTLE"
    NURSE_OTHER_APPARATUS = "NURSE_OTHER_APPARATUS"
    DRAFT_FROM_STATIC_SOURCE = "DRAFT_FROM_STATIC_SOURCE"
    SUPPLY_FROM_FIRE_BOAT = "SUPPLY_FROM_FIRE_BOAT"
    FOAM_ADDITIVE = "FOAM_ADDITIVE"


class TypeYesNoUnknownValue(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class UnitCreatedModifiedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")


class UnitPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: TypeUnitValue
    staffing: int = Field(..., title="Staffing")
    dedicated_staffing: Optional[bool] = Field(None, title="Dedicated Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")
    neris_id: str = Field(..., title="Neris Id")


class UnitResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., title="Type")
    staffing: int = Field(..., title="Staffing")
    dedicated_staffing: Optional[bool] = Field(None, title="Dedicated Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")


class UnitResponseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    unable_to_dispatch: Optional[bool] = Field(
        None,
        description="Set to TRUE if unit is unable to dispatch.",
        title="Unable To Dispatch",
    )
    response_mode: Optional[str] = Field(
        None,
        description="Response mode of unit as part of the unit's response to an incident.",
        title="Response Mode",
    )
    transport_mode: Optional[str] = Field(
        None,
        description="Transport mode of unit as part of the unit's response to a hospital.",
        title="Transport Mode",
    )
    med_responses: Optional[List[MedResponseResponse]] = Field(None, title="Med Responses")
    point: Optional[str] = Field(None, title="Point")


class Action127(Enum):
    unset = "unset"


class UnsetAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["unset"] = Field(
        ..., description="Remove (nullify) the value of an attribute", title="Action"
    )


class UpdateIncidentStatusPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: TypeIncidentStatusValue = Field(
        ...,
        description="Status of the incident in the administrativie approval process.",
    )


class UpdateIncidentStatusResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    status: TypeIncidentStatusValue = Field(
        ...,
        description="Status of the incident in the administrativie approval process.",
    )
    valid_start: AwareDatetime = Field(
        ...,
        description="Time at which the change was effective.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Valid Start",
    )
    created_by: UUID = Field(
        ...,
        description="User sub attribute that changed the status.",
        title="Created By",
    )


class UpdateUserPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    email: str = Field(..., title="Email")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")


class UserActivationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    active: bool = Field(..., title="Active")


class UserAllEntitiesPermissionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Dict[str, List[TypeActionValue]] = Field(..., title="Resources")


class UserEntityPermissionsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    resources: Dict[str, List[TypeActionValue]] = Field(..., title="Resources")
    active: bool = Field(..., title="Active")
    member: bool = Field(..., title="Member")


class UserFeatureFlags(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ui_access: bool = Field(..., title="Ui Access")


class UserPermissionsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    active: bool = Field(..., title="Active")
    entities: Dict[str, Union[UserEntityPermissionsResponse, UserAllEntitiesPermissionResponse]] = (
        Field(..., title="Entities")
    )


class UserRoleEntitySetAttachmentPathParameter(Enum):
    user = "user"
    role = "role"
    entity_set = "entity_set"


class UserStatus(Enum):
    UNCONFIRMED = "UNCONFIRMED"
    CONFIRMED = "CONFIRMED"
    ARCHIVED = "ARCHIVED"
    COMPROMISED = "COMPROMISED"
    UNKNOWN = "UNKNOWN"
    RESET_REQUIRED = "RESET_REQUIRED"
    FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD"
    EXTERNAL_PROVIDER = "EXTERNAL_PROVIDER"


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class FieldPatchCommentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    comment: Optional[Union[SetNarrativeStrAction, UnsetAction]] = Field(None, title="Comment")
    timestamp: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Timestamp")


class FieldPatchCookingFireSuppressionNotPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetNotpresentAction] = None


class FieldPatchFireAlarmNotpresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetNotpresentAction] = None


class FieldPatchFireSuppressionNotPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetNotpresentAction] = None


class FieldPatchMedResponseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    at_patient: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="At Patient")
    enroute_to_hospital: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Enroute To Hospital"
    )
    arrived_at_hospital: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Arrived At Hospital"
    )
    transferred_to_agency: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Transferred To Agency"
    )
    transferred_to_facility: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Transferred To Facility"
    )
    hospital_cleared: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Hospital Cleared"
    )
    hospital_destination: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Hospital Destination"
    )


class FieldPatchOtherAlarmNotpresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetNotpresentAction] = None


class Type45(Enum):
    REMOVAL = "REMOVAL"


class FieldPatchSmokeAlarmNotpresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetNotpresentAction] = None


class FieldPatchTacticTimestampsActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    command_established: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Command Established"
    )
    completed_sizeup: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Completed Sizeup"
    )
    suppression_complete: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Suppression Complete"
    )
    primary_search_begin: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Primary Search Begin"
    )
    primary_search_complete: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Primary Search Complete"
    )
    water_on_fire: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Water On Fire"
    )
    fire_under_control: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Fire Under Control"
    )
    fire_knocked_down: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Fire Knocked Down"
    )
    extrication_complete: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Extrication Complete"
    )


class Action128(Enum):
    set = "set"


class FieldSetTypeAidDirectionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeAidDirectionValue


class FieldSetTypeAidValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeAidValue


class FieldSetTypeAlarmFailureValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeAlarmFailureValue


class Value2(Enum):
    WORKING_ALERTED_OCCUPANT = "WORKING_ALERTED_OCCUPANT"
    OPERATED_ALERTED_OCCUPANT = "OPERATED_ALERTED_OCCUPANT"


class FieldSetTypeAlarmOperationAlertedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value2 = Field(..., title="Value")


class Value3(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"


class FieldSetTypeAlarmOperationFailedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["FAILED_TO_OPERATE"] = Field(..., title="Value")


class FieldSetTypeAlarmOperationValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeAlarmOperationValue


class Value4(Enum):
    INJURED_NONFATAL = "INJURED_NONFATAL"
    INJURED_FATAL = "INJURED_FATAL"


class FieldSetTypeCasualtyAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value4 = Field(..., title="Value")


class FieldSetTypeCasualtyActionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeCasualtyActionValue


class FieldSetTypeCasualtyCauseValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeCasualtyCauseValue


class Value5(Enum):
    UNINJURED = "UNINJURED"


class FieldSetTypeCasualtyNoinjuryAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["UNINJURED"] = Field(..., title="Value")


class FieldSetTypeCasualtyTimelineValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeCasualtyTimelineValue


class FieldSetTypeDutyValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeDutyValue


class FieldSetTypeEmerghazElecValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeEmerghazElecValue


class Value6(Enum):
    NONE = "NONE"
    WIND_TURBINE = "WIND_TURBINE"
    OTHER = "OTHER"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class FieldSetTypeEmerghazOtherPowergenAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value6 = Field(..., title="Value")


class FieldSetTypeEmerghazPvIgnValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeEmerghazPvIgnValue


class Value7(Enum):
    PHOTOVOLTAICS = "PHOTOVOLTAICS"


class FieldSetTypeEmerghazPvPowergenAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["PHOTOVOLTAICS"] = Field(..., title="Value")


class FieldSetTypeEmerghazPvValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeEmerghazPvValue


class FieldSetTypeExposureDamageValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeExposureDamageValue


class FieldSetTypeExposureItemValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeExposureItemValue


class Value8(Enum):
    EXTERNAL_EXPOSURE = "EXTERNAL_EXPOSURE"


class FieldSetTypeExposureLocAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["EXTERNAL_EXPOSURE"] = Field(..., title="Value")


class Value9(Enum):
    FF = "FF"
    NONFF = "NONFF"


class FieldSetTypeFfNonffAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value9 = Field(..., title="Value")


class FieldSetTypeFireBldgDamageValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFireBldgDamageValue


class FieldSetTypeFireCauseInValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFireCauseInValue


class FieldSetTypeFireCauseOutValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFireCauseOutValue


class FieldSetTypeFireConditionArrivalValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFireConditionArrivalValue


class FieldSetTypeFireInvestNeedValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFireInvestNeedValue


class FieldSetTypeFullPartialValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeFullPartialValue


class FieldSetTypeGenderValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeGenderValue


class FieldSetTypeHazardCauseValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeHazardCauseValue


class FieldSetTypeHazardDispositionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeHazardDispositionValue


class FieldSetTypeHazardDotValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeHazardDotValue


class FieldSetTypeHazardPhysicalStateValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeHazardPhysicalStateValue


class FieldSetTypeHazardReleasedIntoValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeHazardReleasedIntoValue


class FieldSetTypeHazardUnitValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    valud: TypeHazardUnitValue


class FieldSetTypeIncidentValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeIncidentValue


class Value10(Enum):
    INTERNAL_EXPOSURE = "INTERNAL_EXPOSURE"


class FieldSetTypeInternalExposureLocAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["INTERNAL_EXPOSURE"] = Field(..., title="Value")


class FieldSetTypeJobClassificationValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeJobClassificationValue


class FieldSetTypeLocCspCountryValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocCspCountryValue


class FieldSetTypeLocPlaceValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocPlaceValue


class FieldSetTypeLocSnDirectionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocSnDirectionValue


class FieldSetTypeLocSnPrePostValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocSnPrePostValue


class FieldSetTypeLocSnPreSepValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocSnPreSepValue


class FieldSetTypeLocationCrossStreetValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocationCrossStreetValue


class FieldSetTypeLocationUseValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeLocationUseValue


class FieldSetTypeMedicalPatientCareValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeMedicalPatientCareValue


class FieldSetTypeMedicalPatientStatusValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeMedicalPatientStatusValue


class FieldSetTypeMedicalTransportValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeMedicalTransportValue


class FieldSetTypeNoactionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeNoactionValue


class FieldSetTypeOccupantResponseValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeOccupantResponseValue


class FieldSetTypeRaceValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRaceValue


class FieldSetTypeRescueElevationValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRescueElevationValue


class Value11(Enum):
    FIREFIGHTER_RESCUED = "FIREFIGHTER_RESCUED"
    FIREFIGHTER_ASSISTED_EVAC = "FIREFIGHTER_ASSISTED_EVAC"
    RESCUED_BY_FIREFIGHTER = "RESCUED_BY_FIREFIGHTER"
    RESCUED_BY_FF_RIT = "RESCUED_BY_FF_RIT"
    EVAC_ASSISTED_BY_FIREFIGHTER = "EVAC_ASSISTED_BY_FIREFIGHTER"


class FieldSetTypeRescueFfrescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value11 = Field(..., title="Value")


class FieldSetTypeRescueModeValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRescueModeValue


class Value12(Enum):
    NON_FIREFIGHTER_RESCUED = "NON_FIREFIGHTER_RESCUED"
    RESCUED_BY_NONFIREFIGHTER = "RESCUED_BY_NONFIREFIGHTER"
    SELF_EVACUATION = "SELF_EVACUATION"
    NO_RESCUE_NEEDED = "NO_RESCUE_NEEDED"


class FieldSetTypeRescueNonffrescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value12 = Field(..., title="Value")


class FieldSetTypeRescuePathValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRescuePathValue


class FieldSetTypeRescuePresenceKnownValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRescuePresenceKnownValue


class FieldSetTypeResponseModeTransportValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeResponseModeValue


class FieldSetTypeResponseModeUnitValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeResponseModeValue


class FieldSetTypeRoomValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeRoomValue


class FieldSetTypeSourceTargetValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeSourceTargetValue


class FieldSetTypeSuppressFireValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeSuppressFireValue


class FieldSetTypeSuppressNoOperationValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeSuppressNoOperationValue


class Value13(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"


class FieldSetTypeSuppressOperationEffectiveAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["OPERATED_EFFECTIVE"] = Field(..., title="Value")


class Value14(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"
    NO_OPERATION = "NO_OPERATION"


class FieldSetTypeSuppressOperationFailedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Value14 = Field(..., title="Value")


class Value15(Enum):
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"


class FieldSetTypeSuppressOperationIneffectiveAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: Literal["OPERATED_NOT_EFFECTIVE"] = Field(..., title="Value")


class FieldSetTypeSuppressOperationValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeSuppressOperationValue


class FieldSetTypeSuppressTimeValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeSuppressTimeValue


class FieldSetTypeVacancyValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeVacancyValue


class FieldSetTypeWaterSupplyValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeWaterSupplyValue


class FieldSetTypeYesNoUnknownValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: TypeYesNoUnknownValue


class NerisApiAuthModelsUserResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    sub: UUID = Field(..., title="Sub")


class NerisApiEntityModelsDispatchPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    avl_usage: Optional[bool] = Field(None, title="Avl Usage")
    center_id: Optional[str] = Field(None, title="Center Id")
    cad_software: Optional[str] = Field(None, title="Cad Software")
    psap_type: Optional[TypePsapValue] = None
    psap_capability: Optional[TypePsapCapaValue] = None
    psap_discipline: Optional[TypePsapDiscValue] = None
    psap_jurisdiction: Optional[TypePsapJurisValue] = None
    protocol_fire: Optional[TypeDispProtoFireValue] = None
    protocol_med: Optional[TypeDispProtoMedValue] = None


class NerisApiEntityModelsDispatchResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    avl_usage: Optional[bool] = Field(None, title="Avl Usage")
    center_id: Optional[str] = Field(None, title="Center Id")
    cad_software: Optional[str] = Field(None, title="Cad Software")
    psap_type: Optional[str] = Field(None, title="Psap Type")
    psap_capability: Optional[str] = Field(None, title="Psap Capability")
    psap_discipline: Optional[str] = Field(None, title="Psap Discipline")
    psap_jurisdiction: Optional[str] = Field(None, title="Psap Jurisdiction")
    protocol_fire: Optional[str] = Field(None, title="Protocol Fire")
    protocol_med: Optional[str] = Field(None, title="Protocol Med")


class NerisApiUserModelsUserResponse(BaseModel):
    sub: UUID = Field(..., title="Sub")
    username: UUID = Field(..., title="Username")
    email: EmailStr = Field(..., title="Email")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")
    status: UserStatus
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    active: bool = Field(..., title="Active")
    email_verified: bool = Field(..., title="Email Verified")
    feature_flags: UserFeatureFlags


class NerisSharedTypesStatesTerrs1(Enum):
    AL = "AL"
    AK = "AK"
    AS = "AS"
    AZ = "AZ"
    AR = "AR"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DE = "DE"
    DC = "DC"
    FL = "FL"
    GA = "GA"
    GU = "GU"
    HI = "HI"
    ID = "ID"
    IL = "IL"
    IN = "IN"
    IA = "IA"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    ME = "ME"
    MD = "MD"
    MA = "MA"
    MI = "MI"
    MN = "MN"
    MS = "MS"
    MO = "MO"
    MP = "MP"
    MT = "MT"
    NA = "NA"
    NE = "NE"
    NV = "NV"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NY = "NY"
    NC = "NC"
    ND = "ND"
    OH = "OH"
    OK = "OK"
    OR = "OR"
    PA = "PA"
    PR = "PR"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VT = "VT"
    VA = "VA"
    VI = "VI"
    WA = "WA"
    WV = "WV"
    WI = "WI"
    WY = "WY"


class NerisSharedTypesStatesTerrs2(Enum):
    AL = "AL"
    AK = "AK"
    AS = "AS"
    AZ = "AZ"
    AR = "AR"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DE = "DE"
    DC = "DC"
    FL = "FL"
    GA = "GA"
    GU = "GU"
    HI = "HI"
    ID = "ID"
    IL = "IL"
    IN = "IN"
    IA = "IA"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    ME = "ME"
    MD = "MD"
    MA = "MA"
    MI = "MI"
    MN = "MN"
    MS = "MS"
    MO = "MO"
    MP = "MP"
    MT = "MT"
    NA = "NA"
    NE = "NE"
    NV = "NV"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NY = "NY"
    NC = "NC"
    ND = "ND"
    OH = "OH"
    OK = "OK"
    OR = "OR"
    PA = "PA"
    PR = "PR"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VT = "VT"
    VA = "VA"
    VI = "VI"
    WA = "WA"
    WV = "WV"
    WI = "WI"
    WY = "WY"


class ActionPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["ACTION"] = Field(
        "ACTION", description="`ACTION` indicates action was taken", title="Type"
    )
    actions: Optional[Union[Union[List[TypeActionTacticValue], Actions], Actions]] = Field(
        None,
        description="Actions taken by the fire department on the scene of the incident.",
        title="Actions",
    )


class ActionTacticResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    action_noaction: Union[ActionResponse, NoactionResponse] = Field(
        ..., discriminator="type", title="Action Noaction"
    )


class AidPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    aid_type: TypeAidValue = Field(..., description="The type of aid provided")
    aid_direction: TypeAidDirectionValue = Field(..., description="The direction aid was provided")


class AppendAidAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: AidPayload


class AppendCommentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: CommentPayload


class AppendMedResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: MedResponsePayload


class AppendOtherPowergenHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: OtherPowergenHazardPayload


class CasualtyResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    injury_noinjury: Union[InjuryResponse, NoinjuryResponse] = Field(..., title="Injury Noinjury")


class CookingFireSuppressionPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["PRESENT"] = Field(..., title="Type")
    suppression_types: Optional[List[TypeSuppressCookingValue]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[Union[TypeSuppressOperationValue, OperationType]] = None


class CreateUnitPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: TypeUnitValue
    staffing: int = Field(..., title="Staffing")
    dedicated_staffing: Optional[bool] = Field(None, title="Dedicated Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")


class CrossStreetPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    street_prefix: Optional[Union[TypeLocSnPrePostValue, StreetPrefix]] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
    )
    street_preposition_type_separator: Optional[
        Union[TypeLocSnPreSepValue, StreetPrepositionTypeSeparator]
    ] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
    )
    street_postfix: Optional[Union[TypeLocSnPrePostValue, StreetPostfix]] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
    )
    direction_of_travel: Optional[Union[TypeLocSnDirectionValue, DirectionOfTravel]] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
    )
    cross_street_modifier: Union[TypeLocationCrossStreetValue, CrossStreetModifier] = Field(
        ...,
        description="Modifier of the cross street, such as 'nearest' or 'second nearest'",
    )


class CsstHazardPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ignition_source: Optional[bool] = Field(
        None,
        description="Whether corrugated stainless steel tubing was a suspected ignition source.",
        title="Ignition Source",
    )
    lightning_suspected: Optional[Union[TypeYesNoUnknownValue, LightningSuspected]] = Field(
        None, description="Whether lightning was suspected as cause of ignition."
    )
    grounded: Optional[Union[TypeYesNoUnknownValue, Grounded]] = Field(
        None, description="Whether the CSST was grounded."
    )


class DispatchUnitResponsePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    unable_to_dispatch: Optional[bool] = Field(
        None,
        description="Set to TRUE if unit is unable to dispatch.",
        title="Unable To Dispatch",
    )
    med_responses: Optional[List[MedResponsePayload]] = Field(None, title="Med Responses")
    point: Optional[GeoPoint] = None
    response_mode: Optional[Union[TypeResponseModeValue, ResponseMode]] = Field(
        None,
        description="Response mode of unit as part of the unit's response to an incident.",
    )
    transport_mode: Optional[Union[TypeResponseModeValue, TransportMode]] = Field(
        None,
        description="Transport mode of unit as part of the unit's response to a hospital.",
    )
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class DispatchUnitResponseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    unable_to_dispatch: Optional[bool] = Field(
        None,
        description="Set to TRUE if unit is unable to dispatch.",
        title="Unable To Dispatch",
    )
    response_mode: Optional[str] = Field(
        None,
        description="Response mode of unit as part of the unit's response to an incident.",
        title="Response Mode",
    )
    transport_mode: Optional[str] = Field(
        None,
        description="Transport mode of unit as part of the unit's response to a hospital.",
        title="Transport Mode",
    )
    med_responses: Optional[List[MedResponseResponse]] = Field(None, title="Med Responses")
    point: Optional[str] = Field(None, title="Point")
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class ElectricHazardFirePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    reignition: Optional[bool] = Field(
        None, description="Whether there was a re-ignition.", title="Reignition"
    )
    suppression_types: Optional[
        Union[
            Union[List[TypeEmerghazSuppressionValue], SuppressionTypes],
            SuppressionTypes,
        ]
    ] = Field(None, description="Suppression methods used.", title="Suppression Types")


class ElectricHazardPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fire_details: Optional[ElectricHazardFirePayload] = Field(
        None, description="Fire details for the electric emerging hazard."
    )
    type: TypeEmerghazElecValue = Field(
        ...,
        description="Additional specificity on the battery powered / stored energy emerging hazard.",
    )
    source_or_target: Optional[Union[TypeSourceTargetValue, SourceOrTarget]] = Field(
        None, description="Whether the battery was the source or target."
    )
    involved_in_crash: Optional[Union[bool, ElectricHazardCrashPayload]] = Field(
        None,
        description="Whether the electric vehicle was involved in crash. Only applicable to `ELECTRIC_VEHICLE` types",
        title="Involved In Crash",
    )


class ElectricHazardResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    fire_details: Optional[ElectricHazardFireResponse] = None
    type: str = Field(
        ...,
        description="Additional specificity on the battery powered / stored energy emerging hazard.",
        title="Type",
    )
    source_or_target: Optional[TypeSourceTargetValue] = Field(
        None, description="Whether the battery was the source or target."
    )
    involved_in_crash: Optional[Union[bool, ElectricHazardCrashResponse]] = Field(
        None,
        description="Whether the electric vehicle was involved in crash. Only applicable to `ELECTRIC_VEHICLE` types",
        title="Involved In Crash",
    )


class EntitySetPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    type: TypeEntitySetValue = Field(..., description="The type of entity set.")
    members: Optional[List[EntitySetMembershipPayload]] = Field(None, title="Members")


class ExposureResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    displacement_count: Optional[int] = Field(
        None, description="Number of people displaced.", title="Displacement Count"
    )
    location_detail: Union[ExternalExposureResponse, InternalExposureResponse] = Field(
        ..., title="Location Detail"
    )
    location: LocationResponse
    location_use: Optional[LocationUseResponse] = None
    point: Optional[str] = Field(None, title="Point")
    polygon: Optional[str] = Field(None, title="Polygon")
    displacement_causes: Optional[List[str]] = Field(
        None, description="Causes of displacement.", title="Displacement Causes"
    )


class ExternalExposurePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_external_internal: Literal["EXTERNAL"] = Field("EXTERNAL", title="Type External Internal")
    type: Literal["EXTERNAL_EXPOSURE"] = Field(..., title="Type")
    item_type: Optional[Union[TypeExposureItemValue, ItemType]] = Field(
        None,
        description="Type of property damaged or destroyed from the originating source of the hazard.",
    )


class FfInjuryDetailsPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident in FD Spec.",
        examples=["FD24027442S000U000", "FD24027442S000U001"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the unit responding to the incident if neris id not yet in FD Spec.",
        examples=["A702"],
        title="Reported Unit Id",
    )
    unit_continuity: Optional[bool] = Field(
        None,
        description="Continuity of company at the time of incident.",
        title="Unit Continuity",
    )
    incident_command: Optional[bool] = Field(
        None,
        description="Whether an incident command structure was in place during incident.",
        title="Incident Command",
    )
    job_classification: Optional[Union[TypeJobClassificationValue, JobClassification]] = Field(
        None, description="Job classification of firefighter."
    )
    duty_type: Optional[Union[TypeDutyValue, DutyType]] = Field(
        None, description="Duty state of the firefighter at the time of the incident."
    )
    action_type: Optional[Union[TypeCasualtyActionValue, ActionType]] = Field(
        None, description="Actions that occurred during the time of the incident."
    )
    incident_stage: Optional[Union[TypeCasualtyTimelineValue, IncidentStage]] = Field(
        None, description="Stage of the incident when the injury occurred."
    )
    injury_ff_ppe: Optional[Union[Union[List[TypeCasualtyPpeValue], InjuryFfPpe], InjuryFfPpe]] = (
        Field(None, description="PPE worn during time of incident.", title="Injury Ff Ppe")
    )


class FfRescueResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_ffrescue: Literal["FFRESCUE"] = Field("FFRESCUE", title="Type Ffrescue")
    actions: Optional[Union[Union[List[TypeRescueActionValue], Actions2], Actions2]] = Field(
        None, description="Action taken to support the rescue.", title="Actions"
    )
    removal_or_nonremoval: Union[RemovalResponse, NonremovalResponse] = Field(
        ..., title="Removal Or Nonremoval"
    )
    type: str = Field(..., title="Type")
    impediments: Optional[List[str]] = Field(
        None,
        description="Whether conditions impacted the ability of rescue.",
        title="Impediments",
    )


class FireAlarmPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmFireValue]] = Field(None, title="Alarm Types")
    operation_type: Optional[TypeAlarmOperationValue] = None


class FireAlarmResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence: Union[FireAlarmPresentPayload, FireAlarmNotPresentPayload] = Field(
        ..., title="Presence"
    )


class FireRemovalPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    relative_suppression_time: Optional[Union[TypeSuppressTimeValue, RelativeSuppressionTime]] = (
        Field(
            None,
            description="Relative to suppression, when the firefighter was removed from the structure.",
        )
    )


class FireResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    location_detail: Union[
        StructureFireLocationDetailResponse, OutsideFireLocationDetailResponse
    ] = Field(..., title="Location Detail")
    water_supply: str = Field(
        ...,
        description="Describes the type of water supply utilized for the incident.",
        title="Water Supply",
    )
    investigation_needed: str = Field(
        ...,
        description="Assessment by incident commander and/or officer in charge of the incident as to whether the fire necessitated a formal fire investigation.",
        title="Investigation Needed",
    )
    investigation_types: List[str] = Field(
        ...,
        description="Categorizes the general type of investigation completed at the structure fire incident.",
        title="Investigation Types",
    )
    suppression_appliances: Optional[List[str]] = Field(
        None,
        description="Describes the appliances used for suppression.",
        title="Suppression Appliances",
    )


class FireSuppressionFailedPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["FAILED"] = Field("FAILED", title="Type Operation Effective")
    type: Literal["FAILED_TO_OPERATE", "NO_OPERATION"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeSuppressNoOperationValue, FailureReason]] = Field(
        None, description="Reason for suppression system failure."
    )


class FireSuppressionIneffectivePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_effective: Literal["INEFFECTIVE"] = Field(
        "INEFFECTIVE", title="Type Operation Effective"
    )
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )
    type: Literal["OPERATED_NOT_EFFECTIVE"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeSuppressNoOperationValue, FailureReason]] = Field(
        None, description="Reason for suppression system failure."
    )


class FireSuppressionOperationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    effectiveness: Union[
        FireSuppressionEffectivePayload,
        FireSuppressionIneffectivePayload,
        FireSuppressionFailedPayload,
    ] = Field(..., discriminator="type", title="Effectiveness")


class FireSuppressionPresentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: str = Field(..., title="Type")
    suppression_types: Optional[List[FireSuppressionTypeResponse]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[FireSuppressionOperationResponse] = None


class FireSuppressionResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence: Union[FireSuppressionPresentResponse, FireSuppressionNotPresentResponse] = Field(
        ..., title="Presence"
    )


class FireSuppressionTypePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: TypeSuppressFireValue = Field(..., description="Type of fire suppression system.")
    full_partial: Optional[Union[TypeFullPartialValue, FullPartial]] = Field(
        None, description="Whether the fire suppression system was full or partial."
    )


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class IncidentBaseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    animals_rescued: Optional[int] = Field(
        None,
        description="Total number of animals rescued.",
        examples=[1],
        title="Animals Rescued",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    impediment_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of any obstacles that impacted the incident.",
        title="Impediment Narrative",
    )
    outcome_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of the final disposition of the incident.",
        title="Outcome Narrative",
    )
    displacement_count: Optional[int] = Field(
        None, description="Number of people displaced.", title="Displacement Count"
    )
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    incident_number: constr(pattern=r"[\w\d\-\:]+") = Field(
        ...,
        description="The department's internal ID for the incident.",
        examples=["IN20240703HAWV"],
        title="Incident Number",
    )
    displacement_causes: Optional[List[str]] = Field(
        None, description="Causes of displacement.", title="Displacement Causes"
    )
    location: LocationResponse
    location_use: Optional[LocationUseResponse] = None
    point: Optional[str] = Field(None, title="Point")
    polygon: Optional[str] = Field(None, title="Polygon")


class IncidentTypePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    primary: Optional[bool] = Field(
        None,
        description="Flag for the primary incident type. Only one type can be `True`.",
        title="Primary",
    )
    type: TypeIncidentValue = Field(
        ...,
        description="Specific incident type that details the nature of the incident; levels up into incident_category.",
    )


class IncidentUnitResponsePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    unable_to_dispatch: Optional[bool] = Field(
        None,
        description="Set to TRUE if unit is unable to dispatch.",
        title="Unable To Dispatch",
    )
    med_responses: Optional[List[MedResponsePayload]] = Field(None, title="Med Responses")
    point: Optional[GeoPoint] = None
    response_mode: Optional[Union[TypeResponseModeValue, ResponseMode]] = Field(
        None,
        description="Response mode of unit as part of the unit's response to an incident.",
    )
    transport_mode: Optional[Union[TypeResponseModeValue, TransportMode]] = Field(
        None,
        description="Transport mode of unit as part of the unit's response to a hospital.",
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class InjuryPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_injury_noinjury: Literal["INJURY"] = Field("INJURY", title="Type Injury Noinjury")
    type: Literal["INJURED_FATAL", "INJURED_NONFATAL"] = Field(..., title="Type")
    cause: Optional[Union[TypeCasualtyCauseValue, Cause]] = Field(
        None, description="Apparent cause of the injury or fatality."
    )
    injury_ff: Optional[FfInjuryDetailsPayload] = Field(
        None,
        description="Details of the injury sustained by a firefighter. Only possible if casualty-rescue type is `FF`",
    )


class LocationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    additional_attributes: Optional[Dict[str, Any]] = Field(
        None,
        description="JSON string of structure address elements which the transmitter wishes to include.",
        examples=[{"common_name": "Eastside Walmart"}],
        title="Additional Attributes",
    )
    place_type: Optional[Union[TypeLocPlaceValue, PlaceType]] = Field(
        None,
        description="Type of feature identified by the address.",
        examples=["AIRPORT"],
    )
    postal_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="City name for the ZIP Code of an address, as given in the USPS City State file.",
        examples=["Stanton (a post office name in KY)"],
        title="Postal Community",
    )
    neighborhood_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated neighborhood, subdivision or area, either within an incorporated municipality, or in an unincorporated portion of a county or both, where the address is located. ",
        examples=["Cypress Meadows Subdivision"],
        title="Neighborhood Community",
    )
    unincorporated_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated community, either within an incorporated municipality or in an unincorporated portion of a county, or both, where the address is located. ",
        examples=["14th Ward (a ward in the incorporated municipality of Pittsburgh, PA) "],
        title="Unincorporated Community",
    )
    incorporated_municipality: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the incorporated municipality or other general-purpose local governmental unit (if any) where the address is located.",
        examples=["Haleyville"],
        title="Incorporated Municipality",
    )
    county: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the county or county-equivalent where the address is located. A county (or its equivalent) is the primary legal division of a state or territory.",
        examples=["Winston County"],
        title="County",
    )
    state: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a state or state equivalent, represented by the two- letter UPPER CASE abbreviation given in USPS Publication 28 [15], Appendix B. A state is a primary governmental division of the United States.",
        examples=["VA"],
        title="State",
    )
    postal_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 5-digit codes that identifies the individual USPS Post Office or metropolitan area delivery station associated with an address.",
        examples=["02109 (one of many ZIP Codes for Boston, MA)"],
        title="Postal Code",
    )
    postal_code_extension: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 4-digit codes that are used after the 5-digit ZIP Code to specify a range of USPS delivery addresses.",
        examples=['"0001" in "02109-0001" (portion of a 02109 ZIP Code).'],
        title="Postal Code Extension",
    )
    country: Optional[Union[TypeLocCspCountryValue, Country]] = Field(
        None,
        description="Name of a country represented by its two-letter ISO 3166-1[14] English country alpha-2 code elements in UPPER CASE letters.",
        examples=["US"],
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    street_prefix: Optional[Union[TypeLocSnPrePostValue, StreetPrefix]] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
    )
    street_preposition_type_separator: Optional[
        Union[TypeLocSnPreSepValue, StreetPrepositionTypeSeparator]
    ] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
    )
    street_postfix: Optional[Union[TypeLocSnPrePostValue, StreetPostfix]] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
    )
    direction_of_travel: Optional[Union[TypeLocSnDirectionValue, DirectionOfTravel]] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
    )
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    structure: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="A built feature which has a vertical dimension, including both conventional buildings which have walls, doors, and a roof, and other kinds of infrastructure such as cell towers, transformer stations, fuel tanks, and so on. ",
        examples=['"Fuel Storage Shed" in "100 Cantwell Avenue, Fuel Storage Shed"'],
        title="Structure",
    )
    subsite: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a sub-area within a larger area specified either by site name, by a thoroughfare address, or both.",
        examples=['"Buckeye Village" in "The Ohio State University, Buckeye Village"'],
        title="Subsite",
    )
    site: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an exterior area which is publicly known and unique within a given place. A site may contain one or more structures and/or sub-sites.",
        examples=['"Winslow Park and Campground" in "Winslow Park and Campground, Freeport, ME" '],
        title="Site",
    )
    wing: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Designated part of a structure which spans one or many floors, typically including more than one unit or room and representing a significant portion of the structure floor area. ",
        examples=[
            '"Concourse A" in "Pittsburgh International Airport, Airside Terminal, Concourse A" '
        ],
        title="Wing",
    )
    floor: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Standardized identifier for a story or level within a structure, wing, or unit.",
        examples=['"5" in "800 Jefferson Street, 5th Floor" '],
        title="Floor",
    )
    unit_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that precedes the Unit Value and indicates the kind of unit.",
        examples=['"Apartment" in "422 Via Casitas, Apartment 12" '],
        title="Unit Prefix",
    )
    unit_value: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that uniquely identifies a particular unit.",
        examples=['"12" in "422 Via Casitas, Apartment 12" '],
        title="Unit Value",
    )
    room: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Single, distinctly identified, enclosed space within a structure. ",
        examples=['"E427" in "Gilman Memorial Hospital, Room E247" '],
        title="Room",
    )
    section: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified, unenclosed area within a structure, wing, unit, or room. ",
        examples=['"Customer Seating" in "Coastland Mall, Food Court, Customer Seating" '],
        title="Section",
    )
    row: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified linear feature, such as a linear arrangement of seats, workstations, equipment, or storage, within a structure, wing, unit, or room. ",
        examples=['"Aisle 4" in "Warehouse 3, Aisle 4"'],
        title="Row",
    )
    seat: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified seat, desk, workstation, or similar precise location within a structure, wing, unit, room, section, or row.",
        examples=['"Cubicle A-7" in "1 Ashburton Place, Room 819, Cubicle A-7"'],
        title="Seat",
    )
    additional_info: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Information that relates to location but does not meet the definition of any other named location elements.",
        examples=["Main Loading Dock"],
        title="Additional Info",
    )
    marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Uniquely identified and indivisible infrastructure component, smaller than a structure, which exists either within a structure or exterior to any structure, such as an alarm box, a utility pole, a callbox, or other similar feature. ",
        examples=[
            "Call Box CC-680-118 (an emergency call box on Interstate 680 in Contra Costa County, CA)"
        ],
        title="Marker",
    )
    cross_streets: Optional[List[CrossStreetPayload]] = Field(
        None,
        description="Array of (Street name + optional address number) for the nearest intersection(s).",
        title="Cross Streets",
    )
    location_aliases: Optional[List[LocationPayload]] = Field(
        None,
        description="A location that is an alias for the for the top-level location",
        title="Location Aliases",
    )


class LocationUsePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    in_use: Optional[InusePayload] = Field(
        None,
        description="If the location is being used, whether it is being used as intended.",
    )
    use_type: Optional[Union[TypeLocationUseValue, UseType]] = Field(
        None, description="Location use type."
    )
    vacancy_cause: Optional[Union[TypeVacancyValue, VacancyCause]] = Field(
        None, description="Apparent reason the location is vacant."
    )
    secondary_use: Optional[Union[TypeLocationUseValue, SecondaryUse]] = Field(
        None,
        description="Secondary location use type, if there was one that impacted the incident response.",
    )


class MaydayPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mayday: Literal[True] = Field(
        True,
        description="Whether there was a mayday called to indicate a firefighter needed assistance during the incident.",
        title="Mayday",
    )
    rit_activated: Optional[bool] = Field(
        None,
        description="Whether a RIT team was activated following a mayday declaration.",
        title="Rit Activated",
    )
    relative_suppression_time: Optional[Union[TypeSuppressTimeValue, RelativeSuppressionTime]] = (
        Field(None, description="Relative to suppression, when the mayday was called.")
    )


class MedicalPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    patient_care_report_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Patient care report identification number.",
        examples=["VAE456M1-02202024"],
        title="Patient Care Report Id",
    )
    patient_care_evaluation: TypeMedicalPatientCareValue = Field(
        ..., description="Status of patient care needs based on evaluation."
    )
    patient_status: Optional[Union[TypeMedicalPatientStatusValue, PatientStatus]] = Field(
        None, description="Status of the patient after FD arrival and intervention."
    )
    transport_disposition: Optional[Union[TypeMedicalTransportValue, TransportDisposition]] = Field(
        None, description="Transport outcome of the incident."
    )


class NoactionPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOACTION"] = Field(
        "NOACTION", description="`NOACTION` indicates no action was taken", title="Type"
    )
    noaction_type: Optional[Union[TypeNoactionValue, NoactionType]] = Field(
        None,
        description="Reason no action taken by the fire department on the scene of the incident.",
    )


class OtherAlarmNotPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmOtherValue]] = Field(None, title="Alarm Types")


class OtherAlarmPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmOtherValue]] = Field(None, title="Alarm Types")


class OtherAlarmResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence: Union[OtherAlarmPresentPayload, OtherAlarmNotPresentPayload] = Field(
        ..., title="Presence"
    )


class OutsideFireLocationDetailPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["OUTSIDE"] = Field("OUTSIDE", title="Type")
    acres_burned: Optional[float] = Field(
        None,
        description="Estimated number of acres burned during the incident.",
        examples=["0.5"],
        title="Acres Burned",
    )
    cause: TypeFireCauseOutValue = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the outdoor fire.",
    )


class PatchCommentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCommentActionProperties


class PatchCookingFireSuppressionNotPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCookingFireSuppressionNotPresentActionProperties


class PatchDispatchTacticTimestampsAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchTacticTimestampsActionProperties


class PatchFireAlarmNotpresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireAlarmNotpresentActionProperties


class PatchFireSuppressionNotPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionNotPresentActionProperties


class PatchIncidentTacticTimestampsAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchTacticTimestampsActionProperties


class PatchMedResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchMedResponseActionProperties


class PatchOtherAlarmNotpresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchOtherAlarmNotpresentActionProperties


class PatchSmokeAlarmNotpresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmNotpresentActionProperties


class PatchStationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    address_line_1: Optional[str] = Field(None, title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: Optional[str] = Field(None, title="City")
    state: Optional[NerisSharedTypesStatesTerrs1] = None
    zip_code: Optional[str] = Field(None, title="Zip Code")
    station_id: Optional[str] = Field(None, title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    location: Optional[GeoPoint] = None


class PatchUnitPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[TypeUnitValue] = None
    staffing: Optional[int] = Field(None, title="Staffing")
    dedicated_staffing: Optional[bool] = Field(None, title="Dedicated Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")


class PopulationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    source: Optional[TypePopSourceValue] = None
    protected: Optional[int] = Field(None, title="Protected")


class PowergenHazardResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    pv_other: Union[PvPowergenHazardResponse, OtherPowergenHazardResponse] = Field(
        ..., title="Pv Other"
    )


class PresenceKnownPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence_known_type: Optional[Union[TypeRescuePresenceKnownValue, PresenceKnownType]] = Field(
        None,
        description="Whether the presence of an occupant in need of rescue was known",
    )


class PvPowergenHazardPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_pv_other: Literal["PV"] = Field("PV", title="Type Pv Other")
    type: Literal["PHOTOVOLTAICS"] = Field(..., title="Type")
    source_or_target: Optional[Union[TypeEmerghazPvIgnValue, SourceOrTarget1]] = Field(
        None,
        description="Whether photovoltaics were the source of ignition or target. Only applies to `PHOTOVOLTAICS` type.",
    )
    pv_type: Optional[Union[TypeEmerghazPvValue, PvType]] = Field(
        None,
        description="Type of photovoltaics were involved in the incident. Only applies to `PHOTOVOLTAICS` type.",
    )


class RegionSetPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: Optional[str] = Field(None, title="Name")
    type: TypeRegionValue
    primary: bool = Field(..., title="Primary")
    coverage: bool = Field(..., title="Coverage")
    juris: bool = Field(..., title="Juris")
    regions: Optional[List[RegionPayload]] = Field(None, title="Regions")


class ReleasePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    estimated_amount: Optional[int] = Field(
        None,
        description="Estimated amount released by volume or weight.",
        examples=[1345],
        title="Estimated Amount",
    )
    unit_of_measurement: Optional[Union[TypeHazardUnitValue, UnitOfMeasurement]] = Field(
        None, description="Unit of measurement of the estimated amount released."
    )
    physical_state: Optional[Union[TypeHazardPhysicalStateValue, PhysicalState]] = Field(
        None, description="Physical state of the chemical."
    )
    released_into: Optional[Union[TypeHazardReleasedIntoValue, ReleasedInto]] = Field(
        None, description="Environment which was contaminated."
    )
    cause: Optional[Union[TypeHazardCauseValue, Cause1]] = Field(
        None, description="Cause of the hazmat release."
    )


class ReleaseResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    estimated_amount: Optional[int] = Field(
        None,
        description="Estimated amount released by volume or weight.",
        examples=[1345],
        title="Estimated Amount",
    )
    unit_of_measurement: Optional[Union[TypeHazardUnitValue, UnitOfMeasurement]] = Field(
        None, description="Unit of measurement of the estimated amount released."
    )
    physical_state: Optional[Union[TypeHazardPhysicalStateValue, PhysicalState]] = Field(
        None, description="Physical state of the chemical."
    )
    released_into: Optional[Union[TypeHazardReleasedIntoValue, ReleasedInto]] = Field(
        None, description="Environment which was contaminated."
    )
    cause: Optional[TypeHazardCauseValue] = Field(None, description="Cause of the hazmat release.")


class RemovalPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_removal_nonremoval: Literal["REMOVAL"] = Field("REMOVAL", title="Type Removal Nonremoval")
    gas_isolation: Optional[bool] = Field(
        None,
        description="Whether the space was isolated from the flow of heat and/or toxic gases.",
        title="Gas Isolation",
    )
    type: Literal["REMOVAL_FROM_STRUCTURE"] = Field(..., title="Type")
    room_type: Optional[Union[TypeRoomValue, RoomType]] = Field(
        None, description="Type of room/space from which the occupant was rescued."
    )
    elevation_type: Optional[Union[TypeRescueElevationValue, ElevationType]] = Field(
        None, description="Elevation at which the occupant was found."
    )
    rescue_path_type: Optional[Union[TypeRescuePathValue, RescuePathType]] = Field(
        None, description="How the firefighter was removed from the structure."
    )
    fire_removal: Optional[FireRemovalPayload] = None


class RescueResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    ffrescue_or_nonffrescue: Union[FfRescueResponse, NonFfRescueResponse] = Field(
        ...,
        description="Whether the rescue was _performed_ by a firefighter or nonfirefighter.",
        title="Ffrescue Or Nonffrescue",
    )
    presence_known: Optional[PresenceKnownResponse] = Field(
        None,
        description="Details of whether the presence of an occupant in need of rescue was known. Only possible if casualty-rescue type is `NONFF`",
    )
    mayday: Optional[MaydayResponse] = Field(
        None,
        description="Details of a mayday called during the incident. Only possible if casualty-rescue type is `FF`",
    )


class RoleActionResourcePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: TypeActionValue = Field(..., description="The type of action allowed on the resource.")
    resource: TypeResourceValue = Field(
        ..., description="The type of resource the action is allowed on."
    )


class RolePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )


class RoleResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )
    nuid: UUID = Field(..., description="The unique identifier for the role", title="Nuid")


class RoleWithEntitySetResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )
    nuid: UUID = Field(..., description="The unique identifier for the role", title="Nuid")
    entity_set: EntitySetResponse = Field(
        ..., description="The entity set associated with the role attachment"
    )


class SetCsstHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: CsstHazardPayload


class SetRelListTypeActionTacticValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeActionTacticValue] = Field(..., title="Value")


class SetRelListTypeAidNonfdValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeAidNonfdValue] = Field(..., title="Value")


class SetRelListTypeAlarmFireValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeAlarmFireValue] = Field(..., title="Value")


class SetRelListTypeAlarmOtherValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeAlarmOtherValue] = Field(..., title="Value")


class SetRelListTypeAlarmSmokeValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeAlarmSmokeValue] = Field(..., title="Value")


class SetRelListTypeCasualtyPpeValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: List[TypeCasualtyPpeValue] = Field(..., title="Value")


class SetRelListTypeDisplaceCauseValueRelExposureAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeDisplaceCauseValueRelExposure] = Field(..., title="Value")


class SetRelListTypeDisplaceCauseValueRelIncidentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeDisplaceCauseValueRelIncident] = Field(..., title="Value")


class SetRelListTypeEmerghazSuppressionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeEmerghazSuppressionValue] = Field(..., title="Value")


class SetRelListTypeFireInvestValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeFireInvestValue] = Field(..., title="Value")


class SetRelListTypeRescueActionValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeRescueActionValue] = Field(..., title="Value")


class SetRelListTypeRescueImpedimentValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeRescueImpedimentValue] = Field(..., title="Value")


class SetRelListTypeSpecialModifierValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeSpecialModifierValue] = Field(..., title="Value")


class SetRelListTypeSuppressApplianceValueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeSuppressApplianceValue] = Field(..., title="Value")


class SetRelListTypeSuppressCookingValue(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field("set", title="Action")
    value: List[TypeSuppressCookingValue] = Field(..., title="Value")


class SmokeAlarmAlertedPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_alerted: Literal["ALERTED"] = Field("ALERTED", title="Type Operation Alerted")
    type: Literal["OPERATED_ALERTED_OCCUPANT", "WORKING_ALERTED_OCCUPANT"] = Field(
        ..., title="Type"
    )
    occupant_action: Optional[Union[TypeOccupantResponseValue, OccupantAction]] = Field(
        None,
        description="If the alarm operated, describes the occupant reaction or inaction that resulted from the alarm signal.",
    )


class SmokeAlarmFailedPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_operation_alerted: Literal["FAILED"] = Field("FAILED", title="Type Operation Alerted")
    type: Literal["FAILED_TO_OPERATE"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeAlarmFailureValue, FailureReason2]] = Field(
        None, description="Reason for alarm failure."
    )


class SmokeAlarmOperationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    alerted_failed_other: Union[
        SmokeAlarmAlertedPayload, SmokeAlarmFailedPayload, SmokeAlarmOtherPayload
    ] = Field(..., discriminator="type", title="Alerted Failed Other")


class SmokeAlarmPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["PRESENT"] = Field(..., title="Type")
    working: Optional[bool] = Field(None, title="Working")
    alarm_types: Optional[List[TypeAlarmSmokeValue]] = Field(None, title="Alarm Types")
    operation: Optional[SmokeAlarmOperationPayload] = None


class SmokeAlarmResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    presence: Union[SmokeAlarmPresentPayload, SmokeAlarmNotPresentPayload] = Field(
        ..., title="Presence"
    )


class StationCreatedModifiedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")
    units: Optional[List[UnitCreatedModifiedResponse]] = Field(None, title="Units")


class StationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[Union[UnitPayload, CreateUnitPayload]]] = Field(None, title="Units")
    location: Optional[GeoPoint] = None
    neris_id: str = Field(..., title="Neris Id")


class StationResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[UnitResponse]] = Field(None, title="Units")
    location: Optional[str] = Field(None, title="Location")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")


class StationSummaryInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: str = Field(..., title="Neris Id")
    station_id: str = Field(..., title="Station Id")
    address_line_1: str = Field(..., title="Address Line 1")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    location: Optional[str] = Field(None, title="Location")


class StructureFireLocationDetailPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["STRUCTURE"] = Field("STRUCTURE", title="Type")
    progression_evident: Optional[bool] = Field(
        None,
        description="Whether the fire extended beyond the conditions found upon arrival.",
        title="Progression Evident",
    )
    floor_of_origin: int = Field(
        ...,
        description="Storey above or below ground of fire origin.",
        examples=[1, 2, 3],
        title="Floor Of Origin",
    )
    arrival_condition: TypeFireConditionArrivalValue = Field(
        ..., description="Fire conditions upon arriving on the scene of the incident."
    )
    damage_type: TypeFireBldgDamageValue = Field(
        ...,
        description="Rating of damage to the fire building of origin as selected from a list of values.",
    )
    room_of_origin_type: TypeRoomValue = Field(
        ..., description="Type of room of origin of the fire."
    )
    cause: TypeFireCauseInValue = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the structure fire.",
    )


class UserEntitySummaryInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    active: bool = Field(..., title="Active")
    name: str = Field(..., title="Name")
    neris_id: str = Field(..., title="Neris Id")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")


class UserInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    sub: UUID = Field(..., title="Sub")
    email: EmailStr = Field(..., title="Email")
    active: bool = Field(..., title="Active")
    username: UUID = Field(..., title="Username")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    status: UserStatus
    email_verified: bool = Field(..., title="Email Verified")
    roles: Optional[List[RoleWithEntitySetResponse]] = Field(None, title="Roles")


class UserRoleEntitySetAttachmentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    role: RoleResponse
    user: NerisApiAuthModelsUserResponse
    entity_set: EntitySetResponse


class FieldPatchActionActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    actions: Optional[Union[SetRelListTypeActionTacticValueAction, UnsetAction]] = Field(
        None, title="Actions"
    )


class FieldPatchAidActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    department_neris_id: Optional[SetNerisIdDeptStrAction] = None
    aid_type: Optional[FieldSetTypeAidValueAction] = None
    aid_direction: Optional[FieldSetTypeAidDirectionValueAction] = None


class FieldPatchCookingFireSuppressionPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetPresentAction] = None
    suppression_types: Optional[Union[SetRelListTypeSuppressCookingValue, UnsetAction]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[Union[FieldSetTypeSuppressOperationValueAction, UnsetAction]] = Field(
        None, title="Operation Type"
    )


class FieldPatchCrossStreetActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    number_prefix: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Number Prefix"
    )
    number: Optional[Union[SetIntAction, UnsetAction]] = Field(None, title="Number")
    number_suffix: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Number Suffix"
    )
    complete_number: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Complete Number"
    )
    distance_marker: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Distance Marker"
    )
    street_prefix_modifier: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Prefix Modifier"
    )
    street_prefix_direction: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Prefix Direction"
    )
    street_prefix: Optional[Union[FieldSetTypeLocSnPrePostValueAction, UnsetAction]] = Field(
        None, title="Street Prefix"
    )
    street_preposition_type_separator: Optional[
        Union[FieldSetTypeLocSnPreSepValueAction, UnsetAction]
    ] = Field(None, title="Street Preposition Type Separator")
    street: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Street")
    street_postfix: Optional[Union[FieldSetTypeLocSnPrePostValueAction, UnsetAction]] = Field(
        None, title="Street Postfix"
    )
    street_postfix_direction: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Postfix Direction"
    )
    street_postfix_modifier: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Postfix Modifier"
    )
    direction_of_travel: Optional[Union[FieldSetTypeLocSnDirectionValueAction, UnsetAction]] = (
        Field(None, title="Direction Of Travel")
    )
    cross_street_modifier: Optional[
        Union[FieldSetTypeLocationCrossStreetValueAction, UnsetAction]
    ] = Field(..., title="Cross Street Modifier")


class FieldPatchCsstHazardActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ignition_source: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Ignition Source"
    )
    lightning_suspected: Optional[Union[FieldSetTypeYesNoUnknownValueAction, UnsetAction]] = Field(
        None, title="Lightning Suspected"
    )
    grounded: Optional[Union[FieldSetTypeYesNoUnknownValueAction, UnsetAction]] = Field(
        None, title="Grounded"
    )


class FieldPatchDispatchUnitResponseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    med_responses: Optional[
        Union[
            List[Union[AppendMedResponseAction, RemoveElementAction, PatchMedResponseAction]],
            UnsetAction,
        ]
    ] = Field(None, title="Med Responses")
    point: Optional[Union[SetGeoPointAction, UnsetAction]] = Field(None, title="Point")
    unit_neris_id: Optional[Union[SetNerisIdUnitStrAction, UnsetAction]] = Field(
        None, title="Unit Neris Id"
    )
    reported_unit_id: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Reported Unit Id"
    )
    staffing: Optional[Union[SetIntAction, UnsetAction]] = Field(None, title="Staffing")
    dispatch: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Dispatch")
    enroute_to_scene: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Enroute To Scene"
    )
    on_scene: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="On Scene")
    canceled_enroute: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Canceled Enroute"
    )
    staging: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Staging")
    unit_clear: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Unit Clear")
    unable_to_dispatch: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Unable To Dispatch"
    )
    response_mode__unit: Optional[FieldSetTypeResponseModeUnitValueAction] = None
    response_mode__transport: Optional[FieldSetTypeResponseModeTransportValueAction] = None


class FieldPatchElectricHazardFireActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    reignition: Optional[Union[SetBoolAction, UnsetAction]] = Field(None, title="Reignition")
    suppression_types: Optional[SetRelListTypeEmerghazSuppressionValueAction] = None


class FieldPatchExternalExposureActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeExposureLocAction] = None
    item_type: Optional[Union[FieldSetTypeExposureItemValueAction, UnsetAction]] = Field(
        None, title="Item Type"
    )


class FieldPatchFfInjuryDetailsActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    job_classification: Optional[Union[FieldSetTypeJobClassificationValueAction, UnsetAction]] = (
        Field(None, title="Job Classification")
    )
    unit_neris_id: Optional[Union[SetNerisIdUnitStrAction, UnsetAction]] = Field(
        None, title="Unit Neris Id"
    )
    reported_unit_id: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Reported Unit Id"
    )
    unit_continuity: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Unit Continuity"
    )
    duty_type: Optional[Union[FieldSetTypeDutyValueAction, UnsetAction]] = Field(
        None, title="Duty Type"
    )
    action_type: Optional[Union[FieldSetTypeCasualtyActionValueAction, UnsetAction]] = Field(
        None, title="Action Type"
    )
    incident_command: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        [None], title="Incident Command"
    )
    incident_stage: Optional[Union[FieldSetTypeCasualtyTimelineValueAction, UnsetAction]] = Field(
        None, title="Incident Stage"
    )
    injury_ff_ppe: Optional[Union[SetRelListTypeCasualtyPpeValueAction, UnsetAction]] = Field(
        None, title="Injury Ff Ppe"
    )


class FieldPatchFireAlarmPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetPresentAction] = None
    alarm_types: Optional[Union[SetRelListTypeAlarmFireValueAction, UnsetAction]] = Field(
        None, title="Alarm Types"
    )
    operation_type: Optional[Union[FieldSetTypeAlarmOperationValueAction, UnsetAction]] = Field(
        None, title="Operation Type"
    )


class FieldPatchFireRemovalActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    relative_suppression_time: Optional[Union[FieldSetTypeSuppressTimeValueAction, UnsetAction]] = (
        Field(None, title="Relative Suppression Time")
    )


class FieldPatchFireSuppressionEffectiveActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeSuppressOperationEffectiveAction] = None
    sprinklers_activated: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Sprinklers Activated"
    )


class FieldPatchFireSuppressionFailedActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeSuppressOperationFailedAction] = None
    failure_reason: Optional[Union[FieldSetTypeSuppressNoOperationValueAction, UnsetAction]] = (
        Field(None, title="Failure Reason")
    )


class FieldPatchFireSuppressionIneffectiveActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeSuppressOperationIneffectiveAction] = None
    failure_reason: Optional[Union[FieldSetTypeSuppressNoOperationValueAction, UnsetAction]] = (
        Field(None, title="Failure Reason")
    )
    sprinklers_activated: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Sprinklers Activated"
    )


class FieldPatchFireSuppressionTypeActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    fire_suppression_type: Optional[FieldSetTypeSuppressFireValueAction] = None
    full_partial: Optional[Union[FieldSetTypeFullPartialValueAction, UnsetAction]] = Field(
        None, title="Full Partial"
    )


class FieldPatchIncidentTypeActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    incident_type: Optional[FieldSetTypeIncidentValueAction] = None
    primary_type: Optional[Union[SetBoolAction, UnsetAction]] = Field(None, title="Primary Type")


class FieldPatchIncidentUnitResponseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    med_responses: Optional[
        Union[
            List[Union[AppendMedResponseAction, RemoveElementAction, PatchMedResponseAction]],
            UnsetAction,
        ]
    ] = Field(None, title="Med Responses")
    point: Optional[Union[SetGeoPointAction, UnsetAction]] = Field(None, title="Point")
    unit_neris_id: Optional[Union[SetNerisIdUnitStrAction, UnsetAction]] = Field(
        None, title="Unit Neris Id"
    )
    reported_unit_id: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Reported Unit Id"
    )
    staffing: Optional[Union[SetIntAction, UnsetAction]] = Field(None, title="Staffing")
    dispatch: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Dispatch")
    enroute_to_scene: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Enroute To Scene"
    )
    on_scene: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="On Scene")
    canceled_enroute: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Canceled Enroute"
    )
    staging: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Staging")
    unit_clear: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(None, title="Unit Clear")
    unable_to_dispatch: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Unable To Dispatch"
    )
    response_mode__unit: Optional[FieldSetTypeResponseModeUnitValueAction] = None
    response_mode__transport: Optional[FieldSetTypeResponseModeTransportValueAction] = None


class FieldPatchInternalExposureActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeInternalExposureLocAction] = None


class FieldPatchLocationUseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    use_type: Optional[Union[FieldSetTypeLocationUseValueAction, UnsetAction]] = Field(
        None, title="Use Type"
    )
    vacancy_cause: Optional[Union[FieldSetTypeVacancyValueAction, UnsetAction]] = Field(
        None, title="Vacancy Cause"
    )
    secondary_use: Optional[Union[FieldSetTypeLocationUseValueAction, UnsetAction]] = Field(
        None, title="Secondary Use"
    )
    in_use: Optional[Union[SetInuseAction, UnsetAction]] = Field(None, title="In Use")


class FieldPatchMedicalActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    patient_care_report_id: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Patient Care Report Id"
    )
    patient_care_evaluation: Optional[FieldSetTypeMedicalPatientCareValueAction] = None
    patient_status: Optional[Union[FieldSetTypeMedicalPatientStatusValueAction, UnsetAction]] = (
        Field(None, title="Patient Status")
    )
    transport_disposition: Optional[Union[FieldSetTypeMedicalTransportValueAction, UnsetAction]] = (
        Field(None, title="Transport Disposition")
    )


class FieldPatchNoactionActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    noaction_type: Optional[Union[FieldSetTypeNoactionValueAction, UnsetAction]] = Field(
        None, title="Noaction Type"
    )


class FieldPatchNoinjuryActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: FieldSetTypeCasualtyNoinjuryAction


class FieldPatchNonFfRescueActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeRescueNonffrescueAction] = None


class FieldPatchOtherAlarmPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetPresentAction] = None
    alarm_types: Optional[Union[SetRelListTypeAlarmOtherValueAction, UnsetAction]] = Field(
        None, title="Alarm Types"
    )


class FieldPatchOtherPowergenHazardActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeEmerghazOtherPowergenAction] = None


class FieldPatchOutsideFireLocationDetailActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    cause: Optional[FieldSetTypeFireCauseOutValueAction] = None
    acres_burned: Optional[Union[SetFloatAction, UnsetAction]] = Field(None, title="Acres Burned")


class FieldPatchPresenceKnownActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence_known_type: Optional[
        Union[FieldSetTypeRescuePresenceKnownValueAction, UnsetAction]
    ] = Field(None, title="Presence Known Type")


class FieldPatchPvPowergenHazardActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeEmerghazPvPowergenAction] = None
    source_or_target: Optional[Union[FieldSetTypeEmerghazPvIgnValueAction, UnsetAction]] = Field(
        None, title="Source Or Target"
    )
    pv_type: Optional[Union[FieldSetTypeEmerghazPvValueAction, UnsetAction]] = Field(
        None, title="Pv Type"
    )


class FieldPatchReleaseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    estimated_amount: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Estimated Amount"
    )
    unit_of_measurement: Optional[Union[FieldSetTypeHazardUnitValueAction, UnsetAction]] = Field(
        None, title="Unit Of Measurement"
    )
    physical_state: Optional[Union[FieldSetTypeHazardPhysicalStateValueAction, UnsetAction]] = (
        Field(None, title="Physical State")
    )
    released_into: Optional[Union[FieldSetTypeHazardReleasedIntoValueAction, UnsetAction]] = Field(
        None, title="Released Into"
    )
    cause: Optional[Union[FieldSetTypeHazardCauseValueAction, UnsetAction]] = Field(
        None, title="Cause"
    )


class FieldPatchRescueMaydayActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mayday: Literal[True] = Field(True, title="Mayday")
    relative_suppression_time: Optional[Union[FieldSetTypeSuppressTimeValueAction, UnsetAction]] = (
        Field(None, title="Relative Suppression Time")
    )
    rit_activated: Optional[Union[SetBoolAction, UnsetAction]] = Field(None, title="Rit Activated")


class FieldPatchSmokeAlarmOperationAlertedActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeAlarmOperationAlertedAction] = None
    occupant_action: Optional[Union[FieldSetTypeOccupantResponseValueAction, UnsetAction]] = Field(
        None, title="Occupant Action"
    )


class FieldPatchSmokeAlarmOperationFailedActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeAlarmOperationFailedAction] = None
    failure_reason: Optional[Union[FieldSetTypeAlarmFailureValueAction, UnsetAction]] = Field(
        None, title="Failure Reason"
    )


class FieldPatchStructureFireLocationDetailActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    arrival_condition: Optional[FieldSetTypeFireConditionArrivalValueAction] = None
    progression_evident: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Progression Evident"
    )
    damage_type: Optional[FieldSetTypeFireBldgDamageValueAction] = None
    floor_of_origin: Optional[SetIntAction] = None
    room_of_origin_type: Optional[FieldSetTypeRoomValueAction] = None
    cause: Optional[FieldSetTypeFireCauseInValueAction] = None


class NerisApiIncidentModelsDispatchPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    dispatch_center_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="This 4 digit ID is a unique identifier for each PSAP dispatch center.",
        examples=["1234"],
        title="Dispatch Center Id",
    )
    incident_number: constr(pattern=r"[\w\d\-\:]+") = Field(
        ...,
        description="Unique identifier for the event that requires dispatch of department resources.",
        examples=["FDID_20230814000001", "FDID_20230814000002"],
        title="Incident Number",
    )
    determinant_code: Optional[constr(min_length=1, max_length=8)] = Field(
        None,
        description="Output code from dispatch protocol based on the call specifics.",
        examples=["17-D-5"],
        title="Determinant Code",
    )
    incident_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Department-specific incident code pulled from CAD; levels up into incident_type.",
        examples=["STRF1", "ALS2"],
        title="Incident Code",
    )
    disposition: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Closing disposition of call set by dispatcher if call changes from initial dispatch.",
        examples=["No Patient Found", "Building Secure"],
        title="Disposition",
    )
    automatic_alarm: Optional[bool] = Field(
        None,
        description="Identifies if the call is an automatic alarm.",
        title="Automatic Alarm",
    )
    call_arrival: AwareDatetime = Field(
        ...,
        description="Timestamp at which call arrives at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Arrival",
    )
    call_answered: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which call is answered at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Answered",
    )
    call_create: AwareDatetime = Field(
        ...,
        description="Timestamp at which call processing begins.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Create",
    )
    location: LocationPayload
    point: Optional[GeoPoint] = None
    comments: Optional[List[CommentPayload]] = Field(None, title="Comments")
    unit_responses: List[DispatchUnitResponsePayload] = Field(..., title="Unit Responses")
    tactic_timestamps: Optional[DispatchTacticTimestampsPayload] = None


class NerisApiIncidentModelsDispatchResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    dispatch_center_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="This 4 digit ID is a unique identifier for each PSAP dispatch center.",
        examples=["1234"],
        title="Dispatch Center Id",
    )
    incident_number: constr(pattern=r"[\w\d\-\:]+") = Field(
        ...,
        description="Unique identifier for the event that requires dispatch of department resources.",
        examples=["FDID_20230814000001", "FDID_20230814000002"],
        title="Incident Number",
    )
    determinant_code: Optional[constr(min_length=1, max_length=8)] = Field(
        None,
        description="Output code from dispatch protocol based on the call specifics.",
        examples=["17-D-5"],
        title="Determinant Code",
    )
    incident_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Department-specific incident code pulled from CAD; levels up into incident_type.",
        examples=["STRF1", "ALS2"],
        title="Incident Code",
    )
    disposition: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Closing disposition of call set by dispatcher if call changes from initial dispatch.",
        examples=["No Patient Found", "Building Secure"],
        title="Disposition",
    )
    automatic_alarm: Optional[bool] = Field(
        None,
        description="Identifies if the call is an automatic alarm.",
        title="Automatic Alarm",
    )
    call_arrival: AwareDatetime = Field(
        ...,
        description="Timestamp at which call arrives at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Arrival",
    )
    call_answered: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which call is answered at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Answered",
    )
    call_create: AwareDatetime = Field(
        ...,
        description="Timestamp at which call processing begins.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Create",
    )
    location: LocationResponse
    comments: Optional[List[CommentResponse]] = Field(None, title="Comments")
    tactic_timestamps: Optional[DispatchTacticTimestampsResponse] = None
    unit_responses: List[DispatchUnitResponseResponse] = Field(..., title="Unit Responses")
    point: Optional[str] = Field(None, title="Point")


class ActionTacticPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action_noaction: Union[ActionPayload, NoactionPayload] = Field(
        ..., discriminator="type", title="Action Noaction"
    )


class AppendCrossStreetElementAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: CrossStreetPayload


class AppendDispatchUnitResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: DispatchUnitResponsePayload


class AppendElectricHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: ElectricHazardPayload


class AppendIncidentTypeAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: IncidentTypePayload


class AppendIncidentUnitResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: IncidentUnitResponsePayload


class AppendLocationElementAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: LocationPayload


class AppendMedicalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: MedicalPayload


class AppendPvPowergenHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: PvPowergenHazardPayload


class CasualtyPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    injury_or_noninjury: Union[InjuryPayload, NoinjuryPayload] = Field(
        ..., discriminator="type", title="Injury Or Noninjury"
    )


class CasualtyRescueResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    type: Type2 = Field(
        ...,
        description="Whether the person _rescued/sustaining a casualty_ is a firefighter or nonfirefighter.",
        title="Type",
    )
    birth_month_year: Optional[constr(min_length=7, max_length=7)] = Field(
        None,
        description="MM/YYYY formatted month and year of birth of the person(s) injured or rescued.",
        examples=["06/1972"],
        title="Birth Month Year",
    )
    rank: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description="Rank of firefighter.", examples=["Captain"], title="Rank"
    )
    years_of_service: Optional[float] = Field(
        None, description="Years of service.", examples=["2"], title="Years Of Service"
    )
    casualty: Optional[CasualtyResponse] = None
    rescue: Optional[RescueResponse] = None
    gender: Optional[str] = Field(
        None, description="Gender of the person(s) injured or rescued.", title="Gender"
    )
    race: Optional[str] = Field(
        None, description="Race of the person(s) injured or rescued.", title="Race"
    )


class ChemicalPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Name of the chemical/material involved in the incident.",
        title="Name",
    )
    release_occurred: bool = Field(
        ..., description="Whether the chemical was released.", title="Release Occurred"
    )
    release: Optional[ReleasePayload] = Field(
        None,
        description="Details on a chemical release. Only possible if `chemical_release` is `True`.",
    )
    dot_class: TypeHazardDotValue = Field(
        ..., description="Department of Transportation Hazard Classification."
    )


class ChemicalResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    name: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Name of the chemical/material involved in the incident.",
        title="Name",
    )
    release_occurred: bool = Field(
        ..., description="Whether the chemical was released.", title="Release Occurred"
    )
    release: Optional[ReleaseResponse] = None
    dot_class: str = Field(
        ...,
        description="Department of Transportation Hazard Classification.",
        title="Dot Class",
    )


class CookingFireSuppressionPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Union[
        CookingFireSuppressionPresentPayload, CookingFireSuppressionNotPresentPayload
    ] = Field(..., discriminator="type", title="Presence")


class CreateStationPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[CreateUnitPayload]] = Field(None, title="Units")
    location: Optional[GeoPoint] = None


class DepartmentCreatedModifiedResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")
    stations: Optional[List[StationCreatedModifiedResponse]] = Field(None, title="Stations")


class DepartmentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[NerisApiEntityModelsDispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    stations: Optional[List[Union[StationPayload, CreateStationPayload]]] = Field(
        None, title="Stations"
    )
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class DepartmentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[str] = Field(None, title="Department Type")
    entity_type: Optional[str] = Field(None, title="Entity Type")
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationResponse] = None
    dispatch: Optional[NerisApiEntityModelsDispatchResponse] = None
    staffing: Optional[StaffingResponse] = None
    assessment: Optional[AssessmentResponse] = None
    shift: Optional[ShiftResponse] = None
    fire_services: Optional[List[str]] = Field(None, title="Fire Services")
    ems_services: Optional[List[str]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[str]] = Field(None, title="Investigation Services")
    stations: Optional[List[StationResponse]] = Field(None, title="Stations")
    location: Optional[str] = Field(None, title="Location")
    region_sets: Optional[List[RegionSetResponse]] = Field(None, title="Region Sets")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    last_modified: AwareDatetime = Field(..., title="Last Modified")


class EntitySummaryInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    name: str = Field(..., title="Name")
    neris_id: str = Field(..., title="Neris Id")
    address_line_1: str = Field(..., title="Address Line 1")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    department_type: str = Field(..., title="Department Type")
    website: Optional[str] = Field(..., title="Website")
    location: Optional[str] = Field(None, title="Location")
    region_sets: Optional[List[RegionSetResponse]] = Field(None, title="Region Sets")
    stations: Optional[List[StationSummaryInfoResponse]] = Field(None, title="Stations")


class ExposurePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    displacement_count: Optional[int] = Field(
        None, description="Number of people displaced.", title="Displacement Count"
    )
    location_detail: Union[ExternalExposurePayload, InternalExposurePayload] = Field(
        ..., discriminator="type", title="Location Detail"
    )
    location: LocationPayload
    location_use: Optional[LocationUsePayload] = None
    point: Optional[GeoPoint] = None
    polygon: Optional[GeoMultipolygon] = None
    damage_type: TypeExposureDamageValue = Field(
        ..., description="Rating of damage to the exposure."
    )
    displacement_causes: Optional[List[TypeDisplaceCauseValueRelExposure]] = Field(
        None, description="Causes of displacement.", title="Displacement Causes"
    )


class FfRescuePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type_ffrescue: Literal["FFRESCUE"] = Field("FFRESCUE", title="Type Ffrescue")
    actions: Optional[Union[Union[List[TypeRescueActionValue], Actions2], Actions2]] = Field(
        None, description="Action taken to support the rescue.", title="Actions"
    )
    removal_or_nonremoval: Union[RemovalPayload, NonremovalPayload] = Field(
        ..., discriminator="type", title="Removal Or Nonremoval"
    )
    type: Literal[
        "EVAC_ASSISTED_BY_FIREFIGHTER",
        "FIREFIGHTER_ASSISTED_EVAC",
        "FIREFIGHTER_RESCUED",
        "RESCUED_BY_FF_RIT",
        "RESCUED_BY_FIREFIGHTER",
    ] = Field(..., title="Type")
    impediments: Optional[
        Union[Union[List[TypeRescueImpedimentValue], Impediments], Impediments]
    ] = Field(
        None,
        description="Whether conditions impacted the ability of rescue.",
        title="Impediments",
    )


class FireAlarmPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Union[FireAlarmPresentPayload, FireAlarmNotPresentPayload] = Field(
        ..., discriminator="type", title="Presence"
    )


class FirePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location_detail: Union[StructureFireLocationDetailPayload, OutsideFireLocationDetailPayload] = (
        Field(..., discriminator="type", title="Location Detail")
    )
    water_supply: TypeWaterSupplyValue = Field(
        ..., description="Describes the type of water supply utilized for the incident."
    )
    investigation_needed: TypeFireInvestNeedValue = Field(
        ...,
        description="Assessment by incident commander and/or officer in charge of the incident as to whether the fire necessitated a formal fire investigation.",
    )
    investigation_types: Union[List[TypeFireInvestValue], InvestigationTypes] = Field(
        ...,
        description="Categorizes the general type of investigation completed at the structure fire incident.",
        title="Investigation Types",
    )
    suppression_appliances: Optional[
        Union[
            Union[List[TypeSuppressApplianceValue], SuppressionAppliances],
            SuppressionAppliances,
        ]
    ] = Field(
        None,
        description="Describes the appliances used for suppression.",
        title="Suppression Appliances",
    )


class FireSuppressionPresentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["PRESENT"] = Field(..., title="Type")
    suppression_types: Optional[List[FireSuppressionTypePayload]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[FireSuppressionOperationPayload] = None


class HazsitPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    evacuated: int = Field(
        ...,
        description="Number of occupants/businesses evacuated during the incident response.",
        examples=[2],
        title="Evacuated",
    )
    chemicals: Optional[List[ChemicalPayload]] = Field(None, title="Chemicals")
    disposition: TypeHazardDispositionValue = Field(
        ..., description="Outcome of the hazmat incident."
    )


class HazsitResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    incident_neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Incident Neris Id",
    )
    evacuated: int = Field(
        ...,
        description="Number of occupants/businesses evacuated during the incident response.",
        examples=[2],
        title="Evacuated",
    )
    chemicals: Optional[List[ChemicalResponse]] = Field(None, title="Chemicals")
    disposition: str = Field(
        ..., description="Outcome of the hazmat incident.", title="Disposition"
    )


class IncidentBasePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    animals_rescued: Optional[int] = Field(
        None,
        description="Total number of animals rescued.",
        examples=[1],
        title="Animals Rescued",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    impediment_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of any obstacles that impacted the incident.",
        title="Impediment Narrative",
    )
    outcome_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of the final disposition of the incident.",
        title="Outcome Narrative",
    )
    displacement_count: Optional[int] = Field(
        None, description="Number of people displaced.", title="Displacement Count"
    )
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    incident_number: constr(pattern=r"[\w\d\-\:]+") = Field(
        ...,
        description="The department's internal ID for the incident.",
        examples=["IN20240703HAWV"],
        title="Incident Number",
    )
    displacement_causes: Optional[List[TypeDisplaceCauseValueRelIncident]] = Field(
        None, description="Causes of displacement.", title="Displacement Causes"
    )
    point: Optional[GeoPoint] = None
    multipolygon: Optional[GeoMultipolygon] = None
    location: LocationPayload
    location_use: Optional[LocationUsePayload] = None


class IncidentResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        description="NERIS ID of the incident. This is comprised of the department NERIS ID concatenated with `dispatch.internal_id` and the epoch time of `dispatch.call_create` in the record as initially submitted. An incident's NERIS_ID is immutable, and so should not be relied upon for extraction of `internal_id` or `call_create`, as these attributes could have been updated.",
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Neris Id",
    )
    last_modified: AwareDatetime = Field(
        ...,
        description="The date and time the top-level item was created or updated in the system.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Last Modified",
    )
    base: IncidentBaseResponse
    incident_types: List[IncidentTypeResponse] = Field(
        ...,
        description="\n                - Incidents with a `FIRE` type require all fire suppression and alarm modules: smoke_alarm, fire_alarm, other_alarm, fire_suppression.\n                - Incidents with a `FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE` type require the cooking_fire_suppression module.\n            ",
        title="Incident Types",
    )
    special_modifiers: Optional[List[SpecialModifierResponse]] = Field(
        None, title="Special Modifiers"
    )
    aids: Optional[List[AidResponse]] = Field(None, title="Aids")
    nonfd_aids: Optional[List[NonfdAidResponse]] = Field(None, title="Nonfd Aids")
    actions_tactics: Optional[ActionTacticResponse] = None
    dispatch: NerisApiIncidentModelsDispatchResponse
    tactic_timestamps: Optional[IncidentTacticTimestampsResponse] = None
    unit_responses: Optional[List[UnitResponseResponse]] = Field(None, title="Unit Responses")
    exposures: Optional[List[ExposureResponse]] = Field(None, title="Exposures")
    casualty_rescues: Optional[List[CasualtyRescueResponse]] = Field(None, title="Casualty Rescues")
    fire_detail: Optional[FireResponse] = Field(
        None,
        description="Fire module. Only possible if at least one `FIRE` incident type is present",
    )
    hazsit_detail: Optional[HazsitResponse] = Field(
        None,
        description="Hazsit module. Only possible if at least one `HAZSIT` incident type is present",
    )
    medical_details: Optional[List[MedicalResponse]] = Field(
        None,
        description="Medical module(s). Only possible if at least one `MEDICAL` incident type is present",
        title="Medical Details",
    )
    smoke_alarm: Optional[SmokeAlarmResponse] = None
    fire_alarm: Optional[FireAlarmResponse] = None
    other_alarm: Optional[OtherAlarmResponse] = None
    fire_suppression: Optional[FireSuppressionResponse] = None
    cooking_fire_suppression: Optional[CookingFireSuppressionResponse] = None
    electric_hazards: Optional[List[ElectricHazardResponse]] = Field(None, title="Electric Hazards")
    powergen_hazards: Optional[List[PowergenHazardResponse]] = Field(None, title="Powergen Hazards")
    csst_hazard: Optional[CsstHazardPayload] = None


class ListEntitiesSummaryInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    entities: List[EntitySummaryInfoResponse] = Field(..., title="Entities")


class ListIncidentsResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    incidents: List[IncidentResponse] = Field(..., title="Incidents")
    prev_cursor: Optional[str] = Field(None, title="Prev Cursor")
    next_cursor: Optional[str] = Field(None, title="Next Cursor")


class ListUserInfoResponse(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    users: Optional[List[UserInfoResponse]] = Field(None, title="Users")


class OtherAlarmPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Union[OtherAlarmPresentPayload, OtherAlarmNotPresentPayload] = Field(
        ..., discriminator="type", title="Presence"
    )


class PatchActionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchActionActionProperties


class PatchAidAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchAidActionProperties


class PatchCookingFireSuppressionPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCookingFireSuppressionPresentActionProperties


class PatchCrossStreetAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCrossStreetActionProperties


class PatchCsstHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCsstHazardActionProperties


class PatchDepartmentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: Optional[str] = Field(None, title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: Optional[str] = Field(None, title="City")
    state: Optional[NerisSharedTypesStatesTerrs1] = None
    zip_code: Optional[str] = Field(None, title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: Optional[str] = Field(None, title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[NerisApiEntityModelsDispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class PatchDispatchUnitResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchDispatchUnitResponseActionProperties


class PatchElectricHazardFireAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchElectricHazardFireActionProperties


class PatchExternalExposureAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchExternalExposureActionProperties


class PatchFfInjuryDetailsAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFfInjuryDetailsActionProperties


class PatchFireAlarmPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireAlarmPresentActionProperties


class PatchFireRemovalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireRemovalActionProperties


class PatchFireSuppressionEffectiveAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionEffectiveActionProperties


class PatchFireSuppressionFailedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionFailedActionProperties


class PatchFireSuppressionIneffectiveAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionIneffectiveActionProperties


class PatchFireSuppressionTypeAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionTypeActionProperties


class PatchIncidentTypeAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchIncidentTypeActionProperties


class PatchIncidentUnitResponseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchIncidentUnitResponseActionProperties


class PatchInternalExposureAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchInternalExposureActionProperties


class PatchLocationUseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchLocationUseActionProperties


class PatchMedicalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchMedicalActionProperties


class PatchNoactionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchNoactionActionProperties


class PatchNoinjuryAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchNoinjuryActionProperties


class PatchNonFfRescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchNonFfRescueActionProperties


class PatchOtherAlarmPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchOtherAlarmPresentActionProperties


class PatchOtherPowergenHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchOtherPowergenHazardActionProperties


class PatchOutsideFireLocationDetailAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchOutsideFireLocationDetailActionProperties


class PatchPresenceKnownAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchPresenceKnownActionProperties


class PatchPvPowergenHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchPvPowergenHazardActionProperties


class PatchReleaseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchReleaseActionProperties


class PatchRescueMaydayAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchRescueMaydayActionProperties


class PatchSmokeAlarmOperationAlertedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmOperationAlertedActionProperties


class PatchSmokeAlarmOperationFailedAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmOperationFailedActionProperties


class PatchStructureFireLocationDetailAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchStructureFireLocationDetailActionProperties


class PowergenHazardPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    pv_other: Union[PvPowergenHazardPayload, OtherPowergenHazardPayload] = Field(
        ..., discriminator="type", title="Pv Other"
    )


class RescuePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence_known: Optional[PresenceKnownPayload] = Field(
        None,
        description="Details of whether the presence of an occupant in need of rescue was known. Only possible if casualty-rescue type is `NONFF`",
    )
    mayday: Optional[MaydayPayload] = Field(
        None,
        description="Details of a mayday called during the incident. Only possible if casualty-rescue type is `FF`",
    )
    ffrescue_or_nonffrescue: Union[FfRescuePayload, NonFfRescuePayload] = Field(
        ...,
        description="Whether the rescue was _performed_ by a firefighter or nonfirefighter.",
        discriminator="type",
        title="Ffrescue Or Nonffrescue",
    )


class SetActionTacticAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: ActionTacticPayload


class SetCookingFireSuppressionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: CookingFireSuppressionPayload


class SetDispatchAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: NerisApiIncidentModelsDispatchPayload


class SetFireAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: FirePayload


class SetFireAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: FireAlarmPayload


class SetHazsitAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: HazsitPayload


class SetIncidentBaseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: IncidentBasePayload


class SetOtherAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: OtherAlarmPayload


class SmokeAlarmPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Union[SmokeAlarmPresentPayload, SmokeAlarmNotPresentPayload] = Field(
        ..., discriminator="type", title="Presence"
    )


class FieldPatchActionTacticActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action_noaction: Optional[Union[PatchActionAction, PatchNoactionAction]] = Field(
        None, title="Action Noaction"
    )


class FieldPatchChemicalActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    dot_class: Optional[FieldSetTypeHazardDotValueAction] = None
    name: Optional[SetSimpleStrAction] = None
    release_occurred: Optional[SetBoolAction] = None
    release: Optional[Union[PatchReleaseAction, UnsetAction]] = Field(None, title="Release")


class FieldPatchCookingFireSuppressionActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Optional[
        Union[
            PatchCookingFireSuppressionPresentAction,
            PatchCookingFireSuppressionNotPresentAction,
        ]
    ] = Field(None, title="Presence")


class FieldPatchElectricHazardActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeEmerghazElecValueAction] = None
    source_or_target: Optional[Union[FieldSetTypeSourceTargetValueAction, UnsetAction]] = Field(
        None, title="Source Or Target"
    )
    involved_in_crash: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Involved In Crash"
    )
    fire_details: Optional[Union[PatchElectricHazardFireAction, UnsetAction]] = Field(
        None, title="Fire Details"
    )


class FieldPatchFireActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location_detail: Optional[
        Union[PatchStructureFireLocationDetailAction, PatchOutsideFireLocationDetailAction]
    ] = Field(None, title="Location Detail")
    water_supply: Optional[FieldSetTypeWaterSupplyValueAction] = None
    investigation_needed: Optional[FieldSetTypeFireInvestNeedValueAction] = None
    investigation_types: Optional[SetRelListTypeFireInvestValueAction] = None
    suppression_appliances: Optional[
        Union[SetRelListTypeSuppressApplianceValueAction, UnsetAction]
    ] = Field(None, title="Suppression Appliances")


class FieldPatchFireAlarmActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Optional[Union[PatchFireAlarmPresentAction, PatchFireAlarmNotpresentAction]] = Field(
        None, title="Presence"
    )


class FieldPatchFireSuppressionOperationActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    effectiveness: Optional[
        Union[
            PatchFireSuppressionEffectiveAction,
            PatchFireSuppressionIneffectiveAction,
            PatchFireSuppressionFailedAction,
        ]
    ] = Field(None, title="Effectiveness")


class FieldPatchInjuryActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: FieldSetTypeCasualtyAction
    cause: Optional[Union[FieldSetTypeCasualtyCauseValueAction, UnsetAction]] = Field(
        None, title="Cause"
    )
    ff_injury_details: Optional[Union[PatchFfInjuryDetailsAction, UnsetAction]] = Field(
        None, title="Ff Injury Details"
    )


class FieldPatchLocationActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    additional_attributes: Optional[Union[SetDictAction, UnsetAction]] = Field(
        None, title="Additional Attributes"
    )
    place_type: Optional[Union[FieldSetTypeLocPlaceValueAction, UnsetAction]] = Field(
        None, title="Place Type"
    )
    postal_community: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Postal Community"
    )
    neighborhood_community: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Neighborhood Community"
    )
    unincorporated_community: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Unincorporated Community"
    )
    incorporated_municipality: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Incorporated Municipality"
    )
    county: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="County")
    state: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="State")
    postal_code: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Postal Code")
    postal_code_extension: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Postal Code Extension"
    )
    country: Optional[Union[FieldSetTypeLocCspCountryValueAction, UnsetAction]] = Field(
        None, title="Country"
    )
    street_prefix_modifier: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Prefix Modifier"
    )
    street_prefix_direction: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Prefix Direction"
    )
    street_prefix: Optional[Union[FieldSetTypeLocSnPrePostValueAction, UnsetAction]] = Field(
        None, title="Street Prefix"
    )
    street_preposition_type_separator: Optional[
        Union[FieldSetTypeLocSnPreSepValueAction, UnsetAction]
    ] = Field(None, title="Street Preposition Type Separator")
    street: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Street")
    street_postfix: Optional[Union[FieldSetTypeLocSnPrePostValueAction, UnsetAction]] = Field(
        None, title="Street Postfix"
    )
    street_postfix_direction: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Postfix Direction"
    )
    street_postfix_modifier: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Street Postfix Modifier"
    )
    direction_of_travel: Optional[Union[FieldSetTypeLocSnDirectionValueAction, UnsetAction]] = (
        Field(None, title="Direction Of Travel")
    )
    number_prefix: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Number Prefix"
    )
    number: Optional[Union[SetIntAction, UnsetAction]] = Field(None, title="Number")
    number_suffix: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Number Suffix"
    )
    complete_number: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Complete Number"
    )
    distance_marker: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Distance Marker"
    )
    structure: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Structure")
    subsite: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Subsite")
    site: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Site")
    wing: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Wing")
    floor: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Floor")
    unit_prefix: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Unit Prefix")
    unit_value: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Unit Value")
    room: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Room")
    section: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Section")
    row: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Row")
    seat: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Seat")
    additional_info: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Additional Info"
    )
    marker: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Marker")
    cross_streets: Optional[
        List[
            Union[
                PatchCrossStreetAction,
                AppendCrossStreetElementAction,
                RemoveElementAction,
            ]
        ]
    ] = Field(None, description="List of actions to take", title="Cross Streets")
    location_aliases: Optional[List[Union[AppendLocationElementAction, RemoveElementAction]]] = (
        Field(None, description="List of actions to take", title="Location Aliases")
    )


class FieldPatchOtherAlarmActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Optional[Union[PatchOtherAlarmPresentAction, PatchOtherAlarmNotpresentAction]] = (
        Field(None, title="Presence")
    )


class FieldPatchRemovalActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["REMOVAL"] = Field("REMOVAL", title="Type")
    fire_removal: Optional[Union[PatchFireRemovalAction, UnsetAction]] = Field(
        None, title="Fire Removal"
    )
    room_type: Optional[Union[FieldSetTypeRoomValueAction, UnsetAction]] = Field(
        None, title="Room Type"
    )
    elevation_type: Optional[Union[FieldSetTypeRescueElevationValueAction, UnsetAction]] = Field(
        None, title="Elevation Type"
    )
    gas_isolation: Optional[Union[SetBoolAction, UnsetAction]] = Field(None, title="Gas Isolation")
    rescue_path_type: Optional[Union[FieldSetTypeRescuePathValueAction, UnsetAction]] = Field(
        None, title="Rescue Path Type"
    )


class FieldPatchSmokeAlarmOperationActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    alerted_failed: Optional[
        Union[PatchSmokeAlarmOperationAlertedAction, PatchSmokeAlarmOperationFailedAction]
    ] = Field(None, title="Alerted Failed")


class AppendChemicalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: ChemicalPayload


class AppendExposureAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: ExposurePayload


class CasualtyRescuePayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Type2 = Field(
        ...,
        description="Whether the person _rescued/sustaining a casualty_ is a firefighter or nonfirefighter.",
        title="Type",
    )
    birth_month_year: Optional[constr(min_length=7, max_length=7)] = Field(
        None,
        description="MM/YYYY formatted month and year of birth of the person(s) injured or rescued.",
        examples=["06/1972"],
        title="Birth Month Year",
    )
    rank: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description="Rank of firefighter.", examples=["Captain"], title="Rank"
    )
    years_of_service: Optional[float] = Field(
        None, description="Years of service.", examples=["2"], title="Years Of Service"
    )
    casualty: Optional[CasualtyPayload] = None
    rescue: Optional[RescuePayload] = None
    gender: Optional[Union[TypeGenderValue, Gender]] = Field(
        None, description="Gender of the person(s) injured or rescued."
    )
    race: Optional[Union[TypeRaceValue, Race]] = Field(
        None, description="Race of the person(s) injured or rescued."
    )


class CreateDepartmentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[NerisApiEntityModelsDispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    stations: Optional[List[CreateStationPayload]] = Field(None, title="Stations")
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class FireSuppressionPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Union[FireSuppressionPresentPayload, FireSuppressionNotPresentPayload] = Field(
        ..., discriminator="type", title="Presence"
    )


class IncidentPayload(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    base: IncidentBasePayload
    incident_types: List[IncidentTypePayload] = Field(
        ...,
        description="\n                - Incidents with a `FIRE` type require all fire suppression and alarm modules: smoke_alarm, fire_alarm, other_alarm, fire_suppression.\n                - Incidents with a `FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE` type require the cooking_fire_suppression module.\n            ",
        title="Incident Types",
    )
    special_modifiers: Optional[List[TypeSpecialModifierValue]] = Field(
        None, title="Special Modifiers"
    )
    aids: Optional[List[AidPayload]] = Field(None, title="Aids")
    nonfd_aids: Optional[List[TypeAidNonfdValue]] = Field(None, title="Nonfd Aids")
    actions_tactics: Optional[ActionTacticPayload] = None
    dispatch: NerisApiIncidentModelsDispatchPayload
    tactic_timestamps: Optional[IncidentTacticTimestampsPayload] = None
    unit_responses: Optional[List[IncidentUnitResponsePayload]] = Field(
        None, title="Unit Responses"
    )
    exposures: Optional[List[ExposurePayload]] = Field(None, title="Exposures")
    casualty_rescues: Optional[List[CasualtyRescuePayload]] = Field(None, title="Casualty Rescues")
    fire_detail: Optional[FirePayload] = Field(
        None,
        description="Fire module. Only possible if at least one `FIRE` incident type is present",
    )
    hazsit_detail: Optional[HazsitPayload] = Field(
        None,
        description="Hazsit module. Only possible if at least one `HAZSIT` incident type is present",
    )
    medical_details: Optional[List[MedicalPayload]] = Field(
        None,
        description="Medical module(s). Only possible if at least one `MEDICAL` incident type is present",
        title="Medical Details",
    )
    smoke_alarm: Optional[SmokeAlarmPayload] = None
    fire_alarm: Optional[FireAlarmPayload] = None
    other_alarm: Optional[OtherAlarmPayload] = None
    fire_suppression: Optional[FireSuppressionPayload] = None
    cooking_fire_suppression: Optional[CookingFireSuppressionPayload] = None
    electric_hazards: Optional[List[ElectricHazardPayload]] = Field(None, title="Electric Hazards")
    powergen_hazards: Optional[List[PowergenHazardPayload]] = Field(None, title="Powergen Hazards")
    csst_hazard: Optional[CsstHazardPayload] = None


class PatchActionTacticAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchActionTacticActionProperties


class PatchChemicalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchChemicalActionProperties


class PatchCookingFireSuppressionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCookingFireSuppressionActionProperties


class PatchElectricHazardAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchElectricHazardActionProperties


class PatchFireAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireActionProperties


class PatchFireAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireAlarmActionProperties


class PatchFireSuppressionOperationAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionOperationActionProperties


class PatchInjuryAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchInjuryActionProperties


class PatchLocationAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchLocationActionProperties


class PatchOtherAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchOtherAlarmActionProperties


class PatchRemovalAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchRemovalActionProperties


class PatchSmokeAlarmOperationAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmOperationActionProperties


class SetFireSuppressionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: FireSuppressionPayload


class SetSmokeAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["set"] = Field(..., description="Set the value of an attribute", title="Action")
    value: SmokeAlarmPayload


class FieldPatchCasualtyActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    injury_or_noninjury: Union[PatchInjuryAction, PatchNoinjuryAction] = Field(
        ..., title="Injury Or Noninjury"
    )


class FieldPatchDispatchActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location: Optional[PatchLocationAction] = None
    point: Optional[Union[SetGeoPointAction, UnsetAction]] = Field(None, title="Point")
    comments: Optional[
        List[Union[AppendCommentAction, RemoveElementAction, PatchCommentAction]]
    ] = Field(None, description="List of actions to take", title="Comments")
    unit_responses: Optional[
        List[
            Union[
                AppendDispatchUnitResponseAction,
                RemoveElementAction,
                PatchDispatchUnitResponseAction,
            ]
        ]
    ] = Field(None, description="List of actions to take", title="Unit Responses")
    tactic_timestamps: Optional[PatchDispatchTacticTimestampsAction] = None
    dispatch_center_id: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Dispatch Center Id"
    )
    incident_number: Optional[SetSimpleStrAction] = None
    determinant_code: Optional[Union[SetDeterminantCodeAction, UnsetAction]] = Field(
        None, title="Determinant Code"
    )
    incident_code: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Incident Code"
    )
    disposition: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Disposition")
    automatic_alarm: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="Automatic Alarm"
    )
    call_arrival: Optional[SetDateTimeAction] = None
    call_answered: Optional[SetDateTimeAction] = None
    call_create: Optional[SetDateTimeAction] = None
    incident_clear: Optional[Union[SetDateTimeAction, UnsetAction]] = Field(
        None, title="Incident Clear"
    )


class FieldPatchExposureActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    location_detail: Optional[Union[PatchExternalExposureAction, PatchInternalExposureAction]] = (
        Field(None, title="Location Detail")
    )
    location: Optional[PatchLocationAction] = None
    location_use: Optional[Union[PatchLocationUseAction, UnsetAction]] = Field(
        None, title="Location Use"
    )
    point: Optional[Union[SetGeoPointAction, UnsetAction]] = Field(None, title="Point")
    polygon: Optional[Union[SetGeoMultipolygonAction, UnsetAction]] = Field(None, title="Polygon")
    displacement_count: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Displacement Count"
    )
    displacement_causes: Optional[
        Union[SetRelListTypeDisplaceCauseValueRelExposureAction, UnsetAction]
    ] = Field(None, title="Displacement Causes")
    people_present: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="People Present"
    )
    damage_type: Optional[FieldSetTypeExposureDamageValueAction] = None


class FieldPatchFfRescueActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeRescueFfrescueAction] = None
    removal_or_nonremoval: Optional[PatchRemovalAction] = None
    rescue_mode: Optional[Union[FieldSetTypeRescueModeValueAction, UnsetAction]] = Field(
        None, title="Rescue Mode"
    )
    actions: Optional[Union[SetRelListTypeRescueActionValueAction, UnsetAction]] = Field(
        None, title="Actions"
    )
    impediments: Optional[Union[SetRelListTypeRescueImpedimentValueAction, UnsetAction]] = Field(
        None, title="Impediments"
    )


class FieldPatchFireSuppressionPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetPresentAction] = None
    suppression_types: Optional[Union[PatchFireSuppressionTypeAction, UnsetAction]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[Union[PatchFireSuppressionOperationAction, UnsetAction]] = Field(
        None, title="Operation Type"
    )


class Chemicals(RootModel[Union[AppendChemicalAction, RemoveElementAction, PatchChemicalAction]]):
    root: Union[AppendChemicalAction, RemoveElementAction, PatchChemicalAction] = Field(
        ..., discriminator="action"
    )


class FieldPatchHazsitActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    disposition: Optional[FieldSetTypeHazardDispositionValueAction] = None
    evacuated: Optional[SetIntAction] = None
    chemicals: Optional[Union[List[Chemicals], UnsetAction]] = Field(None, title="Chemicals")


class ElectricHazards(
    RootModel[
        Union[
            AppendElectricHazardAction,
            RemoveElectricHazardAction,
            PatchElectricHazardAction,
        ]
    ]
):
    root: Union[
        AppendElectricHazardAction,
        RemoveElectricHazardAction,
        PatchElectricHazardAction,
    ] = Field(..., discriminator="action")


class FieldPatchIncidentBaseActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    people_present: Optional[Union[SetBoolAction, UnsetAction]] = Field(
        None, title="People Present"
    )
    animals_rescued: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Animals Rescued"
    )
    impediment_narrative: Optional[Union[SetNarrativeStrAction, UnsetAction]] = Field(
        None, title="Impediment Narrative"
    )
    outcome_narrative: Optional[Union[SetNarrativeStrAction, UnsetAction]] = Field(
        None, title="Outcome Narrative"
    )
    displacement_count: Optional[Union[SetIntAction, UnsetAction]] = Field(
        None, title="Displacement Count"
    )
    displacement_causes: Optional[
        Union[SetRelListTypeDisplaceCauseValueRelIncidentAction, UnsetAction]
    ] = Field(None, title="Displacement Causes")
    point: Optional[Union[SetGeoPointAction, UnsetAction]] = Field(None, title="Point")
    polygon: Optional[Union[SetGeoMultipolygonAction, UnsetAction]] = Field(None, title="Polygon")
    location: Optional[PatchLocationAction] = None
    location_use: Optional[PatchLocationUseAction] = None


class FieldPatchSmokeAlarmPresentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[SetPresentAction] = None
    working: Optional[Union[SetBoolAction, UnsetAction]] = Field(None, title="Working")
    alarm_types: Optional[SetRelListTypeAlarmSmokeValueAction] = None
    operation: Optional[PatchSmokeAlarmOperationAction] = None


class AppendCasualtyRescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    action: Literal["append"] = Field(
        ..., description="Append an element to the array", title="Action"
    )
    value: CasualtyRescuePayload


class PatchCasualtyAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCasualtyActionProperties


class PatchDispatchAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchDispatchActionProperties


class PatchExposureAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchExposureActionProperties


class PatchFfRescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFfRescueActionProperties


class PatchFireSuppressionPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionPresentActionProperties


class PatchHazsitAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchHazsitActionProperties


class PatchIncidentBaseAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchIncidentBaseActionProperties


class PatchSmokeAlarmPresentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmPresentActionProperties


class FieldPatchFireSuppressionActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Optional[
        Union[PatchFireSuppressionPresentAction, PatchFireSuppressionNotPresentAction]
    ] = Field(None, title="Presence")


class FieldPatchRescueActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    ffrescue_or_nonffrescue: Optional[Union[PatchFfRescueAction, PatchNonFfRescueAction]] = Field(
        None, title="Ffrescue Or Nonffrescue"
    )
    presence_known: Optional[Union[PatchPresenceKnownAction, UnsetAction]] = Field(
        None, title="Presence Known"
    )
    mayday: Optional[Union[PatchRescueMaydayAction, UnsetAction]] = Field(None, title="Mayday")


class FieldPatchSmokeAlarmActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    presence: Optional[Union[PatchSmokeAlarmPresentAction, PatchSmokeAlarmNotpresentAction]] = (
        Field(None, title="Presence")
    )


class PatchFireSuppressionAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchFireSuppressionActionProperties


class PatchRescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchRescueActionProperties


class PatchSmokeAlarmAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchSmokeAlarmActionProperties


class FieldPatchCasualtyRescueActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Optional[FieldSetTypeFfNonffAction] = None
    casualty: Optional[Union[PatchCasualtyAction, UnsetAction]] = Field(None, title="Casualty")
    rescue: Optional[Union[PatchRescueAction, UnsetAction]] = Field(None, title="Rescue")
    birth_month_year: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(
        None, title="Birth Month Year"
    )
    gender: Optional[Union[FieldSetTypeGenderValueAction, UnsetAction]] = Field(
        None, title="Gender"
    )
    race: Optional[Union[FieldSetTypeRaceValueAction, UnsetAction]] = Field(None, title="Race")
    rank: Optional[Union[SetSimpleStrAction, UnsetAction]] = Field(None, title="Rank")
    years_of_service: Optional[Union[SetFloatAction, UnsetAction]] = Field(
        None, title="Years Of Service"
    )


class PatchCasualtyRescueAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_uid: Optional[int] = Field(
        None, description="The NERIS unique identifier for the item.", title="Neris Uid"
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchCasualtyRescueActionProperties


class FieldPatchIncidentActionProperties(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    base: Optional[Union[PatchIncidentBaseAction, SetIncidentBaseAction]] = Field(
        None, title="Base"
    )
    incident_types: Optional[
        Union[
            List[
                Union[
                    AppendIncidentTypeAction,
                    RemoveElementAction,
                    PatchIncidentTypeAction,
                ]
            ],
            UnsetAction,
        ]
    ] = Field(None, description="List of actions to take", title="Incident Types")
    special_modifiers: Optional[Union[SetRelListTypeSpecialModifierValueAction, UnsetAction]] = (
        Field(None, title="Special Modifiers")
    )
    aids: Optional[
        Union[
            List[Union[AppendAidAction, RemoveElementAction, PatchAidAction]],
            UnsetAction,
        ]
    ] = Field(None, title="Aids")
    nonfd_aids: Optional[Union[SetRelListTypeAidNonfdValueAction, UnsetAction]] = Field(
        None, title="Nonfd Aids"
    )
    actions_tactics: Optional[
        Union[PatchActionTacticAction, SetActionTacticAction, UnsetAction]
    ] = Field(None, title="Actions Tactics")
    dispatch: Optional[Union[PatchDispatchAction, SetDispatchAction]] = Field(
        None, title="Dispatch"
    )
    tactic_timestamps: Optional[
        Union[
            PatchIncidentTacticTimestampsAction,
            SetIncidentTacticTimestampsAction,
            UnsetAction,
        ]
    ] = Field(None, title="Tactic Timestamps")
    unit_responses: Optional[
        Union[
            List[
                Union[
                    AppendIncidentUnitResponseAction,
                    RemoveElementAction,
                    PatchIncidentUnitResponseAction,
                ]
            ],
            UnsetAction,
        ]
    ] = Field(None, description="List of actions to take", title="Unit Responses")
    exposures: Optional[
        Union[
            List[Union[AppendExposureAction, RemoveElementAction, PatchExposureAction]],
            UnsetAction,
        ]
    ] = Field(None, description="List of actions to take", title="Exposures")
    casualty_rescues: Optional[
        Union[
            List[
                Union[
                    AppendCasualtyRescueAction,
                    PatchCasualtyRescueAction,
                    RemoveElementAction,
                ]
            ],
            UnsetAction,
        ]
    ] = Field(None, title="Casualty Rescues")
    fire_detail: Optional[Union[PatchFireAction, SetFireAction, UnsetAction]] = Field(
        None, title="Fire Detail"
    )
    hazsit_detail: Optional[Union[PatchHazsitAction, SetHazsitAction, UnsetAction]] = Field(
        None, title="Hazsit Detail"
    )
    medical_details: Optional[
        Union[
            List[Union[AppendMedicalAction, RemoveElementAction, PatchMedicalAction]],
            UnsetAction,
        ]
    ] = Field(None, description="List of actions to perform", title="Medical Details")
    smoke_alarm: Optional[Union[PatchSmokeAlarmAction, SetSmokeAlarmAction, UnsetAction]] = Field(
        None, title="Smoke Alarm"
    )
    fire_alarm: Optional[Union[PatchFireAlarmAction, SetFireAlarmAction, UnsetAction]] = Field(
        None, title="Fire Alarm"
    )
    other_alarm: Optional[Union[PatchOtherAlarmAction, SetOtherAlarmAction, UnsetAction]] = Field(
        None, title="Other Alarm"
    )
    fire_suppression: Optional[
        Union[PatchFireSuppressionAction, SetFireSuppressionAction, UnsetAction]
    ] = Field(None, title="Fire Suppression")
    cooking_fire_suppression: Optional[
        Union[
            PatchCookingFireSuppressionAction,
            SetCookingFireSuppressionAction,
            UnsetAction,
        ]
    ] = Field(None, title="Cooking Fire Suppression")
    electric_hazards: Optional[Union[List[ElectricHazards], UnsetAction]] = Field(
        None, title="Electric Hazards"
    )
    powergen_hazards: Optional[
        Union[
            List[
                Union[
                    AppendPvPowergenHazardAction,
                    AppendOtherPowergenHazardAction,
                    RemovePowergenHazardAction,
                    PatchPvPowergenHazardAction,
                    PatchOtherPowergenHazardAction,
                ]
            ],
            UnsetAction,
        ]
    ] = Field(None, title="Powergen Hazards")
    csst_hazard: Optional[Union[PatchCsstHazardAction, SetCsstHazardAction, UnsetAction]] = Field(
        None, title="Csst Hazard"
    )


class PatchIncidentAction(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    neris_id: constr(pattern=r"^FD\d{8}\|[\w\d\-\:]+\|\d{10}$") = Field(
        ...,
        examples=[
            "FD12345678|abc123xyz|1729023498",
            "FD24027334|incident42:f-tiw|1729023498",
            "FD12345678|0457812893477|1729023498",
        ],
        title="Neris Id",
    )
    action: Literal["patch"] = Field(
        ..., description="Patch values of a nested attribute", title="Action"
    )
    properties: FieldPatchIncidentActionProperties


LocationResponse.model_rebuild()
LocationPayload.model_rebuild()
