# generated by datamodel-codegen:
#   filename:  openapi.json
#   timestamp: 2024-10-02T19:47:51+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import (
    AwareDatetime,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    RootModel,
    constr,
)
from typing_extensions import Literal


class Type(Enum):
    ACTION = "ACTION"


class Actions(Enum):
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR_AND_INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR_AND_INTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__ESTABLISH_FIRE_LINES = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||ESTABLISH FIRE LINES"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__CONFINEMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||CONFINEMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__STRUCTURE_PROTECTION = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||STRUCTURE_PROTECTION"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_CONTROL_EXTINGUISHMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_CONTROL_EXTINGUISHMENT"
    )
    VENTILATION__VERTICAL__PRIOR_TO_SUPPRESSION = "VENTILATION||VERTICAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__VERTICAL__DURING_SUPPRESSION = "VENTILATION||VERTICAL||DURING_SUPPRESSION"
    VENTILATION__VERTICAL__POST_SUPPRESSION = "VENTILATION||VERTICAL||POST_SUPPRESSION"
    VENTILATION__HORIZONTAL__PRIOR_TO_SUPPRESSION = "VENTILATION||HORIZONTAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__HORIZONTAL__DURING_SUPPRESSION = "VENTILATION||HORIZONTAL||DURING_SUPPRESSION"
    VENTILATION__HORIZONTAL__POST_SUPPRESSION = "VENTILATION||HORIZONTAL||POST_SUPPRESSION"
    VENTILATION__POSITIVE_PRESSURE__PRIOR_TO_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||PRIOR_TO_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__DURING_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||DURING_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__POST_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||POST_SUPPRESSION"
    )
    VENTILATION__HYDRAULIC__PRIOR_TO_SUPPRESSION = "VENTILATION||HYDRAULIC||PRIOR_TO_SUPPRESSION"
    VENTILATION__HYDRAULIC__DURING_SUPPRESSION = "VENTILATION||HYDRAULIC||DURING_SUPPRESSION"
    VENTILATION__HYDRAULIC__POST_SUPPRESSION = "VENTILATION||HYDRAULIC||POST_SUPPRESSION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    NON_STRUCTURE_SEARCH__SEARCH_AREA_OF_COLLAPSE = "NON_STRUCTURE_SEARCH||SEARCH_AREA_OF_COLLAPSE"
    NON_STRUCTURE_SEARCH__SEARCH_UNDERGROUND_INFRASTRUCTURE = (
        "NON_STRUCTURE_SEARCH||SEARCH_UNDERGROUND_INFRASTRUCTURE"
    )
    NON_STRUCTURE_SEARCH__WIDE_AREA_OUTDOOR_SEARCH = (
        "NON_STRUCTURE_SEARCH||WIDE_AREA/OUTDOOR_SEARCH"
    )
    NON_STRUCTURE_SEARCH__SEARCH_WATERWAY = "NON_STRUCTURE_SEARCH||SEARCH_WATERWAY"
    NON_STRUCTURE_SEARCH__BODY_RECOVERY = "NON_STRUCTURE_SEARCH||BODY_RECOVERY"
    NON_STRUCTURE_SEARCH__USAR_K9_SEARCH = "NON_STRUCTURE_SEARCH||USAR_K9_SEARCH"
    SALVAGE_AND_OVERHAUL = "SALVAGE_AND_OVERHAUL"
    PERSONNEL_CONTAMINATION_REDUCTION__ON_SCENE_CONTAMINATION_REDUCTION = (
        "PERSONNEL_CONTAMINATION_REDUCTION||ON-SCENE_CONTAMINATION_REDUCTION"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__CLEAN_CAB_TRANSPORT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||CLEAN_CAB_TRANSPORT"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__PPE_WASHED_POST_INCIDENT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||PPE_WASHED_POST-INCIDENT"
    )
    HAZARDOUS_SITUATION_MITIGATION__TAKE_SAMPLES = "HAZARDOUS_SITUATION_MITIGATION||TAKE_SAMPLES"
    EMERGENCY_MEDICAL_CARE__PATIENT_ASSESSMENT = "EMERGENCY_MEDICAL_CARE||PATIENT_ASSESSMENT"
    EMERGENCY_MEDICAL_CARE__PROVIDE_BASIC_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_BASIC_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_ADVANCED_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_ADVANCED_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_TRANSPORT = "EMERGENCY_MEDICAL_CARE||PROVIDE_TRANSPORT"
    EMERGENCY_MEDICAL_CARE__PATIENT_REFERRAL = "EMERGENCY_MEDICAL_CARE||PATIENT_REFERRAL"
    COMMAND_AND_CONTROL__ESTABLISH_INCIDENT_COMMAND = (
        "COMMAND_AND_CONTROL||ESTABLISH_INCIDENT_COMMAND"
    )
    COMMAND_AND_CONTROL__SAFETY_OFFICER_ASSIGNED = "COMMAND_AND_CONTROL||SAFETY_OFFICER_ASSIGNED"
    COMMAND_AND_CONTROL__PIO_ASSIGNED = "COMMAND_AND_CONTROL||PIO_ASSIGNED"
    COMMAND_AND_CONTROL__NOTIFY_OTHER_AGENCIES = "COMMAND_AND_CONTROL||NOTIFY_OTHER_AGENCIES"
    COMMAND_AND_CONTROL__INCIDENT_ASSESSMENT_COMPLETED = (
        "COMMAND_AND_CONTROL||INCIDENT_ASSESSMENT_COMPLETED"
    )
    COMMAND_AND_CONTROL__ACCOUNTABILITY_OFFICER_ASSIGNED = (
        "COMMAND_AND_CONTROL||ACCOUNTABILITY_OFFICER_ASSIGNED"
    )
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||INTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__BACKBURN = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||BACKBURN"
    )
    HAZARDOUS_SITUATION_MITIGATION__SPILL_CONTROL = "HAZARDOUS_SITUATION_MITIGATION||SPILL_CONTROL"
    HAZARDOUS_SITUATION_MITIGATION__LEAK_STOP = "HAZARDOUS_SITUATION_MITIGATION||LEAK_STOP"
    HAZARDOUS_SITUATION_MITIGATION__REMOVE_HAZARD = "HAZARDOUS_SITUATION_MITIGATION||REMOVE_HAZARD"
    HAZARDOUS_SITUATION_MITIGATION__DECONTAMINATION = (
        "HAZARDOUS_SITUATION_MITIGATION||DECONTAMINATION"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_INTERIOR = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_INTERIOR"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_EXTERIOR/FENCELINE"
    )
    PROVIDE_EVACUATION_SUPPORT__CONNECTED_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||CONNECTED_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__REMOTE_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||REMOTE_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__NEARBY_BUILDINGS = "PROVIDE_EVACUATION_SUPPORT||NEARBY_BUILDINGS"
    PROVIDE_EVACUATION_SUPPORT__LARGE_AREA = "PROVIDE_EVACUATION_SUPPORT||LARGE_AREA"
    PROVIDE_EQUIPMENT__PROVIDE_SPECIAL_EQUIPMENT = "PROVIDE_EQUIPMENT||PROVIDE_SPECIAL_EQUIPMENT"
    PROVIDE_EQUIPMENT__PROVIDE_LIGHT = "PROVIDE_EQUIPMENT||PROVIDE_LIGHT"
    PROVIDE_EQUIPMENT__PROVIDE_ELECTRICAL_POWER = "PROVIDE_EQUIPMENT||PROVIDE_ELECTRICAL_POWER"
    PROVIDE_EQUIPMENT__PROVIDE_DRONE_VIDEO_EQUIPMENT = (
        "PROVIDE_EQUIPMENT||PROVIDE_DRONE/VIDEO_EQUIPMENT"
    )
    PROVIDE_SERVICES__RESTORE_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||RESTORE_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__RESTORE_RESET_ALARM_SYSTEM = "PROVIDE_SERVICES||RESTORE/RESET_ALARM_SYSTEM"
    PROVIDE_SERVICES__SHUT_DOWN_ALARM = "PROVIDE_SERVICES||SHUT_DOWN_ALARM"
    PROVIDE_SERVICES__SHUT_DOWN_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||SHUT_DOWN_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__SECURE_PROPERTY = "PROVIDE_SERVICES||SECURE_PROPERTY"
    PROVIDE_SERVICES__REMOVE_WATER = "PROVIDE_SERVICES||REMOVE_WATER"
    PROVIDE_SERVICES__ASSIST_UNINJURED_PERSON = "PROVIDE_SERVICES||ASSIST_UNINJURED_PERSON"
    PROVIDE_SERVICES__ASSIST_ANIMAL = "PROVIDE_SERVICES||ASSIST_ANIMAL"
    PROVIDE_SERVICES__PROVIDE_APPARATUS_WATER = "PROVIDE_SERVICES||PROVIDE_APPARATUS/WATER"
    PROVIDE_SERVICES__CONTROL_CROWD = "PROVIDE_SERVICES||CONTROL_CROWD"
    PROVIDE_SERVICES__CONTROL_TRAFFIC = "PROVIDE_SERVICES||CONTROL_TRAFFIC"
    PROVIDE_SERVICES__DAMAGE_ASSESSMENT = "PROVIDE_SERVICES||DAMAGE_ASSESSMENT"
    INFORMATION_ENFORCEMENT__REFER_TO_PROPER_AHJ = "INFORMATION_ENFORCEMENT||REFER_TO_PROPER_AHJ"
    INFORMATION_ENFORCEMENT__ENFORCE_CODE_OR_LAW = "INFORMATION_ENFORCEMENT||ENFORCE_CODE_OR_LAW"
    INFORMATION_ENFORCEMENT__FILL_MOVE_UP = "INFORMATION_ENFORCEMENT||FILL/MOVE-UP"
    INFORMATION_ENFORCEMENT__PROVIDE_PUBLIC_INFORMATION = (
        "INFORMATION_ENFORCEMENT||PROVIDE_PUBLIC_INFORMATION"
    )


class AssessmentPayload(BaseModel):
    iso_rating: Optional[int] = Field(None, title="Iso Rating")
    cpse_acredited: Optional[bool] = Field(None, title="Cpse Acredited")
    caas_acredited: Optional[bool] = Field(None, title="Caas Acredited")


class AssessmentResponse(BaseModel):
    iso_rating: Optional[int] = Field(None, title="Iso Rating")
    cpse_acredited: Optional[bool] = Field(None, title="Cpse Acredited")
    caas_acredited: Optional[bool] = Field(None, title="Caas Acredited")


class BodyUpsertLogoEntityNerisIdEntityLogoPut(BaseModel):
    upload_logo: bytes = Field(
        ..., description="Logo image that is under 10MB", title="Upload Logo"
    )


class Type1(Enum):
    FF = "FF"
    NONFF = "NONFF"


class Gender(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    UNSPECIFIED_ANOTHER_GENDER_IDENTITY = "UNSPECIFIED_ANOTHER_GENDER_IDENTITY"


class Race(Enum):
    AMERICAN_INDIAN_ALASKA_NATIVE = "AMERICAN_INDIAN_ALASKA_NATIVE"
    ASIAN = "ASIAN"
    BLACK_AFRICAN_AMERICAN = "BLACK_AFRICAN_AMERICAN"
    HISPANIC_LATINO = "HISPANIC_LATINO"
    NATIVE_HAWAIIAN_PACIFIC_ISLANDER = "NATIVE_HAWAIIAN_PACIFIC_ISLANDER"
    WHITE = "WHITE"


class Comment(BaseModel):
    comment: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Free text or canned remark comments from dispatcher throughout duration of call.",
        examples=["Dispatch unit 35E to 123 Main Street for possible structure fire"],
        title="Comment",
    )
    timestamp: Optional[AwareDatetime] = Field(
        None, description="Timestamp of the comment.", title="Timestamp"
    )


class ContactPayload(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    title: Optional[str] = Field(None, title="Title")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")


class ContactResponse(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    title: Optional[str] = Field(None, title="Title")
    phone: Optional[str] = Field(None, title="Phone")
    email: Optional[str] = Field(None, title="Email")


class Type2(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class CookingFireSuppressionNotPresent(BaseModel):
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type3(Enum):
    PRESENT = "PRESENT"


class CreateUserPayload(BaseModel):
    email: str = Field(..., title="Email")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")


class DirectionOfTravel(Enum):
    NORTHBOUND = "NORTHBOUND"
    SOUTHBOUND = "SOUTHBOUND"
    EASTBOUND = "EASTBOUND"
    WESTBOUND = "WESTBOUND"


class CrossStreetModifier(Enum):
    CLOSEST = "CLOSEST"
    SECOND_CLOSEST = "SECOND_CLOSEST"


class LightningSuspected(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class Grounded(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class DeptSortBy(Enum):
    name = "name"
    neris_id = "neris_id"
    address_line_1 = "address_line_1"
    city = "city"
    state = "state"
    zip_code = "zip_code"
    department_type = "department_type"
    website = "website"


class DispatchResponse(BaseModel):
    avl_usage: Optional[bool] = Field(None, title="Avl Usage")
    center_id: Optional[str] = Field(None, title="Center Id")
    cad_software: Optional[str] = Field(None, title="Cad Software")
    psap_type: Optional[str] = Field(None, title="Psap Type")
    psap_capability: Optional[str] = Field(None, title="Psap Capability")
    psap_discipline: Optional[str] = Field(None, title="Psap Discipline")
    psap_jurisdiction: Optional[str] = Field(None, title="Psap Jurisdiction")
    protocol_fire: Optional[str] = Field(None, title="Protocol Fire")
    protocol_med: Optional[str] = Field(None, title="Protocol Med")


class Type4(Enum):
    DISPATCH = "DISPATCH"


class DispatchTacticTimestamps(BaseModel):
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_360: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident 360 is complete.",
        title="Completed 360",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class SourceOrTarget(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"
    UNKNOWN = "UNKNOWN"


class ElectricHazardCrash(BaseModel):
    pass


class SuppressionTypes(Enum):
    RUN_COURSE = "RUN_COURSE"
    SUPPRESSION_WATER_ONLY = "SUPPRESSION_WATER_ONLY"
    SUPPRESSION_WATER_ADDITIVE = "SUPPRESSION_WATER_ADDITIVE"
    SUBMERGE_BURY = "SUBMERGE_BURY"
    FIRE_BLANKET = "FIRE_BLANKET"
    BATTERY_PENETRATION = "BATTERY_PENETRATION"


class EntitySetMembershipPayload(BaseModel):
    neris_id: str = Field(..., description="The entity's NERIS ID", title="Neris Id")


class EntitySetResponse(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    type: str = Field(..., description="The type of entity set.", title="Type")
    members: Optional[List[EntitySetMembershipPayload]] = Field(None, title="Members")
    nuid: UUID = Field(..., description="The unique identifier for the entity set", title="Nuid")


class Causes(Enum):
    FIRE = "FIRE"
    SMOKE = "SMOKE"
    WATER = "WATER"
    UTILITIES = "UTILITIES"
    HAZARDOUS_SITUATION = "HAZARDOUS_SITUATION"
    COLLAPSE = "COLLAPSE"
    OTHER = "OTHER"


class Type6(Enum):
    EXPOSURE = "EXPOSURE"


class Type7(Enum):
    EXTERNAL_EXPOSURE = "EXTERNAL_EXPOSURE"


class ItemType(Enum):
    STRUCTURE = "STRUCTURE"
    VEHICLE = "VEHICLE"
    OUTDOOR_ENVIRONMENT = "OUTDOOR_ENVIRONMENT"
    OBJECT_OTHER = "OBJECT_OTHER"


class JobClassification(Enum):
    CAREER = "CAREER"
    PART_TIME = "PART_TIME"
    PAID_ON_CALL = "PAID_ON_CALL"
    INDUSTRIAL = "INDUSTRIAL"
    VOLUNTEER = "VOLUNTEER"
    WILDLAND_FULL_TIME = "WILDLAND_FULL_TIME"
    WILDLAND_PART_TIME = "WILDLAND_PART_TIME"
    WILDLAND_CONTRACT = "WILDLAND_CONTRACT"


class DutyType(Enum):
    RESPONDING_TO_EMERGENCY_INCIDENT = "RESPONDING_TO_EMERGENCY_INCIDENT"
    WORKING_AT_SCENE_OF_FIRE_INCIDENT = "WORKING_AT_SCENE_OF_FIRE_INCIDENT"
    WORKING_AT_SCENE_OF_NONFIRE_INCIDENT = "WORKING_AT_SCENE_OF_NONFIRE_INCIDENT"
    RETURNING_FROM_EMERGENCY_INCIDENT = "RETURNING_FROM_EMERGENCY_INCIDENT"
    TRAINING = "TRAINING"
    AFTER_INCIDENT = "AFTER_INCIDENT"
    OTHER_ON_DUTY_INCIDENT = "OTHER_ON_DUTY_INCIDENT"


class ActionType(Enum):
    SEARCH_RESCUE = "SEARCH_RESCUE"
    CARRYING_SETTINGUP_EQUIPMENT = "CARRYING_SETTINGUP_EQUIPMENT"
    ADVANCING_OPERATING_HOSELINE = "ADVANCING_OPERATING_HOSELINE"
    VEHICLE_EXTRICATION = "VEHICLE_EXTRICATION"
    VENTILATION = "VENTILATION"
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    PUMP_OPERATIONS = "PUMP_OPERATIONS"
    EMS_PATIENT_CARE = "EMS_PATIENT_CARE"
    DURING_INCIDENT_RESPONSE = "DURING_INCIDENT_RESPONSE"
    SCENE_SAFETY_DIRECTING_TRAFFIC = "SCENE_SAFETY_DIRECTING_TRAFFIC"
    STANDBY = "STANDBY"
    INCIDENT_COMMAND = "INCIDENT_COMMAND"
    OTHER = "OTHER"


class IncidentStage(Enum):
    RESPONDING = "RESPONDING"
    INITIAL_ATTACK = "INITIAL_ATTACK"
    CONITNUING_OPERATIONS = "CONITNUING_OPERATIONS"
    EXTENDED_OPERATIONS = "EXTENDED_OPERATIONS"
    AFTER_CONCLUSIONS_OF_INCIDENT = "AFTER_CONCLUSIONS_OF_INCIDENT"
    UNKNOWN = "UNKNOWN"


class PpeItems(Enum):
    TURNOUT_COAT = "TURNOUT_COAT"
    BUNKER_PANTS = "BUNKER_PANTS"
    PROTECTIVE_HOOD = "PROTECTIVE_HOOD"
    GLOVES = "GLOVES"
    FACE_SHIELD_GOGGLES = "FACE_SHIELD_GOGGLES"
    HELMET = "HELMET"
    SCBA = "SCBA"
    PASS_DEVICE = "PASS_DEVICE"
    RUBBER_KNEE_BOOOTS = "RUBBER_KNEE_BOOOTS"
    field_3_4_BOOTS = "3_4_BOOTS"
    BRUSH_GEAR = "BRUSH_GEAR"
    REFLECTIVE_VEST = "REFLECTIVE_VEST"
    OTHER_SPECIAL_EQUIPMENT = "OTHER_SPECIAL_EQUIPMENT"


class Type8(Enum):
    FIREFIGHTER_RESCUED = "FIREFIGHTER_RESCUED"
    FIREFIGHTER_ASSISTED_EVAC = "FIREFIGHTER_ASSISTED_EVAC"


class Actions2(Enum):
    VENTILATION = "VENTILATION"
    HYDRUALIC_TOOL_USE = "HYDRUALIC_TOOL_USE"
    UNDERWATER_DIVE = "UNDERWATER_DIVE"
    ROPE_RIGGING = "ROPE_RIGGING"
    BREAK_BREACH_WALL = "BREAK_BREACH_WALL"
    BRACE_WALL_INFRASTRUCTURE = "BRACE_WALL_INFRASTRUCTURE"
    TRENCH_SHORING = "TRENCH_SHORING"
    SUPPLY_AIR = "SUPPLY_AIR"


class Impedances(Enum):
    HOARDING_CONDITIONS = "HOARDING_CONDITIONS"
    ACCESS_LIMITATIONS = "ACCESS_LIMITATIONS"
    PHYSICAL_MEDICAL_CONDITIONS_PERSON = "PHYSICAL_MEDICAL_CONDITIONS_PERSON"
    IMPAIRED_PERSON = "IMPAIRED_PERSON"
    OTHER = "OTHER"
    NONE = "NONE"


class InvestigationTypes(Enum):
    INVESTIGATED_ON_SCENE_RESOURCE = "INVESTIGATED_ON_SCENE_RESOURCE"
    INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR = "INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR"
    INVESTIGATED_BY_OUTSIDE_AGENCY = "INVESTIGATED_BY_OUTSIDE_AGENCY"
    INVESTIGATED_BY_STATE_FIRE_MARSHAL = "INVESTIGATED_BY_STATE_FIRE_MARSHAL"
    INVESTIGATED_BY_INSURANCE = "INVESTIGATED_BY_INSURANCE"
    INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT = "INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT"
    INVESTIGATED_BY_OTHER = "INVESTIGATED_BY_OTHER"


class SuppressionAppliances(Enum):
    FIRE_EXTINGUISHER = "FIRE_EXTINGUISHER"
    BOOSTER_FIRE_HOSE = "BOOSTER_FIRE_HOSE"
    SMALL_DIAMATER_FIRE_HOSE = "SMALL_DIAMATER_FIRE_HOSE"
    MEDIUM_DIAMETER_FIRE_HOSE = "MEDIUM_DIAMETER_FIRE_HOSE"
    GROUND_MONITOR = "GROUND_MONITOR"
    MASTER_STREAM = "MASTER_STREAM"
    ELEVATED_MASTER_STREAM_STANDPIPE = "ELEVATED_MASTER_STREAM_STANDPIPE"
    BUILDING_STANDPIPE = "BUILDING_STANDPIPE"
    BUILDING_FDC = "BUILDING_FDC"
    AIRATTACK_HELITACK = "AIRATTACK_HELITACK"
    NONE = "NONE"


class Type9(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class FireAlarmNotPresent(BaseModel):
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type10(Enum):
    PRESENT = "PRESENT"


class RelativeSuppressionTime(Enum):
    PRE_SUPPRESSION = "PRE_SUPPRESSION"
    DURING_SUPPRESSION = "DURING_SUPPRESSION"
    POST_SUPPRESSION = "POST_SUPPRESSION"


class Type11(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"


class FireSuppressionEffective(BaseModel):
    type: Literal["OPERATED_EFFECTIVE"] = Field(..., title="Type")
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )


class Type12(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"


class FailureReason(Enum):
    SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT = "SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT"
    SYSTEM_SHUTOFF_DURING_INCIDENT = "SYSTEM_SHUTOFF_DURING_INCIDENT"
    SYSTEM_INOPERABLE = "SYSTEM_INOPERABLE"
    SYSTEM_DAMAGED_COMPROMISED = "SYSTEM_DAMAGED_COMPROMISED"
    SYSTEM_NOT_SUITABLE = "SYSTEM_NOT_SUITABLE"
    INSUFFICIENT_WATER_SUPPLY = "INSUFFICIENT_WATER_SUPPLY"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class Type13(Enum):
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"


class Type14(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class FireSuppressionNotPresent(BaseModel):
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type15(Enum):
    PRESENT = "PRESENT"


class Type16(Enum):
    MultiPolygon = "MultiPolygon"


class GeoJsonMultiPolygon(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["MultiPolygon"] = Field(
        "MultiPolygon",
        description='A literal type indicating the GeoJSON object type. Always "MultiPolygon" for this class.',
        examples=["MultiPolygon"],
        title="Type",
    )
    coordinates: List[List[List[List[float]]]] = Field(
        ...,
        description="A list of polygons, each represented as a list of linear rings. The first linear ring in each polygon is the exterior ring, with subsequent rings being interior rings (holes).",
        examples=[[[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0], [1.0, 2.0]]]],
        title="Coordinates",
    )


class Type17(Enum):
    Point = "Point"


class GeoJsonPoint(BaseModel):
    model_config = ConfigDict(
        extra="forbid",
    )
    type: Literal["Point"] = Field(
        "Point",
        description='A literal type indicating the GeoJSON object type. Always "Point" for this class.',
        examples=["Point"],
        title="Type",
    )
    coordinates: List[float] = Field(
        ...,
        description="The coordinates of the point. Must be a valid set of coordinates.",
        examples=[[1.0, 2.0], [3.0, 4.0]],
        title="Coordinates",
    )


class IncidentCreatedResponse(BaseModel):
    neris_id: str = Field(..., title="Neris Id")


class Type18(Enum):
    INCIDENT = "INCIDENT"


class IncidentTacticTimestamps(BaseModel):
    command_established: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident command is established.",
        title="Command Established",
    )
    completed_360: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which incident 360 is complete.",
        title="Completed 360",
    )
    suppression_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which suppression is complete.",
        title="Suppression Complete",
    )
    primary_search_begin: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations begin.",
        title="Primary Search Begin",
    )
    primary_search_complete: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which primary search operations are complete.",
        title="Primary Search Complete",
    )
    water_on_fire: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which water is first applied to fire.",
        title="Water On Fire",
    )
    fire_under_control: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is considered contained (e.g. in a wildfire), but not yet extinguished.",
        title="Fire Under Control",
    )
    fire_knocked_down: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which fire is has been knocked down.",
        title="Fire Knocked Down",
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class Type21(Enum):
    INJURED_NONFATAL = "INJURED_NONFATAL"
    INJURED_FATAL = "INJURED_FATAL"


class Cause(Enum):
    CAUGHT_TRAPPED_BY_FIRE_EXPLOSION = "CAUGHT_TRAPPED_BY_FIRE_EXPLOSION"
    FALL_JUMP = "FALL_JUMP"
    STRESS_OVEREXERTION = "STRESS_OVEREXERTION"
    COLLAPSE = "COLLAPSE"
    CAUGHT_TRAPPED_BY_OBJECT = "CAUGHT_TRAPPED_BY_OBJECT"
    STRUCK_CONTACT_WITH_OBJECT = "STRUCK_CONTACT_WITH_OBJECT"
    EXPOSURE = "EXPOSURE"
    VEHICLE_COLLISION = "VEHICLE_COLLISION"
    OTHER = "OTHER"


class Type22(Enum):
    INTERNAL_EXPOSURE = "INTERNAL_EXPOSURE"


class InternalExposure(BaseModel):
    type: Literal["INTERNAL_EXPOSURE"] = Field(..., title="Type")


class InUse(Enum):
    boolean_True = True


class Inuse(BaseModel):
    in_use: Literal[True] = Field(
        True,
        description="Whether the location is in use. Always true if Location has an 'in_use' attribute.",
        title="In Use",
    )
    intended: Optional[bool] = Field(
        None,
        description="Whether the location is being used as intended.",
        title="Intended",
    )


class ListEntitySetsResponse(BaseModel):
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    entity_sets: List[EntitySetResponse] = Field(..., title="Entity Sets")


class PlaceType(Enum):
    AIRCRAFT = "AIRCRAFT"
    AIRPORT = "AIRPORT"
    ARENA = "ARENA"
    AUTOMOBILE = "AUTOMOBILE"
    BANK = "BANK"
    BAR = "BAR"
    BUS = "BUS"
    BICYCLE = "BICYCLE"
    BUS_STATION = "BUS_STATION"
    CAFE = "CAFE"
    CLASSROOM = "CLASSROOM"
    CLUB = "CLUB"
    CONSTRUCTION = "CONSTRUCTION"
    CONVENTION_CENTER = "CONVENTION_CENTER"
    GOVERNMENT = "GOVERNMENT"
    HOSPITAL = "HOSPITAL"
    HOTEL = "HOTEL"
    INDUSTRIAL = "INDUSTRIAL"
    LIBRARY = "LIBRARY"
    MOTORCYCLE = "MOTORCYCLE"
    MUSEUM = "MUSEUM"
    OFFICE = "OFFICE"
    OTHER = "OTHER"
    OUTDOORS = "OUTDOORS"
    PARKING = "PARKING"
    PLACE_OF_WORSHIP = "PLACE_OF_WORSHIP"
    PRISON = "PRISON"
    PUBLIC = "PUBLIC"
    PUBLIC_TRANSPORT = "PUBLIC_TRANSPORT"
    RESIDENCE = "RESIDENCE"
    RESTAURANT = "RESTAURANT"
    SCHOOL = "SCHOOL"
    SHOPPING_AREA = "SHOPPING_AREA"
    STADIUM = "STADIUM"
    STORE = "STORE"
    STREET = "STREET"
    THEATER = "THEATER"
    TRAIN = "TRAIN"
    TRAIN_STATION = "TRAIN_STATION"
    TRUCK = "TRUCK"
    UNDERWAY = "UNDERWAY"
    UNKNOWN = "UNKNOWN"
    WAREHOUSE = "WAREHOUSE"
    WATER = "WATER"
    WATERCRAFT = "WATERCRAFT"


class Country(Enum):
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class UseType(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATER_PROXIMITY = "OUTDOOR||WATER_PROXIMITY"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    EDUCATION__DORMITORY_HOUSING = "EDUCATION||DORMITORY_HOUSING"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"


class VacancyCause(Enum):
    NEW_CONSTRUCTION_REMODEL = "NEW_CONSTRUCTION_REMODEL"
    ABANDONED = "ABANDONED"
    FOR_SALE_LEASE = "FOR_SALE_LEASE"
    FORECLOSURE = "FORECLOSURE"
    DAMAGE_DECAY = "DAMAGE_DECAY"
    SEASONAL_OCCASIONALLY_OCCUPIED = "SEASONAL_OCCASIONALLY_OCCUPIED"
    UNKNOWN = "UNKNOWN"


class SecondaryUse(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATER_PROXIMITY = "OUTDOOR||WATER_PROXIMITY"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    EDUCATION__DORMITORY_HOUSING = "EDUCATION||DORMITORY_HOUSING"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"


class Mayday1(Enum):
    boolean_True = True


class MedResponse(BaseModel):
    at_patient: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider reaches the patient's side.",
        title="At Patient",
    )
    enroute_to_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit statuses enroute to the hospital.",
        title="Enroute To Hospital",
    )
    arrived_at_hospital: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit arrives at the hospital.",
        title="Arrived At Hospital",
    )
    transferred_to_agency: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a transporting agency.",
        title="Transferred To Agency",
    )
    transferred_to_facility: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the provider transfers care to a hospital or facility.",
        title="Transferred To Facility",
    )
    hospital_cleared: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the hospital.",
        title="Hospital Cleared",
    )
    hospital_destination: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the hospital where the patient is transported.",
        examples=["University of Maryland Capital Regional Medical Center"],
        title="Hospital Destination",
    )


class PatientStatus(Enum):
    IMPROVED = "IMPROVED"
    UNCHANGED = "UNCHANGED"
    WORSE = "WORSE"


class TransportDisposition(Enum):
    TRANSPORT_BY_EMS_UNIT = "TRANSPORT_BY_EMS_UNIT"
    OTHER_AGENCY_TRANSPORT = "OTHER_AGENCY_TRANSPORT"
    PATIENT_REFUSED_TRANSPORT = "PATIENT_REFUSED_TRANSPORT"
    NONPATIENT_TRANSPORT = "NONPATIENT_TRANSPORT"
    NO_TRANSPORT = "NO_TRANSPORT"


class Type23(Enum):
    NOACTION = "NOACTION"


class NoactionType(Enum):
    CANCELLED = "CANCELLED"
    STAGED_STANDBY = "STAGED/STANDBY"
    NO_INCIDENT_FOUND = "NO_INCIDENT_FOUND"


class Type24(Enum):
    UNINJURED = "UNINJURED"


class Noinjury(BaseModel):
    type: Literal["UNINJURED"] = Field(..., title="Type")


class Type25(Enum):
    NON_FIREFIGHTER_RESCUED = "NON_FIREFIGHTER_RESCUED"
    SELF_EVACUATION = "SELF_EVACUATION"
    NO_RESCUE_NEEDED = "NO_RESCUE_NEEDED"


class NonFfRescue(BaseModel):
    type: Literal["NON_FIREFIGHTER_RESCUED", "NO_RESCUE_NEEDED", "SELF_EVACUATION"] = Field(
        ..., title="Type"
    )


class Type26(Enum):
    NONREMOVAL = "NONREMOVAL"


class Nonremoval(BaseModel):
    type: Literal["NONREMOVAL"] = Field("NONREMOVAL", title="Type")


class Type27(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class OtherAlarmNotPresent(BaseModel):
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type28(Enum):
    PRESENT = "PRESENT"


class Type29(Enum):
    WIND_TURBINE = "WIND_TURBINE"
    NONE = "NONE"


class OtherPowergenHazard(BaseModel):
    type: Literal["NONE", "WIND_TURBINE"] = Field(..., title="Type")


class Type30(Enum):
    OUTSIDE = "OUTSIDE"


class PopulationResponse(BaseModel):
    source: Optional[str] = Field(None, title="Source")
    protected: Optional[int] = Field(None, title="Protected")


class PresenceKnownType(Enum):
    KNOWN_DISPATCH = "KNOWN_DISPATCH"
    KNOWN_ARRIVAL = "KNOWN_ARRIVAL"
    KNOWN_DURING = "KNOWN_DURING"


class Type31(Enum):
    PHOTOVOLTAICS = "PHOTOVOLTAICS"


class SourceOrTarget1(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"


class PvType(Enum):
    PANEL_WATER_HEATING = "PANEL_WATER_HEATING"
    PANEL_POWER_GENERATION = "PANEL_POWER_GENERATION"
    TILE_POWER_GENERATION = "TILE_POWER_GENERATION"
    THIN_FILM_POWER_GENERATION = "THIN_FILM_POWER_GENERATION"


class RegionResponse(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    url: str = Field(..., title="Url")


class RegionSetResponse(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    type: str = Field(..., title="Type")
    primary: bool = Field(..., title="Primary")
    coverage: bool = Field(..., title="Coverage")
    juris: bool = Field(..., title="Juris")
    regions: Optional[List[RegionResponse]] = Field(None, title="Regions")


class UnitOfMeasurement(Enum):
    GAS_CUBIC_FOOT = "GAS_CUBIC_FOOT"
    GAS_CUBIC_INCH = "GAS_CUBIC_INCH"
    GAS_CUBIC_CENTIMETER = "GAS_CUBIC_CENTIMETER"
    GAS_CUBIC_METER = "GAS_CUBIC_METER"
    GAS_POUND = "GAS_POUND"
    LIQUID_CUBIC_CENTIMETER = "LIQUID_CUBIC_CENTIMETER"
    LIQUID_CUP = "LIQUID_CUP"
    LIQUID_GALLON = "LIQUID_GALLON"
    LIQUID_GRAM = "LIQUID_GRAM"
    LIQUID_KILOGRAM = "LIQUID_KILOGRAM"
    LIQUID_POUND = "LIQUID_POUND"
    LIQUID_LITER = "LIQUID_LITER"
    LIQUID_MILLIGRAM = "LIQUID_MILLIGRAM"
    LIQUID_MILLILITER = "LIQUID_MILLILITER"
    LIQUID_OUNCE = "LIQUID_OUNCE"
    LIQUID_PINT = "LIQUID_PINT"
    LIQUID_QUART = "LIQUID_QUART"
    LIQUID_TABLESPOON = "LIQUID_TABLESPOON"
    LIQUID_TEASPOON = "LIQUID_TEASPOON"
    SOLID_GRAM = "SOLID_GRAM"
    SOLID_KILOGRAM = "SOLID_KILOGRAM"
    SOLID_POUND = "SOLID_POUND"
    SOLID_LITER = "SOLID_LITER"
    SOLID_MILLIGRAM = "SOLID_MILLIGRAM"
    SOLID_OUNCE = "SOLID_OUNCE"
    SOLID_TABLESPOON = "SOLID_TABLESPOON"
    SOLID_TON = "SOLID_TON"
    SOLID_TEASPOON = "SOLID_TEASPOON"
    RADIOACTIVE_CURIE = "RADIOACTIVE_CURIE"
    RADIOACTIVE_MEGABECQUEREL = "RADIOACTIVE_MEGABECQUEREL"
    RADIOACTIVE_MILLICURIE = "RADIOACTIVE_MILLICURIE"
    RADIOACTIVE_TERABECQUEREL = "RADIOACTIVE_TERABECQUEREL"
    RADIOACTIVE_MICROCURIE = "RADIOACTIVE_MICROCURIE"


class PhysicalState(Enum):
    SOLID = "SOLID"
    LIQUID = "LIQUID"
    GAS = "GAS"
    RADIOACTIVE = "RADIOACTIVE"


class ReleasedInto(Enum):
    AIR = "AIR"
    WATER = "WATER"
    GROUND = "GROUND"


class Cause1(Enum):
    INTENTIONAL = "INTENTIONAL"
    UNINTENTIONAL = "UNINTENTIONAL"
    CONTAINER_CONTAINMENT_FAILURE = "CONTAINER_CONTAINMENT_FAILURE"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    CAUSE_UNDER_INVESTIGATION = "CAUSE_UNDER_INVESTIGATION"


class Type32(Enum):
    REMOVAL = "REMOVAL"


class RoomType(Enum):
    BATHROOM = "BATHROOM"
    BEDROOM = "BEDROOM"
    KITCHEN = "KITCHEN"
    LIVING_SPACE = "LIVING_SPACE"
    HALLWAY_FOYER = "HALLWAY_FOYER"
    GARAGE = "GARAGE"
    BALCONY_PORCH_DECK = "BALCONY_PORCH_DECK"
    BASEMENT = "BASEMENT"
    ATTIC = "ATTIC"
    OFFICE = "OFFICE"
    UTILITY_ROOM = "UTILITY_ROOM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class ElevationType(Enum):
    ON_FLOOR = "ON_FLOOR"
    ON_BED = "ON_BED"
    ON_FURNITURE = "ON_FURNITURE"
    OTHER = "OTHER"


class RescuePathType(Enum):
    REMOVAL_ALONG_PRIMARY_PATH = "REMOVAL_ALONG_PRIMARY_PATH"
    REMOVAL_ALONG_ALT_PATH = "REMOVAL_ALONG_ALT_PATH"


class ShiftPayload(BaseModel):
    count: Optional[int] = Field(None, title="Count")
    duration: Optional[int] = Field(None, title="Duration")
    signup: Optional[int] = Field(None, title="Signup")


class ShiftResponse(BaseModel):
    count: Optional[int] = Field(None, title="Count")
    duration: Optional[int] = Field(None, title="Duration")
    signup: Optional[int] = Field(None, title="Signup")


class Type33(Enum):
    WORKING_ALERTED_OCCUPANT = "WORKING_ALERTED_OCCUPANT"


class OccupantAction(Enum):
    EVACUATED = "EVACUATED"
    IGNORED_ALARM = "IGNORED_ALARM"
    UNABLE_TO_RESPOND = "UNABLE_TO_RESPOND"
    ATTEMPTED_TO_EXTINGUISH = "ATTEMPTED_TO_EXTINGUISH"
    ATTEMPTED_TO_RESCUE_OCCUPANTS = "ATTEMPTED_TO_RESCUE_OCCUPANTS"
    ATTEMPTED_TO_RESCUE_ANIMALS = "ATTEMPTED_TO_RESCUE_ANIMALS"
    UNKNOWN = "UNKNOWN"


class Type34(Enum):
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"


class FailureReason2(Enum):
    EXPIRED = "EXPIRED"
    NO_BATTERY = "NO_BATTERY"
    IMPROPER_INSTALLATION = "IMPROPER_INSTALLATION"
    DEVICE_MALFUNCTION = "DEVICE_MALFUNCTION"
    TAMPER = "TAMPER"
    OTHER_NON_FUNCTIONAL_CAUSE = "OTHER_NON_FUNCTIONAL_CAUSE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class Type35(Enum):
    NOT_PRESENT = "NOT_PRESENT"
    NOT_APPLICABLE = "NOT_APPLICABLE"


class SmokeAlarmNotPresent(BaseModel):
    type: Literal["NOT_APPLICABLE", "NOT_PRESENT"] = Field(..., title="Type")


class Type36(Enum):
    PRESENT = "PRESENT"


class SortDirection(Enum):
    ASCENDING = "ASCENDING"
    DESCENDING = "DESCENDING"


class StaffingPayload(BaseModel):
    active_firefighters_career_ft: Optional[int] = Field(
        None, title="Active Firefighters Career Ft"
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title="Active Firefighters Career Pt"
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title="Active Firefighters Volunteer"
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title="Active Ems Only Career Ft")
    active_ems_only_career_pt: Optional[int] = Field(None, title="Active Ems Only Career Pt")
    active_ems_only_volunteer: Optional[int] = Field(None, title="Active Ems Only Volunteer")
    active_civilians_career_ft: Optional[int] = Field(None, title="Active Civilians Career Ft")
    active_civilians_career_pt: Optional[int] = Field(None, title="Active Civilians Career Pt")
    active_civilians_volunteer: Optional[int] = Field(None, title="Active Civilians Volunteer")


class StaffingResponse(BaseModel):
    active_firefighters_career_ft: Optional[int] = Field(
        None, title="Active Firefighters Career Ft"
    )
    active_firefighters_career_pt: Optional[int] = Field(
        None, title="Active Firefighters Career Pt"
    )
    active_firefighters_volunteer: Optional[int] = Field(
        None, title="Active Firefighters Volunteer"
    )
    active_ems_only_career_ft: Optional[int] = Field(None, title="Active Ems Only Career Ft")
    active_ems_only_career_pt: Optional[int] = Field(None, title="Active Ems Only Career Pt")
    active_ems_only_volunteer: Optional[int] = Field(None, title="Active Ems Only Volunteer")
    active_civilians_career_ft: Optional[int] = Field(None, title="Active Civilians Career Ft")
    active_civilians_career_pt: Optional[int] = Field(None, title="Active Civilians Career Pt")
    active_civilians_volunteer: Optional[int] = Field(None, title="Active Civilians Volunteer")


class StatesTerrsOutput(Enum):
    AL = "AL"
    AK = "AK"
    AS = "AS"
    AZ = "AZ"
    AR = "AR"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DE = "DE"
    DC = "DC"
    FL = "FL"
    GA = "GA"
    GU = "GU"
    HI = "HI"
    ID = "ID"
    IL = "IL"
    IN = "IN"
    IA = "IA"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    ME = "ME"
    MD = "MD"
    MA = "MA"
    MI = "MI"
    MN = "MN"
    MS = "MS"
    MO = "MO"
    MP = "MP"
    MT = "MT"
    NA = "NA"
    NE = "NE"
    NV = "NV"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NY = "NY"
    NC = "NC"
    ND = "ND"
    OH = "OH"
    OK = "OK"
    OR = "OR"
    PA = "PA"
    PR = "PR"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VT = "VT"
    VA = "VA"
    VI = "VI"
    WA = "WA"
    WV = "WV"
    WI = "WI"
    WY = "WY"


class StationSummaryInfoResponse(BaseModel):
    neris_id: str = Field(..., title="Neris Id")
    station_id: str = Field(..., title="Station Id")
    address_line_1: str = Field(..., title="Address Line 1")
    city: str = Field(..., title="City")
    state: StatesTerrsOutput
    zip_code: str = Field(..., title="Zip Code")
    location: Optional[str] = Field(None, title="Location")


class Type37(Enum):
    STRUCTURE = "STRUCTURE"


class TypeActionTacticValue(Enum):
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR_AND_INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR_AND_INTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__ESTABLISH_FIRE_LINES = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||ESTABLISH FIRE LINES"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__CONFINEMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||CONFINEMENT"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__STRUCTURE_PROTECTION = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||STRUCTURE_PROTECTION"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__FIRE_CONTROL_EXTINGUISHMENT = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||FIRE_CONTROL_EXTINGUISHMENT"
    )
    VENTILATION__VERTICAL__PRIOR_TO_SUPPRESSION = "VENTILATION||VERTICAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__VERTICAL__DURING_SUPPRESSION = "VENTILATION||VERTICAL||DURING_SUPPRESSION"
    VENTILATION__VERTICAL__POST_SUPPRESSION = "VENTILATION||VERTICAL||POST_SUPPRESSION"
    VENTILATION__HORIZONTAL__PRIOR_TO_SUPPRESSION = "VENTILATION||HORIZONTAL||PRIOR_TO_SUPPRESSION"
    VENTILATION__HORIZONTAL__DURING_SUPPRESSION = "VENTILATION||HORIZONTAL||DURING_SUPPRESSION"
    VENTILATION__HORIZONTAL__POST_SUPPRESSION = "VENTILATION||HORIZONTAL||POST_SUPPRESSION"
    VENTILATION__POSITIVE_PRESSURE__PRIOR_TO_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||PRIOR_TO_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__DURING_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||DURING_SUPPRESSION"
    )
    VENTILATION__POSITIVE_PRESSURE__POST_SUPPRESSION = (
        "VENTILATION||POSITIVE_PRESSURE||POST_SUPPRESSION"
    )
    VENTILATION__HYDRAULIC__PRIOR_TO_SUPPRESSION = "VENTILATION||HYDRAULIC||PRIOR_TO_SUPPRESSION"
    VENTILATION__HYDRAULIC__DURING_SUPPRESSION = "VENTILATION||HYDRAULIC||DURING_SUPPRESSION"
    VENTILATION__HYDRAULIC__POST_SUPPRESSION = "VENTILATION||HYDRAULIC||POST_SUPPRESSION"
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__DOOR_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||DOOR_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__PRIOR_TO_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||PRIOR_TO_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__DURING_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||DURING_SUPPRESSION"
    )
    SEARCH_STRUCTURE__WINDOW_INITIATED_SEARCH__POST_SUPPRESSION = (
        "SEARCH_STRUCTURE||WINDOW_INITIATED_SEARCH||POST_SUPPRESSION"
    )
    NON_STRUCTURE_SEARCH__SEARCH_AREA_OF_COLLAPSE = "NON_STRUCTURE_SEARCH||SEARCH_AREA_OF_COLLAPSE"
    NON_STRUCTURE_SEARCH__SEARCH_UNDERGROUND_INFRASTRUCTURE = (
        "NON_STRUCTURE_SEARCH||SEARCH_UNDERGROUND_INFRASTRUCTURE"
    )
    NON_STRUCTURE_SEARCH__WIDE_AREA_OUTDOOR_SEARCH = (
        "NON_STRUCTURE_SEARCH||WIDE_AREA/OUTDOOR_SEARCH"
    )
    NON_STRUCTURE_SEARCH__SEARCH_WATERWAY = "NON_STRUCTURE_SEARCH||SEARCH_WATERWAY"
    NON_STRUCTURE_SEARCH__BODY_RECOVERY = "NON_STRUCTURE_SEARCH||BODY_RECOVERY"
    NON_STRUCTURE_SEARCH__USAR_K9_SEARCH = "NON_STRUCTURE_SEARCH||USAR_K9_SEARCH"
    SALVAGE_AND_OVERHAUL = "SALVAGE_AND_OVERHAUL"
    PERSONNEL_CONTAMINATION_REDUCTION__ON_SCENE_CONTAMINATION_REDUCTION = (
        "PERSONNEL_CONTAMINATION_REDUCTION||ON-SCENE_CONTAMINATION_REDUCTION"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__CLEAN_CAB_TRANSPORT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||CLEAN_CAB_TRANSPORT"
    )
    PERSONNEL_CONTAMINATION_REDUCTION__PPE_WASHED_POST_INCIDENT = (
        "PERSONNEL_CONTAMINATION_REDUCTION||PPE_WASHED_POST-INCIDENT"
    )
    HAZARDOUS_SITUATION_MITIGATION__TAKE_SAMPLES = "HAZARDOUS_SITUATION_MITIGATION||TAKE_SAMPLES"
    EMERGENCY_MEDICAL_CARE__PATIENT_ASSESSMENT = "EMERGENCY_MEDICAL_CARE||PATIENT_ASSESSMENT"
    EMERGENCY_MEDICAL_CARE__PROVIDE_BASIC_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_BASIC_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_ADVANCED_LIFE_SUPPORT = (
        "EMERGENCY_MEDICAL_CARE||PROVIDE_ADVANCED_LIFE_SUPPORT"
    )
    EMERGENCY_MEDICAL_CARE__PROVIDE_TRANSPORT = "EMERGENCY_MEDICAL_CARE||PROVIDE_TRANSPORT"
    EMERGENCY_MEDICAL_CARE__PATIENT_REFERRAL = "EMERGENCY_MEDICAL_CARE||PATIENT_REFERRAL"
    COMMAND_AND_CONTROL__ESTABLISH_INCIDENT_COMMAND = (
        "COMMAND_AND_CONTROL||ESTABLISH_INCIDENT_COMMAND"
    )
    COMMAND_AND_CONTROL__SAFETY_OFFICER_ASSIGNED = "COMMAND_AND_CONTROL||SAFETY_OFFICER_ASSIGNED"
    COMMAND_AND_CONTROL__PIO_ASSIGNED = "COMMAND_AND_CONTROL||PIO_ASSIGNED"
    COMMAND_AND_CONTROL__NOTIFY_OTHER_AGENCIES = "COMMAND_AND_CONTROL||NOTIFY_OTHER_AGENCIES"
    COMMAND_AND_CONTROL__INCIDENT_ASSESSMENT_COMPLETED = (
        "COMMAND_AND_CONTROL||INCIDENT_ASSESSMENT_COMPLETED"
    )
    COMMAND_AND_CONTROL__ACCOUNTABILITY_OFFICER_ASSIGNED = (
        "COMMAND_AND_CONTROL||ACCOUNTABILITY_OFFICER_ASSIGNED"
    )
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__INTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||INTERIOR"
    )
    SUPPRESSION__STRUCTURAL_FIRE_SUPPRESSION__EXTERIOR = (
        "SUPPRESSION||STRUCTURAL_FIRE_SUPPRESSION||EXTERIOR"
    )
    SUPPRESSION__OUTSIDE_FIRE_SUPPRESSION__BACKBURN = (
        "SUPPRESSION||OUTSIDE_FIRE_SUPPRESSION||BACKBURN"
    )
    HAZARDOUS_SITUATION_MITIGATION__SPILL_CONTROL = "HAZARDOUS_SITUATION_MITIGATION||SPILL_CONTROL"
    HAZARDOUS_SITUATION_MITIGATION__LEAK_STOP = "HAZARDOUS_SITUATION_MITIGATION||LEAK_STOP"
    HAZARDOUS_SITUATION_MITIGATION__REMOVE_HAZARD = "HAZARDOUS_SITUATION_MITIGATION||REMOVE_HAZARD"
    HAZARDOUS_SITUATION_MITIGATION__DECONTAMINATION = (
        "HAZARDOUS_SITUATION_MITIGATION||DECONTAMINATION"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_INTERIOR = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_INTERIOR"
    )
    HAZARDOUS_SITUATION_MITIGATION__ATMOSPHERIC_MONITORING_EXTERIOR_FENCELINE = (
        "HAZARDOUS_SITUATION_MITIGATION||ATMOSPHERIC_MONITORING_EXTERIOR/FENCELINE"
    )
    PROVIDE_EVACUATION_SUPPORT__CONNECTED_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||CONNECTED_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__REMOTE_INTERIOR_SPACES = (
        "PROVIDE_EVACUATION_SUPPORT||REMOTE_INTERIOR_SPACES"
    )
    PROVIDE_EVACUATION_SUPPORT__NEARBY_BUILDINGS = "PROVIDE_EVACUATION_SUPPORT||NEARBY_BUILDINGS"
    PROVIDE_EVACUATION_SUPPORT__LARGE_AREA = "PROVIDE_EVACUATION_SUPPORT||LARGE_AREA"
    PROVIDE_EQUIPMENT__PROVIDE_SPECIAL_EQUIPMENT = "PROVIDE_EQUIPMENT||PROVIDE_SPECIAL_EQUIPMENT"
    PROVIDE_EQUIPMENT__PROVIDE_LIGHT = "PROVIDE_EQUIPMENT||PROVIDE_LIGHT"
    PROVIDE_EQUIPMENT__PROVIDE_ELECTRICAL_POWER = "PROVIDE_EQUIPMENT||PROVIDE_ELECTRICAL_POWER"
    PROVIDE_EQUIPMENT__PROVIDE_DRONE_VIDEO_EQUIPMENT = (
        "PROVIDE_EQUIPMENT||PROVIDE_DRONE/VIDEO_EQUIPMENT"
    )
    PROVIDE_SERVICES__RESTORE_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||RESTORE_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__RESTORE_RESET_ALARM_SYSTEM = "PROVIDE_SERVICES||RESTORE/RESET_ALARM_SYSTEM"
    PROVIDE_SERVICES__SHUT_DOWN_ALARM = "PROVIDE_SERVICES||SHUT_DOWN_ALARM"
    PROVIDE_SERVICES__SHUT_DOWN_SPRINKLER_SYSTEM = "PROVIDE_SERVICES||SHUT_DOWN_SPRINKLER_SYSTEM"
    PROVIDE_SERVICES__SECURE_PROPERTY = "PROVIDE_SERVICES||SECURE_PROPERTY"
    PROVIDE_SERVICES__REMOVE_WATER = "PROVIDE_SERVICES||REMOVE_WATER"
    PROVIDE_SERVICES__ASSIST_UNINJURED_PERSON = "PROVIDE_SERVICES||ASSIST_UNINJURED_PERSON"
    PROVIDE_SERVICES__ASSIST_ANIMAL = "PROVIDE_SERVICES||ASSIST_ANIMAL"
    PROVIDE_SERVICES__PROVIDE_APPARATUS_WATER = "PROVIDE_SERVICES||PROVIDE_APPARATUS/WATER"
    PROVIDE_SERVICES__CONTROL_CROWD = "PROVIDE_SERVICES||CONTROL_CROWD"
    PROVIDE_SERVICES__CONTROL_TRAFFIC = "PROVIDE_SERVICES||CONTROL_TRAFFIC"
    PROVIDE_SERVICES__DAMAGE_ASSESSMENT = "PROVIDE_SERVICES||DAMAGE_ASSESSMENT"
    INFORMATION_ENFORCEMENT__REFER_TO_PROPER_AHJ = "INFORMATION_ENFORCEMENT||REFER_TO_PROPER_AHJ"
    INFORMATION_ENFORCEMENT__ENFORCE_CODE_OR_LAW = "INFORMATION_ENFORCEMENT||ENFORCE_CODE_OR_LAW"
    INFORMATION_ENFORCEMENT__FILL_MOVE_UP = "INFORMATION_ENFORCEMENT||FILL/MOVE-UP"
    INFORMATION_ENFORCEMENT__PROVIDE_PUBLIC_INFORMATION = (
        "INFORMATION_ENFORCEMENT||PROVIDE_PUBLIC_INFORMATION"
    )


class TypeActionValue(Enum):
    CREATE = "CREATE"
    READ = "READ"
    UPDATE = "UPDATE"
    DELETE = "DELETE"


class TypeAidDirectionValue(Enum):
    GIVEN = "GIVEN"
    RECEIVED = "RECEIVED"


class TypeAidNonfdValue(Enum):
    LAW_ENFORCEMENT = "LAW_ENFORCEMENT"
    HOUSING = "HOUSING"
    UTILITIES = "UTILITIES"


class TypeAidValue(Enum):
    AUTO = "AUTO"
    MUTUAL = "MUTUAL"


class TypeAlarmFailureValue(Enum):
    EXPIRED = "EXPIRED"
    NO_BATTERY = "NO_BATTERY"
    IMPROPER_INSTALLATION = "IMPROPER_INSTALLATION"
    DEVICE_MALFUNCTION = "DEVICE_MALFUNCTION"
    TAMPER = "TAMPER"
    OTHER_NON_FUNCTIONAL_CAUSE = "OTHER_NON_FUNCTIONAL_CAUSE"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class TypeAlarmFireValue(Enum):
    MANUAL = "MANUAL"
    AUTOMATIC = "AUTOMATIC"
    MANUAL_AND_AUTOMATIC = "MANUAL_AND_AUTOMATIC"


class TypeAlarmOperationValue(Enum):
    WORKING_ALERTED_OCCUPANT = "WORKING_ALERTED_OCCUPANT"
    WORKING_FAILED_TO_ALERT_OCCUPANT = "WORKING_FAILED_TO_ALERT_OCCUPANT"
    NO_OCCUPANT_TO_NOTIFY = "NO_OCCUPANT_TO_NOTIFY"
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"
    INSUFFICENT_SOURCE = "INSUFFICENT_SOURCE"
    UNKNOWN = "UNKNOWN"


class TypeAlarmOtherValue(Enum):
    CARBON_MONOXIDE = "CARBON_MONOXIDE"
    NATURAL_GAS = "NATURAL_GAS"
    HEAT_DETECTOR = "HEAT_DETECTOR"
    OTHER_CHEMICAL_DETECTOR = "OTHER_CHEMICAL_DETECTOR"
    NONE = "NONE"


class TypeAlarmSmokeValue(Enum):
    LONG_LIFE_BATTERY_POWERED = "LONG_LIFE_BATTERY_POWERED"
    REPLACEABLE_BATTERY_POWERED = "REPLACEABLE_BATTERY_POWERED"
    HARDWIRED = "HARDWIRED"
    INTERCONNECTED = "INTERCONNECTED"
    HARD_OF_HEARING_WITH_STROBE = "HARD_OF_HEARING_WITH_STROBE"
    BED_SHAKER = "BED_SHAKER"
    COMBINATION = "COMBINATION"


class TypeCasualtyActionValue(Enum):
    SEARCH_RESCUE = "SEARCH_RESCUE"
    CARRYING_SETTINGUP_EQUIPMENT = "CARRYING_SETTINGUP_EQUIPMENT"
    ADVANCING_OPERATING_HOSELINE = "ADVANCING_OPERATING_HOSELINE"
    VEHICLE_EXTRICATION = "VEHICLE_EXTRICATION"
    VENTILATION = "VENTILATION"
    FORCIBLE_ENTRY = "FORCIBLE_ENTRY"
    PUMP_OPERATIONS = "PUMP_OPERATIONS"
    EMS_PATIENT_CARE = "EMS_PATIENT_CARE"
    DURING_INCIDENT_RESPONSE = "DURING_INCIDENT_RESPONSE"
    SCENE_SAFETY_DIRECTING_TRAFFIC = "SCENE_SAFETY_DIRECTING_TRAFFIC"
    STANDBY = "STANDBY"
    INCIDENT_COMMAND = "INCIDENT_COMMAND"
    OTHER = "OTHER"


class TypeCasualtyCauseValue(Enum):
    CAUGHT_TRAPPED_BY_FIRE_EXPLOSION = "CAUGHT_TRAPPED_BY_FIRE_EXPLOSION"
    FALL_JUMP = "FALL_JUMP"
    STRESS_OVEREXERTION = "STRESS_OVEREXERTION"
    COLLAPSE = "COLLAPSE"
    CAUGHT_TRAPPED_BY_OBJECT = "CAUGHT_TRAPPED_BY_OBJECT"
    STRUCK_CONTACT_WITH_OBJECT = "STRUCK_CONTACT_WITH_OBJECT"
    EXPOSURE = "EXPOSURE"
    VEHICLE_COLLISION = "VEHICLE_COLLISION"
    OTHER = "OTHER"


class TypeCasualtyPpeValue(Enum):
    TURNOUT_COAT = "TURNOUT_COAT"
    BUNKER_PANTS = "BUNKER_PANTS"
    PROTECTIVE_HOOD = "PROTECTIVE_HOOD"
    GLOVES = "GLOVES"
    FACE_SHIELD_GOGGLES = "FACE_SHIELD_GOGGLES"
    HELMET = "HELMET"
    SCBA = "SCBA"
    PASS_DEVICE = "PASS_DEVICE"
    RUBBER_KNEE_BOOOTS = "RUBBER_KNEE_BOOOTS"
    field_3_4_BOOTS = "3_4_BOOTS"
    BRUSH_GEAR = "BRUSH_GEAR"
    REFLECTIVE_VEST = "REFLECTIVE_VEST"
    OTHER_SPECIAL_EQUIPMENT = "OTHER_SPECIAL_EQUIPMENT"


class TypeCasualtyTimelineValue(Enum):
    RESPONDING = "RESPONDING"
    INITIAL_ATTACK = "INITIAL_ATTACK"
    CONITNUING_OPERATIONS = "CONITNUING_OPERATIONS"
    EXTENDED_OPERATIONS = "EXTENDED_OPERATIONS"
    AFTER_CONCLUSIONS_OF_INCIDENT = "AFTER_CONCLUSIONS_OF_INCIDENT"
    UNKNOWN = "UNKNOWN"


class TypeDeptValue(Enum):
    CAREER = "CAREER"
    VOLUNTEER = "VOLUNTEER"
    COMBINATION = "COMBINATION"


class TypeDispProtoFireValue(Enum):
    PROQA = "PROQA"
    IAED = "IAED"
    APCO = "APCO"
    OTHER = "OTHER"


class TypeDispProtoMedValue(Enum):
    PROQA = "PROQA"
    IAED = "IAED"
    APCO = "APCO"
    OTHER = "OTHER"


class TypeDisplaceCauseValue(Enum):
    FIRE = "FIRE"
    SMOKE = "SMOKE"
    WATER = "WATER"
    UTILITIES = "UTILITIES"
    HAZARDOUS_SITUATION = "HAZARDOUS_SITUATION"
    COLLAPSE = "COLLAPSE"
    OTHER = "OTHER"


class TypeDutyValue(Enum):
    RESPONDING_TO_EMERGENCY_INCIDENT = "RESPONDING_TO_EMERGENCY_INCIDENT"
    WORKING_AT_SCENE_OF_FIRE_INCIDENT = "WORKING_AT_SCENE_OF_FIRE_INCIDENT"
    WORKING_AT_SCENE_OF_NONFIRE_INCIDENT = "WORKING_AT_SCENE_OF_NONFIRE_INCIDENT"
    RETURNING_FROM_EMERGENCY_INCIDENT = "RETURNING_FROM_EMERGENCY_INCIDENT"
    TRAINING = "TRAINING"
    AFTER_INCIDENT = "AFTER_INCIDENT"
    OTHER_ON_DUTY_INCIDENT = "OTHER_ON_DUTY_INCIDENT"


class TypeEmerghazElecValue(Enum):
    CONSUMER_PRODUCTS__APPLIANCE_TOOL = "CONSUMER_PRODUCTS||APPLIANCE_TOOL"
    CONSUMER_PRODUCTS__CELL_PHONE = "CONSUMER_PRODUCTS||CELL_PHONE"
    CONSUMER_PRODUCTS__COMPUTER_TABLET = "CONSUMER_PRODUCTS||COMPUTER_TABLET"
    CONSUMER_PRODUCTS__ELECTRONIC_CIGARETTE = "CONSUMER_PRODUCTS||ELECTRONIC_CIGARETTE"
    CONSUMER_PRODUCTS__POWER_BANK = "CONSUMER_PRODUCTS||POWER_BANK"
    CONSUMER_PRODUCTS__TOY = "CONSUMER_PRODUCTS||TOY"
    CONSUMER_PRODUCTS__OTHER = "CONSUMER_PRODUCTS||OTHER"
    ENERGY_STORAGE_SYSTEM__HYDROELECTRIC = "ENERGY_STORAGE_SYSTEM||HYDROELECTRIC"
    ENERGY_STORAGE_SYSTEM__BATTERY = "ENERGY_STORAGE_SYSTEM||BATTERY"
    ENERGY_STORAGE_SYSTEM__COMPRESSED_AIR = "ENERGY_STORAGE_SYSTEM||COMPRESSED_AIR"
    ENERGY_STORAGE_SYSTEM__FLYWHEEL = "ENERGY_STORAGE_SYSTEM||FLYWHEEL"
    ENERGY_STORAGE_SYSTEM__OTHER = "ENERGY_STORAGE_SYSTEM||OTHER"
    E_MOBILITY__POWER_ASSISTED_BICYCLE = "E_MOBILITY||POWER_ASSISTED_BICYCLE"
    E_MOBILITY__ELECTRIC_SCOOTER_MOPED = "E_MOBILITY||ELECTRIC_SCOOTER_MOPED"
    E_MOBILITY__PERSONAL_MOBILITY_ASSIST = "E_MOBILITY||PERSONAL_MOBILITY_ASSIST"
    E_MOBILITY__OTHER = "E_MOBILITY||OTHER"
    ELECTRIC_VEHICLE__CAR_RR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||CAR_RR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__CAR_RR__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||CAR_RR||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__CAR_RR__HYBRID = "ELECTRIC_VEHICLE||CAR_RR||HYBRID"
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__TRUCK_PASSENGER_RR__HYBRID = "ELECTRIC_VEHICLE||TRUCK_PASSENGER_RR||HYBRID"
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__TRUCK_COMMERCIAL_RR__HYBRID = "ELECTRIC_VEHICLE||TRUCK_COMMERCIAL_RR||HYBRID"
    ELECTRIC_VEHICLE__BUS_RR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||BUS_RR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__BUS_RR__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||BUS_RR||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__BUS_RR__HYBRID = "ELECTRIC_VEHICLE||BUS_RR||HYBRID"
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__BOAT_RECREATIONAL__HYBRID = "ELECTRIC_VEHICLE||BOAT_RECREATIONAL||HYBRID"
    ELECTRIC_VEHICLE__BOAT_COMMERICAL__FULL_ELECTRIC = (
        "ELECTRIC_VEHICLE||BOAT_COMMERICAL||FULL_ELECTRIC"
    )
    ELECTRIC_VEHICLE__BOAT_COMMERICAL__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||BOAT_COMMERICAL||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__BOAT_COMMERICAL__HYBRID = "ELECTRIC_VEHICLE||BOAT_COMMERICAL||HYBRID"
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__FULL_ELECTRIC = "ELECTRIC_VEHICLE||LIGHT_EV_NRR||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__PLUG_IN_HYBRID = (
        "ELECTRIC_VEHICLE||LIGHT_EV_NRR||PLUG_IN_HYBRID"
    )
    ELECTRIC_VEHICLE__LIGHT_EV_NRR__HYBRID = "ELECTRIC_VEHICLE||LIGHT_EV_NRR||HYBRID"
    ELECTRIC_VEHICLE__OTHER__FULL_ELECTRIC = "ELECTRIC_VEHICLE||OTHER||FULL_ELECTRIC"
    ELECTRIC_VEHICLE__OTHER__PLUG_IN_HYBRID = "ELECTRIC_VEHICLE||OTHER||PLUG_IN_HYBRID"
    ELECTRIC_VEHICLE__OTHER__HYBRID = "ELECTRIC_VEHICLE||OTHER||HYBRID"


class TypeEmerghazPvIgnValue(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"


class TypeEmerghazPvValue(Enum):
    PANEL_WATER_HEATING = "PANEL_WATER_HEATING"
    PANEL_POWER_GENERATION = "PANEL_POWER_GENERATION"
    TILE_POWER_GENERATION = "TILE_POWER_GENERATION"
    THIN_FILM_POWER_GENERATION = "THIN_FILM_POWER_GENERATION"


class TypeEmerghazSuppressionValue(Enum):
    RUN_COURSE = "RUN_COURSE"
    SUPPRESSION_WATER_ONLY = "SUPPRESSION_WATER_ONLY"
    SUPPRESSION_WATER_ADDITIVE = "SUPPRESSION_WATER_ADDITIVE"
    SUBMERGE_BURY = "SUBMERGE_BURY"
    FIRE_BLANKET = "FIRE_BLANKET"
    BATTERY_PENETRATION = "BATTERY_PENETRATION"


class TypeEntitySetValue(Enum):
    ALL = "ALL"
    NONE = "NONE"
    INDIVIDUAL = "INDIVIDUAL"
    STATE = "STATE"
    FEDERAL = "FEDERAL"
    NGO = "NGO"


class TypeEntityValue(Enum):
    LOCAL = "LOCAL"
    TRIBAL_GOVT = "TRIBAL_GOVT"
    PRIVATE = "PRIVATE"
    DOD = "DOD"
    SFM = "SFM"
    FEDERAL = "FEDERAL"


class TypeExposureDamageValue(Enum):
    NO_DAMAGE = "NO_DAMAGE"
    MINOR_DAMAGE = "MINOR_DAMAGE"
    MODERATE_DAMAGE = "MODERATE_DAMAGE"
    MAJOR_DAMAGE = "MAJOR_DAMAGE"


class TypeExposureItemValue(Enum):
    STRUCTURE = "STRUCTURE"
    VEHICLE = "VEHICLE"
    OUTDOOR_ENVIRONMENT = "OUTDOOR_ENVIRONMENT"
    OBJECT_OTHER = "OBJECT_OTHER"


class TypeFireBldgDamageValue(Enum):
    NO_DAMAGE = "NO_DAMAGE"
    MINOR_DAMAGE = "MINOR_DAMAGE"
    MODERATE_DAMAGE = "MODERATE_DAMAGE"
    MAJOR_DAMAGE = "MAJOR_DAMAGE"


class TypeFireCauseInValue(Enum):
    OPERATING_EQUIPMENT = "OPERATING_EQUIPMENT"
    ELECTRICAL = "ELECTRICAL"
    BATTERY_POWER_STORAGE = "BATTERY_POWER_STORAGE"
    HEAT_FROM_ANOTHER_OBJECT = "HEAT_FROM_ANOTHER_OBJECT"
    EXPLOSIVES_FIREWORKS = "EXPLOSIVES_FIREWORKS"
    SMOKING_MATERIALS_ILLICIT_DRUGS = "SMOKING_MATERIALS_ILLICIT_DRUGS"
    OPEN_FLAME = "OPEN_FLAME"
    COOKING = "COOKING"
    CHEMICAL = "CHEMICAL"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    INCENDIARY = "INCENDIARY"
    OTHER_HEAT_SOURCE = "OTHER_HEAT_SOURCE"
    UNABLE_TO_BE_DETERMINED = "UNABLE_TO_BE_DETERMINED"


class TypeFireCauseOutValue(Enum):
    NATURAL = "NATURAL"
    EQUIPMENT_VEHICLE_USE = "EQUIPMENT_VEHICLE_USE"
    SMOKING_MATERIALS_ILLICIT_DRUGS = "SMOKING_MATERIALS_ILLICIT_DRUGS"
    RECREATION_CEREMONY = "RECREATION_CEREMONY"
    DEBRIS_OPEN_BURNING = "DEBRIS_OPEN_BURNING"
    RAILROAD_OPS_MAINTENANCE = "RAILROAD_OPS_MAINTENANCE"
    FIREAMRS_EXPLOSIVES = "FIREAMRS_EXPLOSIVES"
    FIREWORKS = "FIREWORKS"
    POWER_GEN_TRANS_DIST = "POWER_GEN_TRANS_DIST"
    STRUCTURE = "STRUCTURE"
    INCENDIARY = "INCENDIARY"
    BATTERY_POWER_STORAGE = "BATTERY_POWER_STORAGE"
    SPREAD_FROM_CONTROLLED_BURN = "SPREAD_FROM_CONTROLLED_BURN"
    UNABLE_TO_BE_DETERMINED = "UNABLE_TO_BE_DETERMINED"


class TypeFireConditionArrivalValue(Enum):
    NO_SMOKE_FIRE_SHOWING = "NO_SMOKE_FIRE_SHOWING"
    SMOKE_SHOWING = "SMOKE_SHOWING"
    SMOKE_FIRE_SHOWING = "SMOKE_FIRE_SHOWING"
    STRUCTURE_INVOLVED = "STRUCTURE_INVOLVED"
    FIRE_SPREAD_BEYOND_STRUCTURE = "FIRE_SPREAD_BEYOND_STRUCTURE"
    FIRE_OUT_UPON_ARRIVAL = "FIRE_OUT_UPON_ARRIVAL"


class TypeFireInvestNeedValue(Enum):
    YES = "YES"
    NO = "NO"
    NOT_EVALUATED = "NOT_EVALUATED"
    NOT_APPLICABLE = "NOT_APPLICABLE"
    NO_CAUSE_OBVIOUS = "NO_CAUSE_OBVIOUS"
    OTHER = "OTHER"


class TypeFireInvestValue(Enum):
    INVESTIGATED_ON_SCENE_RESOURCE = "INVESTIGATED_ON_SCENE_RESOURCE"
    INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR = "INVESTIGATED_BY_ARSON_FIRE_INVESTIGATOR"
    INVESTIGATED_BY_OUTSIDE_AGENCY = "INVESTIGATED_BY_OUTSIDE_AGENCY"
    INVESTIGATED_BY_STATE_FIRE_MARSHAL = "INVESTIGATED_BY_STATE_FIRE_MARSHAL"
    INVESTIGATED_BY_INSURANCE = "INVESTIGATED_BY_INSURANCE"
    INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT = "INVESTIGATED_BY_NONFIRE_LAW_ENFORCEMENT"
    INVESTIGATED_BY_OTHER = "INVESTIGATED_BY_OTHER"


class TypeGenderValue(Enum):
    MALE = "MALE"
    FEMALE = "FEMALE"
    UNSPECIFIED_ANOTHER_GENDER_IDENTITY = "UNSPECIFIED_ANOTHER_GENDER_IDENTITY"


class TypeGeoSourceValue(Enum):
    DEPT_UPLOAD = "DEPT_UPLOAD"
    DEPT_FILE = "DEPT_FILE"
    AWS = "AWS"


class TypeHazardCauseValue(Enum):
    INTENTIONAL = "INTENTIONAL"
    UNINTENTIONAL = "UNINTENTIONAL"
    CONTAINER_CONTAINMENT_FAILURE = "CONTAINER_CONTAINMENT_FAILURE"
    ACT_OF_NATURE = "ACT_OF_NATURE"
    CAUSE_UNDER_INVESTIGATION = "CAUSE_UNDER_INVESTIGATION"


class TypeHazardDispositionValue(Enum):
    COMPLETED_FIRE_SERVICE_ONLY = "COMPLETED_FIRE_SERVICE_ONLY"
    COMPLETED_WITH_FIRE_SERVICE_PRESENT = "COMPLETED_WITH_FIRE_SERVICE_PRESENT"
    RELEASED_TO_LOCAL_AGENCY = "RELEASED_TO_LOCAL_AGENCY"
    RELEASED_TO_COUNTY_AGENCY = "RELEASED_TO_COUNTY_AGENCY"
    RELEASED_TO_STATE_AGENCY = "RELEASED_TO_STATE_AGENCY"
    RELEASED_TO_FEDERAL_AGENCY = "RELEASED_TO_FEDERAL_AGENCY"
    RELEASED_TO_PRIVATE_AGENCY = "RELEASED_TO_PRIVATE_AGENCY"
    RELEASED_TO_PROPERTY_OWNER = "RELEASED_TO_PROPERTY_OWNER"


class TypeHazardDotValue(Enum):
    EXPLOSIVES = "EXPLOSIVES"
    GASES = "GASES"
    FLAMMABLE_LIQUIDS = "FLAMMABLE_LIQUIDS"
    FLAMMABLE_SOLIDS = "FLAMMABLE_SOLIDS"
    OXIDIZERS = "OXIDIZERS"
    POISONS_AND_ETIOLOGIC_MATERIALS = "POISONS_AND_ETIOLOGIC_MATERIALS"
    RADIOACTIVE_MATERIALS = "RADIOACTIVE_MATERIALS"
    CORROSIVES = "CORROSIVES"
    MISCELLANEOUS_DANGEROUS_SUBSTANCES = "MISCELLANEOUS_DANGEROUS_SUBSTANCES"


class TypeHazardPhysicalStateValue(Enum):
    SOLID = "SOLID"
    LIQUID = "LIQUID"
    GAS = "GAS"
    RADIOACTIVE = "RADIOACTIVE"


class TypeHazardReleasedIntoValue(Enum):
    AIR = "AIR"
    WATER = "WATER"
    GROUND = "GROUND"


class TypeHazardUnitValue(Enum):
    GAS_CUBIC_FOOT = "GAS_CUBIC_FOOT"
    GAS_CUBIC_INCH = "GAS_CUBIC_INCH"
    GAS_CUBIC_CENTIMETER = "GAS_CUBIC_CENTIMETER"
    GAS_CUBIC_METER = "GAS_CUBIC_METER"
    GAS_POUND = "GAS_POUND"
    LIQUID_CUBIC_CENTIMETER = "LIQUID_CUBIC_CENTIMETER"
    LIQUID_CUP = "LIQUID_CUP"
    LIQUID_GALLON = "LIQUID_GALLON"
    LIQUID_GRAM = "LIQUID_GRAM"
    LIQUID_KILOGRAM = "LIQUID_KILOGRAM"
    LIQUID_POUND = "LIQUID_POUND"
    LIQUID_LITER = "LIQUID_LITER"
    LIQUID_MILLIGRAM = "LIQUID_MILLIGRAM"
    LIQUID_MILLILITER = "LIQUID_MILLILITER"
    LIQUID_OUNCE = "LIQUID_OUNCE"
    LIQUID_PINT = "LIQUID_PINT"
    LIQUID_QUART = "LIQUID_QUART"
    LIQUID_TABLESPOON = "LIQUID_TABLESPOON"
    LIQUID_TEASPOON = "LIQUID_TEASPOON"
    SOLID_GRAM = "SOLID_GRAM"
    SOLID_KILOGRAM = "SOLID_KILOGRAM"
    SOLID_POUND = "SOLID_POUND"
    SOLID_LITER = "SOLID_LITER"
    SOLID_MILLIGRAM = "SOLID_MILLIGRAM"
    SOLID_OUNCE = "SOLID_OUNCE"
    SOLID_TABLESPOON = "SOLID_TABLESPOON"
    SOLID_TON = "SOLID_TON"
    SOLID_TEASPOON = "SOLID_TEASPOON"
    RADIOACTIVE_CURIE = "RADIOACTIVE_CURIE"
    RADIOACTIVE_MEGABECQUEREL = "RADIOACTIVE_MEGABECQUEREL"
    RADIOACTIVE_MILLICURIE = "RADIOACTIVE_MILLICURIE"
    RADIOACTIVE_TERABECQUEREL = "RADIOACTIVE_TERABECQUEREL"
    RADIOACTIVE_MICROCURIE = "RADIOACTIVE_MICROCURIE"


class TypeIncidentValue(Enum):
    FIRE__TRANSPORTATION_FIRE__POWERED_MOBILITY_DEVICE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||POWERED_MOBILITY_DEVICE_FIRE"
    )
    FIRE__TRANSPORTATION_FIRE__TRAIN_RAIL_FIRE = "FIRE||TRANSPORTATION_FIRE||TRAIN_RAIL_FIRE"
    HAZSIT__HAZARD_NONCHEM__BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE = (
        "HAZSIT||HAZARD_NONCHEM||BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_HAZARD_SHORT_CIRCUIT = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_HAZARD_SHORT_CIRCUIT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__FUEL_SPILL_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||FUEL_SPILL_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__GAS_LEAK_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||GAS_LEAK_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__CARBON_MONOXIDE_RELEASE = (
        "HAZSIT||HAZARDOUS_MATERIALS||CARBON_MONOXIDE_RELEASE"
    )
    HAZSIT__HAZARDOUS_MATERIALS__BIOLOGICAL_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||BIOLOGICAL_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__RADIOACTIVE_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||RADIOACTIVE_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_TRANSPORT = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_TRANSPORT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_FACILITY = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_FACILITY"
    )
    HAZSIT__INVESTIGATION__SMOKE_INVESTIGATION = "HAZSIT||INVESTIGATION||SMOKE_INVESTIGATION"
    MEDICAL__ILLNESS__ABOMINAL_PAIN = "MEDICAL||ILLNESS||ABOMINAL_PAIN"
    MEDICAL__ILLNESS__BACK_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||BACK_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__BREAKING_PROBLEMS = "MEDICAL||ILLNESS||BREAKING_PROBLEMS"
    MEDICAL__ILLNESS__CARDIAC_ARREST = "MEDICAL||ILLNESS||CARDIAC_ARREST"
    MEDICAL__ILLNESS__CHEST_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||CHEST_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__CONVULSIONS_SEIZURES = "MEDICAL||ILLNESS||CONVULSIONS_SEIZURES"
    MEDICAL__ILLNESS__DIABETIC_PROBLEMS = "MEDICAL||ILLNESS||DIABETIC_PROBLEMS"
    MEDICAL__ILLNESS__HEADACHE = "MEDICAL||ILLNESS||HEADACHE"
    MEDICAL__ILLNESS__HEART_PROBLEMS = "MEDICAL||ILLNESS||HEART_PROBLEMS"
    MEDICAL__ILLNESS__PANDEMIC_EPIDEMIC_OUTBREAK = "MEDICAL||ILLNESS||PANDEMIC_EPIDEMIC_OUTBREAK"
    MEDICAL__ILLNESS__PREGNANCY_CHILDBIRTH = "MEDICAL||ILLNESS||PREGNANCY_CHILDBIRTH"
    MEDICAL__ILLNESS__PSYCHOLOGICAL_BEHAVIOR_ISSUES = (
        "MEDICAL||ILLNESS||PSYCHOLOGICAL_BEHAVIOR_ISSUES"
    )
    MEDICAL__ILLNESS__SICK_CASE = "MEDICAL||ILLNESS||SICK_CASE"
    MEDICAL__ILLNESS__STROKE_CVA = "MEDICAL||ILLNESS||STROKE_CVA"
    MEDICAL__ILLNESS__UNCONSCIOUS_VICTIM = "MEDICAL||ILLNESS||UNCONSCIOUS_VICTIM"
    MEDICAL__ILLNESS__WELL_PERSON_CHECK = "MEDICAL||ILLNESS||WELL_PERSON_CHECK"
    MEDICAL__ILLNESS__ALTERED_MENTAL_STATUS = "MEDICAL||ILLNESS||ALTERED_MENTAL_STATUS"
    MEDICAL__ILLNESS__NAUSEA = "MEDICAL||ILLNESS||NAUSEA"
    MEDICAL__ILLNESS__UNKNOWN_PROBLEM = "MEDICAL||ILLNESS||UNKNOWN_PROBLEM"
    MEDICAL__ILLNESS__NO_APPROPRIATE_CHOICE = "MEDICAL||ILLNESS||NO_APPROPRIATE_CHOICE"
    MEDICAL__INJURY__ANIMAL_BITES = "MEDICAL||INJURY||ANIMAL_BITES"
    MEDICAL__INJURY__ASSAULT = "MEDICAL||INJURY||ASSAULT"
    MEDICAL__INJURY__ALLERGIC_REACTION_STINGS = "MEDICAL||INJURY||ALLERGIC_REACTION_STINGS"
    MEDICAL__INJURY__BURNS_EXPLOSION = "MEDICAL||INJURY||BURNS_EXPLOSION"
    MEDICAL__INJURY__CARBON_MONOXIDE_OTHER_INHALATION_INJURY = (
        "MEDICAL||INJURY||CARBON_MONOXIDE_OTHER_INHALATION_INJURY"
    )
    MEDICAL__INJURY__CHOKING = "MEDICAL||INJURY||CHOKING"
    MEDICAL__INJURY__DROWNING_DIVING_SCUBA_ACCIDENT = (
        "MEDICAL||INJURY||DROWNING_DIVING_SCUBA_ACCIDENT"
    )
    MEDICAL__INJURY__FALL = "MEDICAL||INJURY||FALL"
    MEDICAL__INJURY__HEAT_COLD_EXPOSURE = "MEDICAL||INJURY||HEAT_COLD_EXPOSURE"
    MEDICAL__INJURY__MOTOR_VEHICLE_COLLISION = "MEDICAL||INJURY||MOTOR_VEHICLE_COLLISION"
    MEDICAL__INJURY__INDUSTRIAL_INACCESSIBLE_ENTRAPMENT = (
        "MEDICAL||INJURY||INDUSTRIAL_INACCESSIBLE_ENTRAPMENT"
    )
    MEDICAL__INJURY__OVERDOSE = "MEDICAL||INJURY||OVERDOSE"
    MEDICAL__INJURY__GUNSHOT_WOUND = "MEDICAL||INJURY||GUNSHOT_WOUND"
    MEDICAL__INJURY__HEMORRHAGE_LACERATION = "MEDICAL||INJURY||HEMORRHAGE_LACERATION"
    MEDICAL__INJURY__STAB_PENETRATING_TRAUMA = "MEDICAL||INJURY||STAB_PENETRATING_TRAUMA"
    MEDICAL__INJURY__OTHER_TRAUMATIC_INJURY = "MEDICAL||INJURY||OTHER_TRAUMATIC_INJURY"
    MEDICAL__OTHER__HEALTHCARE_PROFESSIONAL_ADMISSION = (
        "MEDICAL||OTHER||HEALTHCARE_PROFESSIONAL_ADMISSION"
    )
    MEDICAL__OTHER__MEDICAL_ALARM = "MEDICAL||OTHER||MEDICAL_ALARM"
    MEDICAL__OTHER__STANDBY_REQUEST = "MEDICAL||OTHER||STANDBY_REQUEST"
    MEDICAL__OTHER__TRANSFER_INTERFACILITY = "MEDICAL||OTHER||TRANSFER_INTERFACILITY"
    MEDICAL__OTHER__AIRMEDICAL_TRANSPORT = "MEDICAL||OTHER||AIRMEDICAL_TRANSPORT"
    MEDICAL__OTHER__INTERCEPT_OTHER_UNIT = "MEDICAL||OTHER||INTERCEPT_OTHER_UNIT"
    MEDICAL__OTHER__COMMUNITY_PUBLIC_HEALTH = "MEDICAL||OTHER||COMMUNITY_PUBLIC_HEALTH"
    PUBSERV__CITIZEN_ASSIST__LOST_PERSON = "PUBSERV||CITIZEN_ASSIST||LOST_PERSON"
    PUBSERV__CITIZEN_ASSIST__PERSON_IN_DISTRESS = "PUBSERV||CITIZEN_ASSIST||PERSON_IN_DISTRESS"
    PUBSERV__CITIZEN_ASSIST__CITIZEN_ASSIST_SERVICE_CALL = (
        "PUBSERV||CITIZEN_ASSIST||CITIZEN_ASSIST_SERVICE_CALL"
    )
    PUBSERV__CITIZEN_ASSIST__LIFE_ASSIST = "PUBSERV||CITIZEN_ASSIST||LIFE_ASSIST"
    PUBSERV__ALARMS_NONMED__FIRE_ALARM = "PUBSERV||ALARMS_NONMED||FIRE_ALARM"
    PUBSERV__ALARMS_NONMED__GAS_ALARM = "PUBSERV||ALARMS_NONMED||GAS_ALARM"
    PUBSERV__ALARMS_NONMED__CO_ALARM = "PUBSERV||ALARMS_NONMED||CO_ALARM"
    PUBSERV__ALARMS_NONMED__OTHER_ALARM = "PUBSERV||ALARMS_NONMED||OTHER_ALARM"
    PUBSERV__DISASTER_WEATHER__DAMAGE_ASSESSMENT = "PUBSERV||DISASTER_WEATHER||DAMAGE_ASSESSMENT"
    PUBSERV__DISASTER_WEATHER__WEATHER_RESPONSE = "PUBSERV||DISASTER_WEATHER||WEATHER_RESPONSE"
    PUBSERV__OTHER__STANDBY = "PUBSERV||OTHER||STANDBY"
    RESCUE__OUTSIDE__BACKOUNTRY_RESCUE = "RESCUE||OUTSIDE||BACKOUNTRY_RESCUE"
    FIRE__OUTSIDE_FIRE__CONSTRUCTION_WASTE = "FIRE||OUTSIDE_FIRE||CONSTRUCTION_WASTE"
    FIRE__OUTSIDE_FIRE__OTHER_OUTSIDE_FIRE = "FIRE||OUTSIDE_FIRE||OTHER_OUTSIDE_FIRE"
    FIRE__OUTSIDE_FIRE__OUTSIDE_TANK_FIRE = "FIRE||OUTSIDE_FIRE||OUTSIDE_TANK_FIRE"
    FIRE__OUTSIDE_FIRE__TRASH_RUBBISH_FIRE = "FIRE||OUTSIDE_FIRE||TRASH_RUBBISH_FIRE"
    FIRE__OUTSIDE_FIRE__VEGETATION_GRASS_FIRE = "FIRE||OUTSIDE_FIRE||VEGETATION_GRASS_FIRE"
    FIRE__OUTSIDE_FIRE__WILDFIRE_WILDLAND = "FIRE||OUTSIDE_FIRE||WILDFIRE_WILDLAND"
    FIRE__OUTSIDE_FIRE__WILDFIRE_URBAN_INTERFACE = "FIRE||OUTSIDE_FIRE||WILDFIRE_URBAN_INTERFACE"
    FIRE__OUTSIDE_FIRE__UTILITY_INFRASTRUCTURE_FIRE = (
        "FIRE||OUTSIDE_FIRE||UTILITY INFRASTRUCTURE FIRE"
    )
    FIRE__OUTSIDE_FIRE__DUMPSTER_OUTDOOR_CONTAINER_FIRE = (
        "FIRE||OUTSIDE_FIRE||DUMPSTER_OUTDOOR_CONTAINER_FIRE"
    )
    FIRE__SPECIAL_FIRE__ESS_FIRE = "FIRE||SPECIAL_FIRE||ESS_FIRE"
    FIRE__SPECIAL_FIRE__EXPLOSION = "FIRE||SPECIAL_FIRE||EXPLOSION"
    FIRE__SPECIAL_FIRE__INFRASTRUCTURE_FIRE = "FIRE||SPECIAL_FIRE||INFRASTRUCTURE_FIRE"
    FIRE__STRUCTURE_FIRE__STRUCTURAL_INVOLVEMENT_FIRE = (
        "FIRE||STRUCTURE_FIRE||STRUCTURAL_INVOLVEMENT_FIRE"
    )
    FIRE__STRUCTURE_FIRE__ROOM_AND_CONTENTS_FIRE = "FIRE||STRUCTURE_FIRE||ROOM_AND_CONTENTS_FIRE"
    FIRE__STRUCTURE_FIRE__CONFINED_COOKING_APPLIANCE_FIRE = (
        "FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE"
    )
    FIRE__STRUCTURE_FIRE__CHIMNEY_FIRE = "FIRE||STRUCTURE_FIRE||CHIMNEY_FIRE"
    FIRE__TRANSPORTATION_FIRE__AIRCRAFT_FIRE = "FIRE||TRANSPORTATION_FIRE||AIRCRAFT_FIRE"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_PASSENGER = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_PASSENGER"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_COMMERCIAL = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_COMMERCIAL"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_RV = "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_RV"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_FOOD_TRUCK = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_FOOD_TRUCK"
    )
    FIRE__TRANSPORTATION_FIRE__BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE"
    )
    PUBSERV__OTHER__MOVE_UP = "PUBSERV||OTHER||MOVE_UP"
    RESCUE__OUTSIDE__CONFINED_SPACE_RESCUE = "RESCUE||OUTSIDE||CONFINED_SPACE_RESCUE"
    RESCUE__OUTSIDE__TRENCH = "RESCUE||OUTSIDE||TRENCH"
    RESCUE__OUTSIDE__EXTRICATION_ENTRAPPED = "RESCUE||OUTSIDE||EXTRICATION_ENTRAPPED"
    RESCUE__OUTSIDE__HIGH_ANGLE_RESCUE = "RESCUE||OUTSIDE||HIGH_ANGLE_RESCUE"
    HAZSIT__INVESTIGATION__ODOR = "HAZSIT||INVESTIGATION||ODOR"
    RESCUE__OUTSIDE__LOW_ANGLE_RESCUE = "RESCUE||OUTSIDE||LOW_ANGLE_RESCUE"
    RESCUE__OUTSIDE__STEEP_ANGLE_RESCUE = "RESCUE||OUTSIDE||STEEP_ANGLE_RESCUE"
    RESCUE__OUTSIDE__LIMITED_NO_ACCESS = "RESCUE||OUTSIDE||LIMITED_NO_ACCESS"
    RESCUE__STRUCTURE__BUILDING_STRUCTURE_COLLAPSE = (
        "RESCUE||STRUCTURE||BUILDING_STRUCTURE_COLLAPSE"
    )
    RESCUE__STRUCTURE__CONFINED_SPACE_RESCUE = "RESCUE||STRUCTURE||CONFINED_SPACE_RESCUE"
    RESCUE__STRUCTURE__ELEVATOR_ESCALTOR_RESCUE = "RESCUE||STRUCTURE||ELEVATOR_ESCALTOR_RESCUE"
    RESCUE__STRUCTURE__EXTRICATION_ENTRAPPED = "RESCUE||STRUCTURE||EXTRICATION_ENTRAPPED"
    RESCUE__TRANSPORTATION__MOTOR_VEHICLE_EXTRICATION_ENTRAPPED = (
        "RESCUE||TRANSPORTATION||MOTOR_VEHICLE_EXTRICATION_ENTRAPPED"
    )
    RESCUE__TRANSPORTATION__TRAIN_RAIL_COLLISION_DERAILMENT = (
        "RESCUE||TRANSPORTATION||TRAIN_RAIL_COLLISION_DERAILMENT"
    )
    RESCUE__TRANSPORTATION__AVIATION_COLLISION_CRASH = (
        "RESCUE||TRANSPORTATION||AVIATION_COLLISION_CRASH"
    )
    RESCUE__TRANSPORTATION__AVIATION_STANDBY = "RESCUE||TRANSPORTATION||AVIATION_STANDBY"
    RESCUE__WATER__PERSON_IN_WATER_STANDING = "RESCUE||WATER||PERSON_IN_WATER_STANDING"
    RESCUE__WATER__PERSON_IN_WATER_SWIFTWATER = "RESCUE||WATER||PERSON_IN_WATER_SWIFTWATER"
    RESCUE__WATER__WATERCRAFT_IN_DISTRESS = "RESCUE||WATER||WATERCRAFT_IN_DISTRESS"
    NOEMERG__FALSE_ALARM__INTENTIONAL_FALSE_ALARM = "NOEMERG||FALSE_ALARM||INTENTIONAL_FALSE_ALARM"
    NOEMERG__FALSE_ALARM__MALFUNCTIONING_ALARM = "NOEMERG||FALSE_ALARM||MALFUNCTIONING_ALARM"
    NOEMERG__FALSE_ALARM__ACCIDENTAL_ALARM = "NOEMERG||FALSE_ALARM||ACCIDENTAL_ALARM"
    NOEMERG__FALSE_ALARM__OTHER_FALSE_CALL = "NOEMERG||FALSE_ALARM||OTHER_FALSE_CALL"
    NOEMERG__FALSE_ALARM__BOMB_SCARE = "NOEMERG||FALSE_ALARM||BOMB_SCARE"
    NOEMERG__GOOD_INTENT__NO_INCIDENT_FOUND_LOCATION_ERROR = (
        "NOEMERG||GOOD_INTENT||NO_INCIDENT_FOUND_LOCATION_ERROR"
    )
    NOEMERG__GOOD_INTENT__CONTROLLED_BURNING_AUTHORIZED = (
        "NOEMERG||GOOD_INTENT||CONTROLLED_BURNING_AUTHORIZED"
    )
    NOEMERG__GOOD_INTENT__SMOKE_FROM_NONHOSTILE_SOURCE = (
        "NOEMERG||GOOD_INTENT||SMOKE_FROM_NONHOSTILE_SOURCE"
    )
    NOEMERG__GOOD_INTENT__INVESTIGATE_HAZARDOUS_RELEASE = (
        "NOEMERG||GOOD_INTENT||INVESTIGATE_HAZARDOUS_RELEASE"
    )
    NOEMERG__CANCELLED = "NOEMERG||CANCELLED"
    LAWENFORCE = "LAWENFORCE"


class TypeIncidentValueRel(Enum):
    FIRE__TRANSPORTATION_FIRE__POWERED_MOBILITY_DEVICE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||POWERED_MOBILITY_DEVICE_FIRE"
    )
    FIRE__TRANSPORTATION_FIRE__TRAIN_RAIL_FIRE = "FIRE||TRANSPORTATION_FIRE||TRAIN_RAIL_FIRE"
    HAZSIT__HAZARD_NONCHEM__BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE = (
        "HAZSIT||HAZARD_NONCHEM||BOMB_THREAT_RESPONSE_SUSPICIOUS_PACKAGE"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_POWER_LINE_DOWN_ARCHING_MALFUNC"
    )
    HAZSIT__HAZARD_NONCHEM__ELEC_HAZARD_SHORT_CIRCUIT = (
        "HAZSIT||HAZARD_NONCHEM||ELEC_HAZARD_SHORT_CIRCUIT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__FUEL_SPILL_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||FUEL_SPILL_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__GAS_LEAK_ODOR = "HAZSIT||HAZARDOUS_MATERIALS||GAS_LEAK_ODOR"
    HAZSIT__HAZARDOUS_MATERIALS__CARBON_MONOXIDE_RELEASE = (
        "HAZSIT||HAZARDOUS_MATERIALS||CARBON_MONOXIDE_RELEASE"
    )
    HAZSIT__HAZARDOUS_MATERIALS__BIOLOGICAL_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||BIOLOGICAL_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__RADIOACTIVE_RELEASE_INCIDENT = (
        "HAZSIT||HAZARDOUS_MATERIALS||RADIOACTIVE_RELEASE_INCIDENT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_TRANSPORT = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_TRANSPORT"
    )
    HAZSIT__HAZARDOUS_MATERIALS__HAZMAT_RELEASE_FACILITY = (
        "HAZSIT||HAZARDOUS_MATERIALS||HAZMAT_RELEASE_FACILITY"
    )
    HAZSIT__INVESTIGATION__SMOKE_INVESTIGATION = "HAZSIT||INVESTIGATION||SMOKE_INVESTIGATION"
    MEDICAL__ILLNESS__ABOMINAL_PAIN = "MEDICAL||ILLNESS||ABOMINAL_PAIN"
    MEDICAL__ILLNESS__BACK_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||BACK_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__BREAKING_PROBLEMS = "MEDICAL||ILLNESS||BREAKING_PROBLEMS"
    MEDICAL__ILLNESS__CARDIAC_ARREST = "MEDICAL||ILLNESS||CARDIAC_ARREST"
    MEDICAL__ILLNESS__CHEST_PAIN_NON_TRAUMA = "MEDICAL||ILLNESS||CHEST_PAIN_NON_TRAUMA"
    MEDICAL__ILLNESS__CONVULSIONS_SEIZURES = "MEDICAL||ILLNESS||CONVULSIONS_SEIZURES"
    MEDICAL__ILLNESS__DIABETIC_PROBLEMS = "MEDICAL||ILLNESS||DIABETIC_PROBLEMS"
    MEDICAL__ILLNESS__HEADACHE = "MEDICAL||ILLNESS||HEADACHE"
    MEDICAL__ILLNESS__HEART_PROBLEMS = "MEDICAL||ILLNESS||HEART_PROBLEMS"
    MEDICAL__ILLNESS__PANDEMIC_EPIDEMIC_OUTBREAK = "MEDICAL||ILLNESS||PANDEMIC_EPIDEMIC_OUTBREAK"
    MEDICAL__ILLNESS__PREGNANCY_CHILDBIRTH = "MEDICAL||ILLNESS||PREGNANCY_CHILDBIRTH"
    MEDICAL__ILLNESS__PSYCHOLOGICAL_BEHAVIOR_ISSUES = (
        "MEDICAL||ILLNESS||PSYCHOLOGICAL_BEHAVIOR_ISSUES"
    )
    MEDICAL__ILLNESS__SICK_CASE = "MEDICAL||ILLNESS||SICK_CASE"
    MEDICAL__ILLNESS__STROKE_CVA = "MEDICAL||ILLNESS||STROKE_CVA"
    MEDICAL__ILLNESS__UNCONSCIOUS_VICTIM = "MEDICAL||ILLNESS||UNCONSCIOUS_VICTIM"
    MEDICAL__ILLNESS__WELL_PERSON_CHECK = "MEDICAL||ILLNESS||WELL_PERSON_CHECK"
    MEDICAL__ILLNESS__ALTERED_MENTAL_STATUS = "MEDICAL||ILLNESS||ALTERED_MENTAL_STATUS"
    MEDICAL__ILLNESS__NAUSEA = "MEDICAL||ILLNESS||NAUSEA"
    MEDICAL__ILLNESS__UNKNOWN_PROBLEM = "MEDICAL||ILLNESS||UNKNOWN_PROBLEM"
    MEDICAL__ILLNESS__NO_APPROPRIATE_CHOICE = "MEDICAL||ILLNESS||NO_APPROPRIATE_CHOICE"
    MEDICAL__INJURY__ANIMAL_BITES = "MEDICAL||INJURY||ANIMAL_BITES"
    MEDICAL__INJURY__ASSAULT = "MEDICAL||INJURY||ASSAULT"
    MEDICAL__INJURY__ALLERGIC_REACTION_STINGS = "MEDICAL||INJURY||ALLERGIC_REACTION_STINGS"
    MEDICAL__INJURY__BURNS_EXPLOSION = "MEDICAL||INJURY||BURNS_EXPLOSION"
    MEDICAL__INJURY__CARBON_MONOXIDE_OTHER_INHALATION_INJURY = (
        "MEDICAL||INJURY||CARBON_MONOXIDE_OTHER_INHALATION_INJURY"
    )
    MEDICAL__INJURY__CHOKING = "MEDICAL||INJURY||CHOKING"
    MEDICAL__INJURY__DROWNING_DIVING_SCUBA_ACCIDENT = (
        "MEDICAL||INJURY||DROWNING_DIVING_SCUBA_ACCIDENT"
    )
    MEDICAL__INJURY__FALL = "MEDICAL||INJURY||FALL"
    MEDICAL__INJURY__HEAT_COLD_EXPOSURE = "MEDICAL||INJURY||HEAT_COLD_EXPOSURE"
    MEDICAL__INJURY__MOTOR_VEHICLE_COLLISION = "MEDICAL||INJURY||MOTOR_VEHICLE_COLLISION"
    MEDICAL__INJURY__INDUSTRIAL_INACCESSIBLE_ENTRAPMENT = (
        "MEDICAL||INJURY||INDUSTRIAL_INACCESSIBLE_ENTRAPMENT"
    )
    MEDICAL__INJURY__OVERDOSE = "MEDICAL||INJURY||OVERDOSE"
    MEDICAL__INJURY__GUNSHOT_WOUND = "MEDICAL||INJURY||GUNSHOT_WOUND"
    MEDICAL__INJURY__HEMORRHAGE_LACERATION = "MEDICAL||INJURY||HEMORRHAGE_LACERATION"
    MEDICAL__INJURY__STAB_PENETRATING_TRAUMA = "MEDICAL||INJURY||STAB_PENETRATING_TRAUMA"
    MEDICAL__INJURY__OTHER_TRAUMATIC_INJURY = "MEDICAL||INJURY||OTHER_TRAUMATIC_INJURY"
    MEDICAL__OTHER__HEALTHCARE_PROFESSIONAL_ADMISSION = (
        "MEDICAL||OTHER||HEALTHCARE_PROFESSIONAL_ADMISSION"
    )
    MEDICAL__OTHER__MEDICAL_ALARM = "MEDICAL||OTHER||MEDICAL_ALARM"
    MEDICAL__OTHER__STANDBY_REQUEST = "MEDICAL||OTHER||STANDBY_REQUEST"
    MEDICAL__OTHER__TRANSFER_INTERFACILITY = "MEDICAL||OTHER||TRANSFER_INTERFACILITY"
    MEDICAL__OTHER__AIRMEDICAL_TRANSPORT = "MEDICAL||OTHER||AIRMEDICAL_TRANSPORT"
    MEDICAL__OTHER__INTERCEPT_OTHER_UNIT = "MEDICAL||OTHER||INTERCEPT_OTHER_UNIT"
    MEDICAL__OTHER__COMMUNITY_PUBLIC_HEALTH = "MEDICAL||OTHER||COMMUNITY_PUBLIC_HEALTH"
    PUBSERV__CITIZEN_ASSIST__LOST_PERSON = "PUBSERV||CITIZEN_ASSIST||LOST_PERSON"
    PUBSERV__CITIZEN_ASSIST__PERSON_IN_DISTRESS = "PUBSERV||CITIZEN_ASSIST||PERSON_IN_DISTRESS"
    PUBSERV__CITIZEN_ASSIST__CITIZEN_ASSIST_SERVICE_CALL = (
        "PUBSERV||CITIZEN_ASSIST||CITIZEN_ASSIST_SERVICE_CALL"
    )
    PUBSERV__CITIZEN_ASSIST__LIFE_ASSIST = "PUBSERV||CITIZEN_ASSIST||LIFE_ASSIST"
    PUBSERV__ALARMS_NONMED__FIRE_ALARM = "PUBSERV||ALARMS_NONMED||FIRE_ALARM"
    PUBSERV__ALARMS_NONMED__GAS_ALARM = "PUBSERV||ALARMS_NONMED||GAS_ALARM"
    PUBSERV__ALARMS_NONMED__CO_ALARM = "PUBSERV||ALARMS_NONMED||CO_ALARM"
    PUBSERV__ALARMS_NONMED__OTHER_ALARM = "PUBSERV||ALARMS_NONMED||OTHER_ALARM"
    PUBSERV__DISASTER_WEATHER__DAMAGE_ASSESSMENT = "PUBSERV||DISASTER_WEATHER||DAMAGE_ASSESSMENT"
    PUBSERV__DISASTER_WEATHER__WEATHER_RESPONSE = "PUBSERV||DISASTER_WEATHER||WEATHER_RESPONSE"
    PUBSERV__OTHER__STANDBY = "PUBSERV||OTHER||STANDBY"
    RESCUE__OUTSIDE__BACKOUNTRY_RESCUE = "RESCUE||OUTSIDE||BACKOUNTRY_RESCUE"
    FIRE__OUTSIDE_FIRE__CONSTRUCTION_WASTE = "FIRE||OUTSIDE_FIRE||CONSTRUCTION_WASTE"
    FIRE__OUTSIDE_FIRE__OTHER_OUTSIDE_FIRE = "FIRE||OUTSIDE_FIRE||OTHER_OUTSIDE_FIRE"
    FIRE__OUTSIDE_FIRE__OUTSIDE_TANK_FIRE = "FIRE||OUTSIDE_FIRE||OUTSIDE_TANK_FIRE"
    FIRE__OUTSIDE_FIRE__TRASH_RUBBISH_FIRE = "FIRE||OUTSIDE_FIRE||TRASH_RUBBISH_FIRE"
    FIRE__OUTSIDE_FIRE__VEGETATION_GRASS_FIRE = "FIRE||OUTSIDE_FIRE||VEGETATION_GRASS_FIRE"
    FIRE__OUTSIDE_FIRE__WILDFIRE_WILDLAND = "FIRE||OUTSIDE_FIRE||WILDFIRE_WILDLAND"
    FIRE__OUTSIDE_FIRE__WILDFIRE_URBAN_INTERFACE = "FIRE||OUTSIDE_FIRE||WILDFIRE_URBAN_INTERFACE"
    FIRE__OUTSIDE_FIRE__UTILITY_INFRASTRUCTURE_FIRE = (
        "FIRE||OUTSIDE_FIRE||UTILITY INFRASTRUCTURE FIRE"
    )
    FIRE__OUTSIDE_FIRE__DUMPSTER_OUTDOOR_CONTAINER_FIRE = (
        "FIRE||OUTSIDE_FIRE||DUMPSTER_OUTDOOR_CONTAINER_FIRE"
    )
    FIRE__SPECIAL_FIRE__ESS_FIRE = "FIRE||SPECIAL_FIRE||ESS_FIRE"
    FIRE__SPECIAL_FIRE__EXPLOSION = "FIRE||SPECIAL_FIRE||EXPLOSION"
    FIRE__SPECIAL_FIRE__INFRASTRUCTURE_FIRE = "FIRE||SPECIAL_FIRE||INFRASTRUCTURE_FIRE"
    FIRE__STRUCTURE_FIRE__STRUCTURAL_INVOLVEMENT_FIRE = (
        "FIRE||STRUCTURE_FIRE||STRUCTURAL_INVOLVEMENT_FIRE"
    )
    FIRE__STRUCTURE_FIRE__ROOM_AND_CONTENTS_FIRE = "FIRE||STRUCTURE_FIRE||ROOM_AND_CONTENTS_FIRE"
    FIRE__STRUCTURE_FIRE__CONFINED_COOKING_APPLIANCE_FIRE = (
        "FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE"
    )
    FIRE__STRUCTURE_FIRE__CHIMNEY_FIRE = "FIRE||STRUCTURE_FIRE||CHIMNEY_FIRE"
    FIRE__TRANSPORTATION_FIRE__AIRCRAFT_FIRE = "FIRE||TRANSPORTATION_FIRE||AIRCRAFT_FIRE"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_PASSENGER = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_PASSENGER"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_COMMERCIAL = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_COMMERCIAL"
    )
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_RV = "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_RV"
    FIRE__TRANSPORTATION_FIRE__VEHICLE_FIRE_FOOD_TRUCK = (
        "FIRE||TRANSPORTATION_FIRE||VEHICLE_FIRE_FOOD_TRUCK"
    )
    FIRE__TRANSPORTATION_FIRE__BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE = (
        "FIRE||TRANSPORTATION_FIRE||BOAT_PERSONAL_WATERCRAFT_BARGE_FIRE"
    )
    PUBSERV__OTHER__MOVE_UP = "PUBSERV||OTHER||MOVE_UP"
    RESCUE__OUTSIDE__CONFINED_SPACE_RESCUE = "RESCUE||OUTSIDE||CONFINED_SPACE_RESCUE"
    RESCUE__OUTSIDE__TRENCH = "RESCUE||OUTSIDE||TRENCH"
    RESCUE__OUTSIDE__EXTRICATION_ENTRAPPED = "RESCUE||OUTSIDE||EXTRICATION_ENTRAPPED"
    RESCUE__OUTSIDE__HIGH_ANGLE_RESCUE = "RESCUE||OUTSIDE||HIGH_ANGLE_RESCUE"
    HAZSIT__INVESTIGATION__ODOR = "HAZSIT||INVESTIGATION||ODOR"
    RESCUE__OUTSIDE__LOW_ANGLE_RESCUE = "RESCUE||OUTSIDE||LOW_ANGLE_RESCUE"
    RESCUE__OUTSIDE__STEEP_ANGLE_RESCUE = "RESCUE||OUTSIDE||STEEP_ANGLE_RESCUE"
    RESCUE__OUTSIDE__LIMITED_NO_ACCESS = "RESCUE||OUTSIDE||LIMITED_NO_ACCESS"
    RESCUE__STRUCTURE__BUILDING_STRUCTURE_COLLAPSE = (
        "RESCUE||STRUCTURE||BUILDING_STRUCTURE_COLLAPSE"
    )
    RESCUE__STRUCTURE__CONFINED_SPACE_RESCUE = "RESCUE||STRUCTURE||CONFINED_SPACE_RESCUE"
    RESCUE__STRUCTURE__ELEVATOR_ESCALTOR_RESCUE = "RESCUE||STRUCTURE||ELEVATOR_ESCALTOR_RESCUE"
    RESCUE__STRUCTURE__EXTRICATION_ENTRAPPED = "RESCUE||STRUCTURE||EXTRICATION_ENTRAPPED"
    RESCUE__TRANSPORTATION__MOTOR_VEHICLE_EXTRICATION_ENTRAPPED = (
        "RESCUE||TRANSPORTATION||MOTOR_VEHICLE_EXTRICATION_ENTRAPPED"
    )
    RESCUE__TRANSPORTATION__TRAIN_RAIL_COLLISION_DERAILMENT = (
        "RESCUE||TRANSPORTATION||TRAIN_RAIL_COLLISION_DERAILMENT"
    )
    RESCUE__TRANSPORTATION__AVIATION_COLLISION_CRASH = (
        "RESCUE||TRANSPORTATION||AVIATION_COLLISION_CRASH"
    )
    RESCUE__TRANSPORTATION__AVIATION_STANDBY = "RESCUE||TRANSPORTATION||AVIATION_STANDBY"
    RESCUE__WATER__PERSON_IN_WATER_STANDING = "RESCUE||WATER||PERSON_IN_WATER_STANDING"
    RESCUE__WATER__PERSON_IN_WATER_SWIFTWATER = "RESCUE||WATER||PERSON_IN_WATER_SWIFTWATER"
    RESCUE__WATER__WATERCRAFT_IN_DISTRESS = "RESCUE||WATER||WATERCRAFT_IN_DISTRESS"
    NOEMERG__FALSE_ALARM__INTENTIONAL_FALSE_ALARM = "NOEMERG||FALSE_ALARM||INTENTIONAL_FALSE_ALARM"
    NOEMERG__FALSE_ALARM__MALFUNCTIONING_ALARM = "NOEMERG||FALSE_ALARM||MALFUNCTIONING_ALARM"
    NOEMERG__FALSE_ALARM__ACCIDENTAL_ALARM = "NOEMERG||FALSE_ALARM||ACCIDENTAL_ALARM"
    NOEMERG__FALSE_ALARM__OTHER_FALSE_CALL = "NOEMERG||FALSE_ALARM||OTHER_FALSE_CALL"
    NOEMERG__FALSE_ALARM__BOMB_SCARE = "NOEMERG||FALSE_ALARM||BOMB_SCARE"
    NOEMERG__GOOD_INTENT__NO_INCIDENT_FOUND_LOCATION_ERROR = (
        "NOEMERG||GOOD_INTENT||NO_INCIDENT_FOUND_LOCATION_ERROR"
    )
    NOEMERG__GOOD_INTENT__CONTROLLED_BURNING_AUTHORIZED = (
        "NOEMERG||GOOD_INTENT||CONTROLLED_BURNING_AUTHORIZED"
    )
    NOEMERG__GOOD_INTENT__SMOKE_FROM_NONHOSTILE_SOURCE = (
        "NOEMERG||GOOD_INTENT||SMOKE_FROM_NONHOSTILE_SOURCE"
    )
    NOEMERG__GOOD_INTENT__INVESTIGATE_HAZARDOUS_RELEASE = (
        "NOEMERG||GOOD_INTENT||INVESTIGATE_HAZARDOUS_RELEASE"
    )
    NOEMERG__CANCELLED = "NOEMERG||CANCELLED"
    LAWENFORCE = "LAWENFORCE"


class TypeJobClassificationValue(Enum):
    CAREER = "CAREER"
    PART_TIME = "PART_TIME"
    PAID_ON_CALL = "PAID_ON_CALL"
    INDUSTRIAL = "INDUSTRIAL"
    VOLUNTEER = "VOLUNTEER"
    WILDLAND_FULL_TIME = "WILDLAND_FULL_TIME"
    WILDLAND_PART_TIME = "WILDLAND_PART_TIME"
    WILDLAND_CONTRACT = "WILDLAND_CONTRACT"


class TypeLocCspCountryValue(Enum):
    BI = "BI"
    BJ = "BJ"
    BL = "BL"
    BM = "BM"
    BN = "BN"
    BO = "BO"
    BQ = "BQ"
    BR = "BR"
    BS = "BS"
    BT = "BT"
    BV = "BV"
    BW = "BW"
    BY = "BY"
    BZ = "BZ"
    CA = "CA"
    CC = "CC"
    CD = "CD"
    CF = "CF"
    CG = "CG"
    CH = "CH"
    CI = "CI"
    CK = "CK"
    CL = "CL"
    CM = "CM"
    CN = "CN"
    CO = "CO"
    CR = "CR"
    CU = "CU"
    CV = "CV"
    CW = "CW"
    CX = "CX"
    CY = "CY"
    CZ = "CZ"
    DE = "DE"
    DJ = "DJ"
    DK = "DK"
    DM = "DM"
    DO = "DO"
    DZ = "DZ"
    EC = "EC"
    EE = "EE"
    EG = "EG"
    EH = "EH"
    ER = "ER"
    ES = "ES"
    ET = "ET"
    FI = "FI"
    FJ = "FJ"
    FK = "FK"
    FM = "FM"
    FO = "FO"
    FR = "FR"
    GA = "GA"
    GB = "GB"
    GD = "GD"
    GE = "GE"
    GF = "GF"
    GG = "GG"
    GH = "GH"
    GI = "GI"
    GL = "GL"
    GM = "GM"
    GN = "GN"
    GP = "GP"
    GQ = "GQ"
    GR = "GR"
    GS = "GS"
    GT = "GT"
    GU = "GU"
    GW = "GW"
    GY = "GY"
    HK = "HK"
    HM = "HM"
    HN = "HN"
    HR = "HR"
    HT = "HT"
    HU = "HU"
    ID = "ID"
    IE = "IE"
    IL = "IL"
    IM = "IM"
    IN = "IN"
    IO = "IO"
    IQ = "IQ"
    IR = "IR"
    IS = "IS"
    IT = "IT"
    JE = "JE"
    JM = "JM"
    JO = "JO"
    JP = "JP"
    KE = "KE"
    KG = "KG"
    KH = "KH"
    KI = "KI"
    KM = "KM"
    KN = "KN"
    KP = "KP"
    KR = "KR"
    KW = "KW"
    KY = "KY"
    KZ = "KZ"
    LA = "LA"
    LB = "LB"
    LC = "LC"
    LI = "LI"
    LK = "LK"
    LR = "LR"
    LS = "LS"
    LT = "LT"
    LU = "LU"
    LV = "LV"
    LY = "LY"
    MA = "MA"
    MC = "MC"
    MD = "MD"
    ME = "ME"
    MF = "MF"
    MG = "MG"
    MH = "MH"
    MK = "MK"
    ML = "ML"
    MM = "MM"
    MN = "MN"
    MO = "MO"
    MP = "MP"
    MQ = "MQ"
    MR = "MR"
    MS = "MS"
    MT = "MT"
    MU = "MU"
    MV = "MV"
    MW = "MW"
    MX = "MX"
    MY = "MY"
    MZ = "MZ"
    NA = "NA"
    NC = "NC"
    NE = "NE"
    NF = "NF"
    NG = "NG"
    NI = "NI"
    NL = "NL"
    NO = "NO"
    NP = "NP"
    NR = "NR"
    NU = "NU"
    NZ = "NZ"
    OM = "OM"
    PA = "PA"
    PE = "PE"
    PF = "PF"
    PG = "PG"
    PH = "PH"
    PK = "PK"
    PL = "PL"
    PM = "PM"
    PN = "PN"
    PR = "PR"
    PS = "PS"
    PT = "PT"
    PW = "PW"
    PY = "PY"
    QA = "QA"
    RE = "RE"
    RO = "RO"
    RS = "RS"
    RU = "RU"
    RW = "RW"
    SA = "SA"
    SB = "SB"
    SC = "SC"
    SD = "SD"
    SE = "SE"
    SG = "SG"
    SH = "SH"
    SI = "SI"
    SJ = "SJ"
    SK = "SK"
    SL = "SL"
    AD = "AD"
    AE = "AE"
    AF = "AF"
    AG = "AG"
    AI = "AI"
    AL = "AL"
    AM = "AM"
    AO = "AO"
    AQ = "AQ"
    AR = "AR"
    AS = "AS"
    AT = "AT"
    AU = "AU"
    AW = "AW"
    AX = "AX"
    AZ = "AZ"
    BA = "BA"
    BB = "BB"
    BD = "BD"
    BE = "BE"
    BF = "BF"
    BG = "BG"
    BH = "BH"
    SM = "SM"
    SN = "SN"
    SO = "SO"
    SR = "SR"
    SS = "SS"
    ST = "ST"
    SV = "SV"
    SX = "SX"
    SY = "SY"
    SZ = "SZ"
    TC = "TC"
    TD = "TD"
    TF = "TF"
    TG = "TG"
    TH = "TH"
    TJ = "TJ"
    TK = "TK"
    TL = "TL"
    TM = "TM"
    TN = "TN"
    TO = "TO"
    TR = "TR"
    TT = "TT"
    TV = "TV"
    TW = "TW"
    TZ = "TZ"
    UA = "UA"
    UG = "UG"
    UM = "UM"
    US = "US"
    UY = "UY"
    UZ = "UZ"
    VA = "VA"
    VC = "VC"
    VE = "VE"
    VG = "VG"
    VI = "VI"
    VN = "VN"
    VU = "VU"
    WF = "WF"
    WS = "WS"
    YE = "YE"
    YT = "YT"
    ZA = "ZA"
    ZM = "ZM"
    ZW = "ZW"


class TypeLocPlaceValue(Enum):
    AIRCRAFT = "AIRCRAFT"
    AIRPORT = "AIRPORT"
    ARENA = "ARENA"
    AUTOMOBILE = "AUTOMOBILE"
    BANK = "BANK"
    BAR = "BAR"
    BUS = "BUS"
    BICYCLE = "BICYCLE"
    BUS_STATION = "BUS_STATION"
    CAFE = "CAFE"
    CLASSROOM = "CLASSROOM"
    CLUB = "CLUB"
    CONSTRUCTION = "CONSTRUCTION"
    CONVENTION_CENTER = "CONVENTION_CENTER"
    GOVERNMENT = "GOVERNMENT"
    HOSPITAL = "HOSPITAL"
    HOTEL = "HOTEL"
    INDUSTRIAL = "INDUSTRIAL"
    LIBRARY = "LIBRARY"
    MOTORCYCLE = "MOTORCYCLE"
    MUSEUM = "MUSEUM"
    OFFICE = "OFFICE"
    OTHER = "OTHER"
    OUTDOORS = "OUTDOORS"
    PARKING = "PARKING"
    PLACE_OF_WORSHIP = "PLACE_OF_WORSHIP"
    PRISON = "PRISON"
    PUBLIC = "PUBLIC"
    PUBLIC_TRANSPORT = "PUBLIC_TRANSPORT"
    RESIDENCE = "RESIDENCE"
    RESTAURANT = "RESTAURANT"
    SCHOOL = "SCHOOL"
    SHOPPING_AREA = "SHOPPING_AREA"
    STADIUM = "STADIUM"
    STORE = "STORE"
    STREET = "STREET"
    THEATER = "THEATER"
    TRAIN = "TRAIN"
    TRAIN_STATION = "TRAIN_STATION"
    TRUCK = "TRUCK"
    UNDERWAY = "UNDERWAY"
    UNKNOWN = "UNKNOWN"
    WAREHOUSE = "WAREHOUSE"
    WATER = "WATER"
    WATERCRAFT = "WATERCRAFT"


class TypeLocSnDirectionValue(Enum):
    NORTHBOUND = "NORTHBOUND"
    SOUTHBOUND = "SOUTHBOUND"
    EASTBOUND = "EASTBOUND"
    WESTBOUND = "WESTBOUND"


class TypeLocSnPrePostValue(Enum):
    BEACH = "BEACH"
    BEND = "BEND"
    BLUFF = "BLUFF"
    BLUFFS = "BLUFFS"
    BOTTOM = "BOTTOM"
    BOARDWALK = "BOARDWALK"
    BOULEVARD = "BOULEVARD"
    BRANCH = "BRANCH"
    BRIDGE = "BRIDGE"
    BROOK = "BROOK"
    BROOKS = "BROOKS"
    BUREAU_OF_INDIAN_AFFAIRS_ROUTE = "BUREAU OF INDIAN AFFAIRS ROUTE"
    BURG = "BURG"
    BURGS = "BURGS"
    BYPASS = "BYPASS"
    CALLE = "CALLE"
    CALLEJON = "CALLEJON"
    CAMINO = "CAMINO"
    CAMP = "CAMP"
    CANYON = "CANYON"
    CAPE = "CAPE"
    CARTWAY = "CARTWAY"
    CAUSEWAY = "CAUSEWAY"
    CENTER = "CENTER"
    CENTRE = "CENTRE"
    CENTERS = "CENTERS"
    CHANNEL = "CHANNEL"
    CHASE = "CHASE"
    CHEMIN = "CHEMIN"
    CIRCLE = "CIRCLE"
    CIRCLES = "CIRCLES"
    CIRCUS = "CIRCUS"
    CLIFF = "CLIFF"
    CLIFFS = "CLIFFS"
    CLOSE = "CLOSE"
    CLUB = "CLUB"
    CLUSTER = "CLUSTER"
    COAST_HIGHWAY = "COAST HIGHWAY"
    COMMON = "COMMON"
    COMMONS = "COMMONS"
    CONCESSION_ROAD = "CONCESSION ROAD"
    CONCOURSE = "CONCOURSE"
    CONNECT = "CONNECT"
    CONNECTOR = "CONNECTOR"
    CORNER = "CORNER"
    CORNERS = "CORNERS"
    CORRIDOR = "CORRIDOR"
    CORSO = "CORSO"
    CORTE = "CORTE"
    COUNTY_FOREST_ROAD = "COUNTY FOREST ROAD"
    COUNTY_HIGHWAY = "COUNTY HIGHWAY"
    COUNTY_ROAD = "COUNTY ROAD"
    COUNTY_ROUTE = "COUNTY ROUTE"
    COUNTY_STATE_AID_HIGHWAY = "COUNTY STATE AID HIGHWAY"
    COURS = "COURS"
    COURSE = "COURSE"
    COURT = "COURT"
    COURTS = "COURTS"
    COVE = "COVE"
    COVES = "COVES"
    CREEK = "CREEK"
    CRESCENT = "CRESCENT"
    CREST = "CREST"
    CROSS = "CROSS"
    CROSSING = "CROSSING"
    CROSSINGS = "CROSSINGS"
    CROSSOVER = "CROSSOVER"
    CROSSROAD = "CROSSROAD"
    CROSSROADS = "CROSSROADS"
    CROSSWAY = "CROSSWAY"
    CURVE = "CURVE"
    CUSTER_COUNTY_ROAD = "CUSTER COUNTY ROAD"
    CUTOFF = "CUTOFF"
    CUTTING = "CUTTING"
    DALE = "DALE"
    DAM = "DAM"
    DAWSON_COUNTY_ROAD = "DAWSON COUNTY ROAD"
    DELL = "DELL"
    DIVIDE = "DIVIDE"
    DOCK = "DOCK"
    DOWN = "DOWN"
    DOWNS = "DOWNS"
    DRAW = "DRAW"
    DRIFT = "DRIFT"
    DRIVE = "DRIVE"
    DRIVES = "DRIVES"
    DRIVEWAY = "DRIVEWAY"
    DUGWAY = "DUGWAY"
    ECHO = "ECHO"
    EDGE = "EDGE"
    END = "END"
    ENTRANCE = "ENTRANCE"
    ENTRY = "ENTRY"
    ESPLANADE = "ESPLANADE"
    ESTATE = "ESTATE"
    ESTATES = "ESTATES"
    EXCHANGE = "EXCHANGE"
    EXIT = "EXIT"
    EXPRESSWAY = "EXPRESSWAY"
    EXTENSION = "EXTENSION"
    EXTENSIONS = "EXTENSIONS"
    FALL = "FALL"
    FALLS = "FALLS"
    FARE = "FARE"
    FARM = "FARM"
    FARM_TO_MARKET = "FARM TO MARKET"
    FEDERAL_AID_SECONDARY_HIGHWAY = "FEDERAL-AID SECONDARY HIGHWAY"
    FERRY = "FERRY"
    FIELD = "FIELD"
    FIELDS = "FIELDS"
    FLAT = "FLAT"
    FLATS = "FLATS"
    FLOWAGE = "FLOWAGE"
    FLYWAY = "FLYWAY"
    FORD = "FORD"
    FORDS = "FORDS"
    FOREST = "FOREST"
    FOREST_ROAD = "FOREST ROAD"
    FOREST_HIGHWAY = "FOREST HIGHWAY"
    FORGE = "FORGE"
    FORGES = "FORGES"
    FORK = "FORK"
    FORKS = "FORKS"
    FORT = "FORT"
    FREEWAY = "FREEWAY"
    FRONT = "FRONT"
    FRONTAGE_ROAD = "FRONTAGE ROAD"
    GABLES = "GABLES"
    GARDEN = "GARDEN"
    GARDENS = "GARDENS"
    GARTH = "GARTH"
    GATE = "GATE"
    GATES = "GATES"
    GATEWAY = "GATEWAY"
    GLADE = "GLADE"
    GLEN = "GLEN"
    GLENS = "GLENS"
    GORGE = "GORGE"
    GRADE = "GRADE"
    GREEN = "GREEN"
    GREENS = "GREENS"
    GREENWAY = "GREENWAY"
    GROVE = "GROVE"
    GROVES = "GROVES"
    HARBOR = "HARBOR"
    HARBORS = "HARBORS"
    HARBOUR = "HARBOUR"
    HAUL_ROAD = "HAUL ROAD"
    HAVEN = "HAVEN"
    HEATH = "HEATH"
    HEIGHTS = "HEIGHTS"
    HIDEAWAY = "HIDEAWAY"
    HIGHWAY = "HIGHWAY"
    HILL = "HILL"
    HILLS = "HILLS"
    HOLLOW = "HOLLOW"
    HORN = "HORN"
    HORSESHOE = "HORSESHOE"
    INDIAN_SERVICE_ROAD = "INDIAN SERVICE ROAD"
    INLET = "INLET"
    INTERSTATE = "INTERSTATE"
    INTERVAL = "INTERVAL"
    ISLAND = "ISLAND"
    ISLANDS = "ISLANDS"
    ISLE = "ISLE"
    ISLES = "ISLES"
    J_TURN = "J-TURN"
    JUNCTION = "JUNCTION"
    JUNCTIONS = "JUNCTIONS"
    KEEP = "KEEP"
    KEY = "KEY"
    KEYS = "KEYS"
    KNOLL = "KNOLL"
    KNOLLS = "KNOLLS"
    LAIR = "LAIR"
    LAKE = "LAKE"
    LAKES = "LAKES"
    LAND = "LAND"
    LANDING = "LANDING"
    LANE = "LANE"
    LANE_CIRCLE = "LANE CIRCLE"
    LANE_COURT = "LANE COURT"
    LANE_ROAD = "LANE ROAD"
    LATERAL = "LATERAL"
    LEDGE = "LEDGE"
    LIGHT = "LIGHT"
    LIGHTS = "LIGHTS"
    LINE = "LINE"
    LOAF = "LOAF"
    LOCK = "LOCK"
    LOCKS = "LOCKS"
    LODGE = "LODGE"
    LOOKOUT = "LOOKOUT"
    LOOP = "LOOP"
    LOOP_ROAD = "LOOP ROAD"
    LUGAR = "LUGAR"
    MALL = "MALL"
    MANOR = "MANOR"
    MANORS = "MANORS"
    MARKET = "MARKET"
    MEADOW = "MEADOW"
    MEADOWS = "MEADOWS"
    MEWS = "MEWS"
    MILL = "MILL"
    MILLS = "MILLS"
    MISSION = "MISSION"
    PUBLIC_ACCESS = "PUBLIC ACCESS"
    ABBEY = "ABBEY"
    ACCESS = "ACCESS"
    ACCESS_ROAD = "ACCESS ROAD"
    ACRES = "ACRES"
    AIRPORT = "AIRPORT"
    ALCOVE = "ALCOVE"
    ALLE = "ALLE"
    ALLEY = "ALLEY"
    ANNEX = "ANNEX"
    APPROACH = "APPROACH"
    ARC = "ARC"
    ARCADE = "ARCADE"
    ARCH = "ARCH"
    AVENIDA = "AVENIDA"
    AVENUE = "AVENUE"
    AVENUE_CIRCLE = "AVENUE CIRCLE"
    AVENUE_COURT = "AVENUE COURT"
    AVENUE_LOOP = "AVENUE LOOP"
    AVENUE_PATH = "AVENUE PATH"
    AVENUE_PLACE = "AVENUE PLACE"
    AVENUE_WAY = "AVENUE WAY"
    BANK = "BANK"
    BAY = "BAY"
    BAYOU = "BAYOU"
    QUARTER = "QUARTER"
    RAMP = "RAMP"
    RADIAL = "RADIAL"
    RANCH = "RANCH"
    RANCHO = "RANCHO"
    RAPID = "RAPID"
    RAPIDS = "RAPIDS"
    REACH = "REACH"
    RECREATIONAL_ROAD = "RECREATIONAL ROAD"
    REST = "REST"
    RETREAT = "RETREAT"
    RIDGE = "RIDGE"
    RIDGES = "RIDGES"
    RISE = "RISE"
    RIVER = "RIVER"
    RIVER_ROAD = "RIVER ROAD"
    ROAD = "ROAD"
    ROADS = "ROADS"
    ROUND = "ROUND"
    ROUTE = "ROUTE"
    ROW = "ROW"
    RUE = "RUE"
    RUN = "RUN"
    RUNNE = "RUNNE"
    RUNWAY = "RUNWAY"
    SHOAL = "SHOAL"
    SHOALS = "SHOALS"
    SHORE = "SHORE"
    SHORES = "SHORES"
    SIDEROAD = "SIDEROAD"
    SKIES = "SKIES"
    SKYWAY = "SKYWAY"
    SLIP = "SLIP"
    SPRING = "SPRING"
    SPRINGS = "SPRINGS"
    SPUR = "SPUR"
    SPURS = "SPURS"
    SQUARE = "SQUARE"
    SQUARES = "SQUARES"
    STATE_HIGHWAY = "STATE HIGHWAY"
    STATE_PARK_ROAD = "STATE PARK ROAD"
    STATE_PARKWAY = "STATE PARKWAY"
    STATE_ROAD = "STATE ROAD"
    STATE_ROUTE = "STATE ROUTE"
    STATE_SECONDARY = "STATE SECONDARY"
    STATE_SPUR = "STATE SPUR"
    STATION = "STATION"
    STRAND = "STRAND"
    STRASSE = "STRASSE"
    STRAVENUE = "STRAVENUE"
    STREAM = "STREAM"
    STREET = "STREET"
    STREETS = "STREETS"
    STREET_COURT = "STREET COURT"
    STREET_LOOP = "STREET LOOP"
    STREET_PATH = "STREET PATH"
    STREET_PLACE = "STREET PLACE"
    STREET_WAY = "STREET WAY"
    STREET_CIRCLE = "STREET CIRCLE"
    STRIP = "STRIP"
    SUMMIT = "SUMMIT"
    TAXIWAY = "TAXIWAY"
    TERMINAL = "TERMINAL"
    TERN = "TERN"
    TERRACE = "TERRACE"
    THROUGHWAY = "THROUGHWAY"
    THRUWAY = "THRUWAY"
    TIMBER_ROAD = "TIMBER ROAD"
    TOWNLINE = "TOWNLINE"
    TOWN_ROAD = "TOWN ROAD"
    TOWNSHIP_ROAD = "TOWNSHIP ROAD"
    TRACE = "TRACE"
    TRACK = "TRACK"
    TRAFFICWAY = "TRAFFICWAY"
    TRAIL = "TRAIL"
    TRAILER = "TRAILER"
    TRIANGLE = "TRIANGLE"
    TRUCK_TRAIL = "TRUCK TRAIL"
    TUNNEL = "TUNNEL"
    TURN = "TURN"
    TURNPIKE = "TURNPIKE"
    UNITED_STATES_FOREST_SERVICE_ROAD = "UNITED STATES FOREST SERVICE ROAD"
    UNITED_STATES_HIGHWAY = "UNITED STATES HIGHWAY"
    UNDERPASS = "UNDERPASS"
    UNION = "UNION"
    UNIONS = "UNIONS"
    UUNYE = "UUNYE"
    VALLEY = "VALLEY"
    VALLEYS = "VALLEYS"
    VIA = "VIA"
    VIADUCT = "VIADUCT"
    VIEW = "VIEW"
    VIEWS = "VIEWS"
    VILLA = "VILLA"
    VILLAGE = "VILLAGE"
    VILLAGES = "VILLAGES"
    VILLE = "VILLE"
    VISTA = "VISTA"
    VOG = "VOG"
    WADDY = "WADDY"
    WALK = "WALK"
    WALKS = "WALKS"
    WALL = "WALL"
    WAY = "WAY"
    WAYS = "WAYS"
    WEEG = "WEEG"
    WELL = "WELL"
    WELLS = "WELLS"
    WOODS = "WOODS"
    WYE = "WYE"
    WYND = "WYND"
    BAYWAY = "BAYWAY"
    MONTANA_HIGHWAY = "MONTANA HIGHWAY"
    MOTORWAY = "MOTORWAY"
    MOUNT = "MOUNT"
    MOUNTAIN = "MOUNTAIN"
    MOUNTAINS = "MOUNTAINS"
    NARROWS = "NARROWS"
    NATIONAL_FOREST_DEVELOPMENT_ROAD = "NATIONAL FOREST DEVELOPMENT ROAD"
    NECK = "NECK"
    NOOK = "NOOK"
    NORTH_CAROLINA_HIGHWAY = "NORTH CAROLINA HIGHWAY"
    OAKS = "OAKS"
    OLD_COUNTY_ROAD = "OLD COUNTY ROAD"
    ORCHARD = "ORCHARD"
    OVAL = "OVAL"
    OVERLOOK = "OVERLOOK"
    OVERPASS = "OVERPASS"
    OVI = "OVI"
    PARK = "PARK"
    PARKE = "PARKE"
    PARKS = "PARKS"
    PARKWAY = "PARKWAY"
    PARKWAYS = "PARKWAYS"
    PASEO = "PASEO"
    PASS = "PASS"
    PASSAGE = "PASSAGE"
    PATH = "PATH"
    PATHWAY = "PATHWAY"
    PIKE = "PIKE"
    PINE = "PINE"
    PINES = "PINES"
    PIAZZA = "PIAZZA"
    PLACE = "PLACE"
    PLACITA = "PLACITA"
    PLAIN = "PLAIN"
    PLAINS = "PLAINS"
    PLATZ = "PLATZ"
    PLAZA = "PLAZA"
    POINT = "POINT"
    POINTE = "POINTE"
    POINTS = "POINTS"
    PORT = "PORT"
    PORTS = "PORTS"
    PRAIRIE = "PRAIRIE"
    PRIVATE_ROAD = "PRIVATE ROAD"
    PROMENADE = "PROMENADE"
    QUAY = "QUAY"


class TypeLocSnPreSepValue(Enum):
    OF_THE = "OF_THE"
    AT = "AT"
    DE = "DE"
    DE_LA = "DE_LA"
    DEL = "DEL"
    DE_LAS = "DE_LAS"
    DES = "DES"
    IN_THE = "IN_THE"
    TO_THE = "TO_THE"
    OF = "OF"
    ON_THE = "ON_THE"
    TO = "TO"


class TypeLocationCrossStreetValue(Enum):
    CLOSEST = "CLOSEST"
    SECOND_CLOSEST = "SECOND_CLOSEST"


class TypeLocationUseValue(Enum):
    AGRICULTURE_STRUCT__STORAGE_SILO = "AGRICULTURE_STRUCT||STORAGE_SILO"
    AGRICULTURE_STRUCT__FARM_BUILDING = "AGRICULTURE_STRUCT||FARM_BUILDING"
    AGRICULTURE_STRUCT__ANIMAL_PROCESSING = "AGRICULTURE_STRUCT||ANIMAL_PROCESSING"
    AGRICULTURE_STRUCT__VETERINARY_LIVESTOCK = "AGRICULTURE_STRUCT||VETERINARY_LIVESTOCK"
    ASSEMBLY__COMMUNITY_CENTER = "ASSEMBLY||COMMUNITY_CENTER"
    ASSEMBLY__CONVENTION_CENTER = "ASSEMBLY||CONVENTION_CENTER"
    ASSEMBLY__INDOOR_ARENA = "ASSEMBLY||INDOOR_ARENA"
    ASSEMBLY__RELIGIOUS = "ASSEMBLY||RELIGIOUS"
    ASSEMBLY__MUSEUM_EXHIBIT_HALL_LIBRARY = "ASSEMBLY||MUSEUM_EXHIBIT_HALL_LIBRARY"
    GOVERNMENT__GENERAL_SERVICES = "GOVERNMENT||GENERAL_SERVICES"
    GOVERNMENT__NON_CIVILIAN_STRUCTURES = "GOVERNMENT||NON_CIVILIAN_STRUCTURES"
    INDUSTRIAL__FOOD_DRUGS = "INDUSTRIAL||FOOD_DRUGS"
    INDUSTRIAL__HEAVY = "INDUSTRIAL||HEAVY"
    INDUSTRIAL__LIGHT = "INDUSTRIAL||LIGHT"
    INDUSTRIAL__METALS_MINERALS_PROCESSING = "INDUSTRIAL||METALS_MINERALS_PROCESSING"
    HEALTH_CARE__MEDICAL_OFFICE_CLINIC = "HEALTH_CARE||MEDICAL_OFFICE_CLINIC"
    HEALTH_CARE__HOSPITAL_24_HOUR_MEDICAL_FACILITIES_ = (
        "HEALTH_CARE||HOSPITAL_24_HOUR_MEDICAL_FACILITIES "
    )
    HEALTH_CARE__NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE = (
        "HEALTH_CARE||NURSING_HOME_ASSISTED_LIVING_RESIDENCE_ONSITE"
    )
    RESIDENTIAL__CONGREGATE_HOUSING = "RESIDENTIAL||CONGREGATE_HOUSING"
    RESIDENTIAL__MANUFACTURED_MOBILE_HOME = "RESIDENTIAL||MANUFACTURED_MOBILE_HOME"
    RESIDENTIAL__DETATCHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||DETATCHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__ATTACHED_SINGLE_FAMILY_DWELLING = "RESIDENTIAL||ATTACHED_SINGLE_FAMILY_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_LOWRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_LOWRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_MIDRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_MIDRISE_DWELLING"
    RESIDENTIAL__MULTI_FAMILY_HIGHRISE_DWELLING = "RESIDENTIAL||MULTI_FAMILY_HIGHRISE_DWELLING"
    RESIDENTIAL__DETATCHED_GARAGE = "RESIDENTIAL||DETATCHED_GARAGE"
    RESIDENTIAL__UNHOUSED_TEMPORARY_SHELTER = "RESIDENTIAL||UNHOUSED_TEMPORARY_SHELTER"
    RESIDENTIAL__TEMPORARY_LODGING_HOTEL_MOTEL = "RESIDENTIAL||TEMPORARY_LODGING_HOTEL_MOTEL"
    UNCLASSIFIED__UNCLASSIFIED = "UNCLASSIFIED||UNCLASSIFIED"
    UTILITY_MISC__TRANSPORTATION_STATION_HUB_AREA = "UTILITY_MISC||TRANSPORTATION_STATION_HUB_AREA"
    UTILITY_MISC__ENERGY_FACILITY_INFRASTRUCTURE = "UTILITY_MISC||ENERGY_FACILITY_INFRASTRUCTURE"
    UTILITY_MISC__WATER_SANITATION_FACILITY_INFRASTRUCTURE = (
        "UTILITY_MISC||WATER_SANITATION_FACILITY_INFRASTRUCTURE"
    )
    UTILITY_MISC__TRASH_RECYCLING_FACILITY = "UTILITY_MISC||TRASH_RECYCLING_FACILITY"
    STORAGE__STORAGE_PORTABLE_BUILDING = "STORAGE||STORAGE_PORTABLE_BUILDING"
    STORAGE__STORAGE_MULTI_TENANT = "STORAGE||STORAGE_MULTI_TENANT"
    STORAGE__STORAGE_SINGLE_TENANT = "STORAGE||STORAGE_SINGLE_TENANT"
    ROADWAY_ACCESS__SIDEWALK = "ROADWAY_ACCESS||SIDEWALK"
    ROADWAY_ACCESS__STREET = "ROADWAY_ACCESS||STREET"
    ROADWAY_ACCESS__HIGHWAY_INTERSTATE = "ROADWAY_ACCESS||HIGHWAY_INTERSTATE"
    ROADWAY_ACCESS__LIMITED_ACCESS_HIGHWAY_INTERSTATE = (
        "ROADWAY_ACCESS||LIMITED_ACCESS_HIGHWAY_INTERSTATE"
    )
    ROADWAY_ACCESS__BRIDGE = "ROADWAY_ACCESS||BRIDGE"
    ROADWAY_ACCESS__TUNNEL = "ROADWAY_ACCESS||TUNNEL"
    ROADWAY_ACCESS__RAILROAD_RAILYARD = "ROADWAY_ACCESS||RAILROAD_RAILYARD"
    ROADWAY_ACCESS__PARKING_LOT_GARAGE = "ROADWAY_ACCESS||PARKING_LOT_GARAGE"
    OUTDOOR__GROUND_VACANT_LAND = "OUTDOOR||GROUND_VACANT_LAND"
    OUTDOOR__CAMP_SITE = "OUTDOOR||CAMP_SITE"
    OUTDOOR__PLAYGROUND_PARK_RECREATIONAL_AREA = "OUTDOOR||PLAYGROUND_PARK_RECREATIONAL_AREA"
    OUTDOOR__HIKING_TRAIL = "OUTDOOR||HIKING_TRAIL"
    OUTDOOR__ORCHARD_CROPS_FARMLAND = "OUTDOOR||ORCHARD_CROPS_FARMLAND"
    OUTDOOR__FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS = (
        "OUTDOOR||FOREST_GRASSLANDS_WOODLAND_WILDLAND_AREAS"
    )
    OUTDOOR__WATER_PROXIMITY = "OUTDOOR||WATER_PROXIMITY"
    OUTDOOR__OPEN_WATER = "OUTDOOR||OPEN_WATER"
    OUTDOOR_INDUSTRIAL__DUMP_LANDFILL = "OUTDOOR_INDUSTRIAL||DUMP_LANDFILL"
    OUTDOOR_INDUSTRIAL__INDUSTRIAL_YARD = "OUTDOOR_INDUSTRIAL||INDUSTRIAL_YARD"
    OUTDOOR_INDUSTRIAL__MINE = "OUTDOOR_INDUSTRIAL||MINE"
    OUTDOOR_INDUSTRIAL__CONSTRUCTION_SITE = "OUTDOOR_INDUSTRIAL||CONSTRUCTION_SITE"
    COMMERCIAL__ENTERTAINMENT_RECREATION = "COMMERCIAL||ENTERTAINMENT_RECREATION"
    COMMERCIAL__RESTAURANT_CAFE = "COMMERCIAL||RESTAURANT_CAFE"
    COMMERCIAL__BAR_NIGHTCLUB = "COMMERCIAL||BAR_NIGHTCLUB"
    COMMERCIAL__OFFICE_OTHER_TECHNICAL_SERVICES = "COMMERCIAL||OFFICE_OTHER_TECHNICAL_SERVICES"
    COMMERCIAL__RETAIL_WHOLESALE_TRADE = "COMMERCIAL||RETAIL_WHOLESALE_TRADE"
    COMMERCIAL__THEATERS_STUDIO = "COMMERCIAL||THEATERS_STUDIO"
    COMMERCIAL__VEHICLE_REPAIR_SERVICES = "COMMERCIAL||VEHICLE_REPAIR_SERVICES"
    COMMERCIAL__VEHICLE_FUELING_CHARGING_STATION = "COMMERCIAL||VEHICLE_FUELING_CHARGING_STATION"
    COMMERCIAL__VETERINARY_PET_ = "COMMERCIAL||VETERINARY_PET "
    EDUCATION__COLLEGES_UNIVERSITIES = "EDUCATION||COLLEGES_UNIVERSITIES"
    EDUCATION__OTHER_EDUCATIONAL_BUILDINGS = "EDUCATION||OTHER_EDUCATIONAL_BUILDINGS"
    EDUCATION__PREK_DAYCARE = "EDUCATION||PREK_DAYCARE"
    EDUCATION__K_12_SCHOOLS = "EDUCATION||K_12_SCHOOLS"
    EDUCATION__DORMITORY_HOUSING = "EDUCATION||DORMITORY_HOUSING"
    GOVERNMENT__POLICE_EMERGENCY_STATION = "GOVERNMENT||POLICE_EMERGENCY_STATION"
    GOVERNMENT__FIRE_MEDICAL_STATION = "GOVERNMENT||FIRE_MEDICAL_STATION"
    GOVERNMENT__JAIL_PRISON_REFORMATORY = "GOVERNMENT||JAIL_PRISON_REFORMATORY"
    INDUSTRIAL__CHEMICAL = "INDUSTRIAL||CHEMICAL"


class TypeMedicalPatientCareValue(Enum):
    PATIENT_EVALAUTED_CARE_PROVIDED = "PATIENT_EVALAUTED_CARE_PROVIDED"
    PATIENT_EVALAUTED_REFUSED_CARE = "PATIENT_EVALAUTED_REFUSED_CARE"
    PATIENT_EVALAUTED_NO_CARE_REQUIRED = "PATIENT_EVALAUTED_NO_CARE_REQUIRED"
    PATIENT_REFUSED_EVALUATION_CARE = "PATIENT_REFUSED_EVALUATION_CARE"
    PATIENT_SUPPORT_SERVICES_PROVIDED = "PATIENT_SUPPORT_SERVICES_PROVIDED"
    PATIENT_DEAD_ON_ARRIVAL = "PATIENT_DEAD_ON_ARRIVAL"


class TypeMedicalPatientStatusValue(Enum):
    IMPROVED = "IMPROVED"
    UNCHANGED = "UNCHANGED"
    WORSE = "WORSE"


class TypeMedicalTransportValue(Enum):
    TRANSPORT_BY_EMS_UNIT = "TRANSPORT_BY_EMS_UNIT"
    OTHER_AGENCY_TRANSPORT = "OTHER_AGENCY_TRANSPORT"
    PATIENT_REFUSED_TRANSPORT = "PATIENT_REFUSED_TRANSPORT"
    NONPATIENT_TRANSPORT = "NONPATIENT_TRANSPORT"
    NO_TRANSPORT = "NO_TRANSPORT"


class TypeNoactionValue(Enum):
    CANCELLED = "CANCELLED"
    STAGED_STANDBY = "STAGED/STANDBY"
    NO_INCIDENT_FOUND = "NO_INCIDENT_FOUND"


class TypeOccupantResponseValue(Enum):
    EVACUATED = "EVACUATED"
    IGNORED_ALARM = "IGNORED_ALARM"
    UNABLE_TO_RESPOND = "UNABLE_TO_RESPOND"
    ATTEMPTED_TO_EXTINGUISH = "ATTEMPTED_TO_EXTINGUISH"
    ATTEMPTED_TO_RESCUE_OCCUPANTS = "ATTEMPTED_TO_RESCUE_OCCUPANTS"
    ATTEMPTED_TO_RESCUE_ANIMALS = "ATTEMPTED_TO_RESCUE_ANIMALS"
    UNKNOWN = "UNKNOWN"


class TypePopSourceValue(Enum):
    DEPARTMENT_ENTERED = "DEPARTMENT_ENTERED"
    CENSUS_DERIVED = "CENSUS_DERIVED"


class TypePsapCapaValue(Enum):
    LEGACY = "LEGACY"
    NG911 = "NG911"


class TypePsapDiscValue(Enum):
    SINGLE = "SINGLE"
    MULTIPLE = "MULTIPLE"


class TypePsapJurisValue(Enum):
    SINGLE = "SINGLE"
    MULTIPLE = "MULTIPLE"


class TypePsapValue(Enum):
    PRIMARY = "PRIMARY"
    SECONDARY = "SECONDARY"


class TypeRaceValue(Enum):
    AMERICAN_INDIAN_ALASKA_NATIVE = "AMERICAN_INDIAN_ALASKA_NATIVE"
    ASIAN = "ASIAN"
    BLACK_AFRICAN_AMERICAN = "BLACK_AFRICAN_AMERICAN"
    HISPANIC_LATINO = "HISPANIC_LATINO"
    NATIVE_HAWAIIAN_PACIFIC_ISLANDER = "NATIVE_HAWAIIAN_PACIFIC_ISLANDER"
    WHITE = "WHITE"


class TypeRegionValue(Enum):
    JURISDICTION = "JURISDICTION"
    BATTALION = "BATTALION"
    COUNCIL_DISTRICT = "COUNCIL_DISTRICT"
    DISTRICT = "DISTRICT"
    DIVISION = "DIVISION"
    FIRST_DUE = "FIRST_DUE"
    OTHER = "OTHER"


class TypeRescueActionValue(Enum):
    VENTILATION = "VENTILATION"
    HYDRUALIC_TOOL_USE = "HYDRUALIC_TOOL_USE"
    UNDERWATER_DIVE = "UNDERWATER_DIVE"
    ROPE_RIGGING = "ROPE_RIGGING"
    BREAK_BREACH_WALL = "BREAK_BREACH_WALL"
    BRACE_WALL_INFRASTRUCTURE = "BRACE_WALL_INFRASTRUCTURE"
    TRENCH_SHORING = "TRENCH_SHORING"
    SUPPLY_AIR = "SUPPLY_AIR"


class TypeRescueElevationValue(Enum):
    ON_FLOOR = "ON_FLOOR"
    ON_BED = "ON_BED"
    ON_FURNITURE = "ON_FURNITURE"
    OTHER = "OTHER"


class TypeRescueImpedanceValue(Enum):
    HOARDING_CONDITIONS = "HOARDING_CONDITIONS"
    ACCESS_LIMITATIONS = "ACCESS_LIMITATIONS"
    PHYSICAL_MEDICAL_CONDITIONS_PERSON = "PHYSICAL_MEDICAL_CONDITIONS_PERSON"
    IMPAIRED_PERSON = "IMPAIRED_PERSON"
    OTHER = "OTHER"
    NONE = "NONE"


class TypeRescueModeValue(Enum):
    REMOVAL_FROM_STRUCTURE = "REMOVAL_FROM_STRUCTURE"
    EXTRICATION = "EXTRICATION"
    DISENTANGLEMENT = "DISENTANGLEMENT"
    RECOVERY = "RECOVERY"
    OTHER = "OTHER"


class TypeRescuePathValue(Enum):
    REMOVAL_ALONG_PRIMARY_PATH = "REMOVAL_ALONG_PRIMARY_PATH"
    REMOVAL_ALONG_ALT_PATH = "REMOVAL_ALONG_ALT_PATH"


class TypeRescuePresenceKnownValue(Enum):
    KNOWN_DISPATCH = "KNOWN_DISPATCH"
    KNOWN_ARRIVAL = "KNOWN_ARRIVAL"
    KNOWN_DURING = "KNOWN_DURING"


class TypeResourceValue(Enum):
    ENTITY = "ENTITY"
    STATION = "STATION"
    INCIDENT = "INCIDENT"
    USER = "USER"
    ROLE = "ROLE"
    ENTITY_SET = "ENTITY_SET"
    USER_ACTIVATION = "USER_ACTIVATION"
    USER_PERMISSIONS = "USER_PERMISSIONS"
    USER_ENTITY_ACTIVATION = "USER_ENTITY_ACTIVATION"
    USER_ENTITY_MEMBERSHIP = "USER_ENTITY_MEMBERSHIP"
    USER_ROLE_ENTITY_SET_ATTACHMENT = "USER_ROLE_ENTITY_SET_ATTACHMENT"


class TypeRoomValue(Enum):
    BATHROOM = "BATHROOM"
    BEDROOM = "BEDROOM"
    KITCHEN = "KITCHEN"
    LIVING_SPACE = "LIVING_SPACE"
    HALLWAY_FOYER = "HALLWAY_FOYER"
    GARAGE = "GARAGE"
    BALCONY_PORCH_DECK = "BALCONY_PORCH_DECK"
    BASEMENT = "BASEMENT"
    ATTIC = "ATTIC"
    OFFICE = "OFFICE"
    UTILITY_ROOM = "UTILITY_ROOM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class TypeServEmsValue(Enum):
    NO_MEDICAL = "NO_MEDICAL"
    BLS_NO_TRANSPORT = "BLS_NO_TRANSPORT"
    ALS_NO_TRANSPORT = "ALS_NO_TRANSPORT"
    BLS_TRANSPORT = "BLS_TRANSPORT"
    ALS_TRANSPORT = "ALS_TRANSPORT"
    AERO_TRANSPORT = "AERO_TRANSPORT"
    COMMUNITY_MED = "COMMUNITY_MED"


class TypeServFdValue(Enum):
    STRUCTURAL_FIREFIGHTING = "STRUCTURAL_FIREFIGHTING"
    HIGHRISE_FIREFIGHTING = "HIGHRISE_FIREFIGHTING"
    WILDLAND_FIREFIGHTING = "WILDLAND_FIREFIGHTING"
    PETROCHEM_FIREFIGHTING = "PETROCHEM_FIREFIGHTING"
    ARFF_FIREFIGHTING = "ARFF_FIREFIGHTING"
    MARINE_FIREFIGHTING = "MARINE_FIREFIGHTING"
    HAZMAT_OPS = "HAZMAT_OPS"
    HAZMAT_TECHNICIAN = "HAZMAT_TECHNICIAN"
    ROPE_RESCUE = "ROPE_RESCUE"
    COLLAPSE_RESCUE = "COLLAPSE_RESCUE"
    VEHICLE_RESCUE = "VEHICLE_RESCUE"
    ANIMAL_TECHRESCUE = "ANIMAL_TECHRESCUE"
    WILDERNESS_SAR = "WILDERNESS_SAR"
    TRENCH_RESCUE = "TRENCH_RESCUE"
    CONFINED_SPACE = "CONFINED_SPACE"
    MACHINERY_RESCUE = "MACHINERY_RESCUE"
    CAVE_SAR = "CAVE_SAR"
    MINE_SAR = "MINE_SAR"
    HELO_SAR = "HELO_SAR"
    WATER_SAR = "WATER_SAR"
    SWIFTWATER_SAR = "SWIFTWATER_SAR"
    DIVE_SAR = "DIVE_SAR"
    ICE_RESCUE = "ICE_RESCUE"
    SURF_RESCUE = "SURF_RESCUE"
    WATERCRAFT_RESCUE = "WATERCRAFT_RESCUE"
    FLOOD_SAR = "FLOOD_SAR"
    TOWER_SAR = "TOWER_SAR"
    REHABILITATION = "REHABILITATION"
    RRD_EXISTING = "RRD_EXISTING"
    RRD_NEWCONST = "RRD_NEWCONST"
    RRD_PUBLICED = "RRD_PUBLICED"
    RRD_PLANS = "RRD_PLANS"
    CAUSE_ORIGIN = "CAUSE_ORIGIN"
    TRAINING_ELF = "TRAINING_ELF"
    TRAINING_VETFF = "TRAINING_VETFF"
    TRAINING_OD = "TRAINING_OD"
    TRAINING_DRIVER = "TRAINING_DRIVER"


class TypeServInvestValue(Enum):
    COMPANY_LEVEL = "COMPANY_LEVEL"
    YOUTH_FIRESETTER = "YOUTH_FIRESETTER"
    DEDICATED = "DEDICATED"
    LAW_ENFORCEMENT = "LAW_ENFORCEMENT"
    K9_DETECT = "K9_DETECT"


class TypeSourceTargetValue(Enum):
    SOURCE = "SOURCE"
    TARGET = "TARGET"
    UNKNOWN = "UNKNOWN"


class TypeSpecialModifierValue(Enum):
    ACTIVE_ASSAILANT = "ACTIVE_ASSAILANT"
    MCI = "MCI"
    FEDERAL_DECLARED_DISASTER = "FEDERAL_DECLARED_DISASTER"
    STATE_DECLARED_DISASTER = "STATE_DECLARED_DISASTER"
    URBAN_CONFLAGRATION = "URBAN_CONFLAGRATION"
    VIOLENCE_AGAINST_RESPONDER = "VIOLENCE_AGAINST_RESPONDER"


class TypeSuppressApplianceValue(Enum):
    FIRE_EXTINGUISHER = "FIRE_EXTINGUISHER"
    BOOSTER_FIRE_HOSE = "BOOSTER_FIRE_HOSE"
    SMALL_DIAMATER_FIRE_HOSE = "SMALL_DIAMATER_FIRE_HOSE"
    MEDIUM_DIAMETER_FIRE_HOSE = "MEDIUM_DIAMETER_FIRE_HOSE"
    GROUND_MONITOR = "GROUND_MONITOR"
    MASTER_STREAM = "MASTER_STREAM"
    ELEVATED_MASTER_STREAM_STANDPIPE = "ELEVATED_MASTER_STREAM_STANDPIPE"
    BUILDING_STANDPIPE = "BUILDING_STANDPIPE"
    BUILDING_FDC = "BUILDING_FDC"
    AIRATTACK_HELITACK = "AIRATTACK_HELITACK"
    NONE = "NONE"


class TypeSuppressCookingValue(Enum):
    COMMERCIAL_HOOD_SUPPRESSION = "COMMERCIAL_HOOD_SUPPRESSION"
    RESIDENTIAL_HOOD_MOUNTED = "RESIDENTIAL_HOOD_MOUNTED"
    TEMPERATURE_LIMITING_STOVE = "TEMPERATURE_LIMITING_STOVE"
    ELECTRIC_POWER_CUTOFF_DEVICE = "ELECTRIC_POWER_CUTOFF_DEVICE"
    NOT_APPLICABLE = "NOT APPLICABLE"
    NONE = "NONE"


class TypeSuppressFailureValue(Enum):
    SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT = "SYSTEM_SHUTOFF_PRIOR_TO_INCIDENT"
    SYSTEM_SHUTOFF_DURING_INCIDENT = "SYSTEM_SHUTOFF_DURING_INCIDENT"
    SYSTEM_INOPERABLE = "SYSTEM_INOPERABLE"
    SYSTEM_DAMAGED_COMPROMISED = "SYSTEM_DAMAGED_COMPROMISED"
    SYSTEM_NOT_SUITABLE = "SYSTEM_NOT_SUITABLE"
    INSUFFICIENT_WATER_SUPPLY = "INSUFFICIENT_WATER_SUPPLY"
    UNABLE_TO_DETERMINE = "UNABLE_TO_DETERMINE"


class TypeSuppressFireValue(Enum):
    WET_PIPE_SPRINKLER_SYSTEM = "WET_PIPE_SPRINKLER_SYSTEM"
    DRY_PIPE_SPRINKLER_SYSTEM = "DRY_PIPE_SPRINKLER_SYSTEM"
    PRE_ACTION_SYSTEM = "PRE_ACTION_SYSTEM"
    DELUGE_SYSTEM = "DELUGE_SYSTEM"
    CLEAN_AGENT_SYSTEM = "CLEAN_AGENT_SYSTEM"
    OTHER = "OTHER"
    UNKNOWN = "UNKNOWN"


class TypeSuppressOperationValue(Enum):
    OPERATED_EFFECTIVE = "OPERATED_EFFECTIVE"
    OPERATED_NOT_EFFECTIVE = "OPERATED_NOT_EFFECTIVE"
    FAILED_TO_OPERATE = "FAILED_TO_OPERATE"


class TypeSuppressTimeValue(Enum):
    PRE_SUPPRESSION = "PRE_SUPPRESSION"
    DURING_SUPPRESSION = "DURING_SUPPRESSION"
    POST_SUPPRESSION = "POST_SUPPRESSION"


class TypeUnitValue(Enum):
    CREW_TRANS = "CREW_TRANS"
    ENGINE_STRUCT = "ENGINE_STRUCT"
    ENGINE_WUI = "ENGINE_WUI"
    BOAT = "BOAT"
    BOAT_LARGE = "BOAT_LARGE"
    LADDER_SMALL = "LADDER_SMALL"
    LADDER_QUINT = "LADDER_QUINT"
    LADDER_TALL = "LADDER_TALL"
    QUINT_TALL = "QUINT_TALL"
    PLATFORM = "PLATFORM"
    PLATFORM_QUINT = "PLATFORM_QUINT"
    LADDER_TILLER = "LADDER_TILLER"
    ARFF = "ARFF"
    FOAM = "FOAM"
    TENDER = "TENDER"
    CREW = "CREW"
    HELO_GENERAL = "HELO_GENERAL"
    HELO_FIRE = "HELO_FIRE"
    HELO_RESCUE = "HELO_RESCUE"
    UAS_FIRE = "UAS_FIRE"
    UAS_RECON = "UAS_RECON"
    AIR_TANKER = "AIR_TANKER"
    AIR_EMS = "AIR_EMS"
    AIR_RECON = "AIR_RECON"
    ALS_AMB = "ALS_AMB"
    BLS_AMB = "BLS_AMB"
    EMS_NOTRANS = "EMS_NOTRANS"
    EMS_SUPV = "EMS_SUPV"
    MAB = "MAB"
    CHIEF_STAFF_COMMAND = "CHIEF_STAFF_COMMAND"
    HAZMAT = "HAZMAT"
    DECON = "DECON"
    POV = "POV"
    RESCUE_HEAVY = "RESCUE_HEAVY"
    RESCUE_MEDIUM = "RESCUE_MEDIUM"
    RESCUE_LIGHT = "RESCUE_LIGHT"
    RESCUE_USAR = "RESCUE_USAR"
    RESCUE_WATER = "RESCUE_WATER"
    SCBA = "SCBA"
    AIR_LIGHT = "AIR_LIGHT"
    REHAB = "REHAB"
    MOBILE_ICP = "MOBILE_ICP"
    MOBILE_COMMS = "MOBILE_COMMS"
    DOZER = "DOZER"
    OTHER_GROUND = "OTHER_GROUND"
    ATV_EMS = "ATV_EMS"
    ATV_FIRE = "ATV_FIRE"
    INVEST = "INVEST"
    UTIL = "UTIL"


class TypeVacancyValue(Enum):
    NEW_CONSTRUCTION_REMODEL = "NEW_CONSTRUCTION_REMODEL"
    ABANDONED = "ABANDONED"
    FOR_SALE_LEASE = "FOR_SALE_LEASE"
    FORECLOSURE = "FORECLOSURE"
    DAMAGE_DECAY = "DAMAGE_DECAY"
    SEASONAL_OCCASIONALLY_OCCUPIED = "SEASONAL_OCCASIONALLY_OCCUPIED"
    UNKNOWN = "UNKNOWN"


class TypeWaterSupplyValue(Enum):
    HYDRANT_LESS_500 = "HYDRANT_LESS_500"
    HYDRANT_GREATER_500 = "HYDRANT_GREATER_500"
    TANK_WATER = "TANK_WATER"
    WATER_TENDER_SHUTTLE = "WATER_TENDER_SHUTTLE"
    NURSE_OTHER_APPARATUS = "NURSE_OTHER_APPARATUS"
    DRAFT_FROM_STATIC_SOURCE = "DRAFT_FROM_STATIC_SOURCE"
    SUPPLY_FROM_FIRE_BOAT = "SUPPLY_FROM_FIRE_BOAT"


class TypeYesNoUnknownValue(Enum):
    YES = "YES"
    NO = "NO"
    UNKNOWN = "UNKNOWN"


class UnitCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")


class UnitPayload(BaseModel):
    type: TypeUnitValue
    staffing: int = Field(..., title="Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")
    neris_id: str = Field(..., title="Neris Id")


class UnitResponse(BaseModel):
    type: str = Field(..., title="Type")
    staffing: int = Field(..., title="Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")


class UpdateUserPayload(BaseModel):
    email: str = Field(..., title="Email")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")


class UserActivationPayload(BaseModel):
    active: bool = Field(..., title="Active")


class UserAllEntitiesPermissionResponse(BaseModel):
    resources: Dict[str, List[TypeActionValue]] = Field(..., title="Resources")


class UserEntityPermissionsResponse(BaseModel):
    resources: Dict[str, List[TypeActionValue]] = Field(..., title="Resources")
    active: bool = Field(..., title="Active")
    member: bool = Field(..., title="Member")


class UserEntitySummaryInfoResponse(BaseModel):
    active: bool = Field(..., title="Active")
    name: str = Field(..., title="Name")
    neris_id: str = Field(..., title="Neris Id")
    city: str = Field(..., title="City")
    state: StatesTerrsOutput
    zip_code: str = Field(..., title="Zip Code")


class UserFeatureFlags(BaseModel):
    ui_access: bool = Field(..., title="Ui Access")


class UserPermissionsResponse(BaseModel):
    active: bool = Field(..., title="Active")
    entities: Dict[str, Union[UserEntityPermissionsResponse, UserAllEntitiesPermissionResponse]] = (
        Field(..., title="Entities")
    )


class UserRoleEntitySetAttachmentPathParameter(Enum):
    user = "user"
    role = "role"
    entity_set = "entity_set"


class UserStatus(Enum):
    UNCONFIRMED = "UNCONFIRMED"
    CONFIRMED = "CONFIRMED"
    ARCHIVED = "ARCHIVED"
    COMPROMISED = "COMPROMISED"
    UNKNOWN = "UNKNOWN"
    RESET_REQUIRED = "RESET_REQUIRED"
    FORCE_CHANGE_PASSWORD = "FORCE_CHANGE_PASSWORD"
    EXTERNAL_PROVIDER = "EXTERNAL_PROVIDER"


class ValidationError(BaseModel):
    loc: List[Union[str, int]] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class NerisApiAuthModelsUserResponse(BaseModel):
    sub: UUID = Field(..., title="Sub")


class NerisApiUserModelsUserResponse(BaseModel):
    sub: UUID = Field(..., title="Sub")
    username: UUID = Field(..., title="Username")
    email: EmailStr = Field(..., title="Email")
    phone_number: Optional[
        constr(
            pattern=r"^(\+?[1|0])?( )*([ \[\(])?\d{3}([\)\]\. \-])?( )*\d{3}([\. \-])?( )*\d{4}$"
        )
    ] = Field(None, title="Phone Number")
    status: UserStatus
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    active: bool = Field(..., title="Active")
    email_verified: bool = Field(..., title="Email Verified")
    feature_flags: UserFeatureFlags


class NerisSharedTypesStatesTerrs1(Enum):
    AL = "AL"
    AK = "AK"
    AS = "AS"
    AZ = "AZ"
    AR = "AR"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DE = "DE"
    DC = "DC"
    FL = "FL"
    GA = "GA"
    GU = "GU"
    HI = "HI"
    ID = "ID"
    IL = "IL"
    IN = "IN"
    IA = "IA"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    ME = "ME"
    MD = "MD"
    MA = "MA"
    MI = "MI"
    MN = "MN"
    MS = "MS"
    MO = "MO"
    MP = "MP"
    MT = "MT"
    NA = "NA"
    NE = "NE"
    NV = "NV"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NY = "NY"
    NC = "NC"
    ND = "ND"
    OH = "OH"
    OK = "OK"
    OR = "OR"
    PA = "PA"
    PR = "PR"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VT = "VT"
    VA = "VA"
    VI = "VI"
    WA = "WA"
    WV = "WV"
    WI = "WI"
    WY = "WY"


class NerisSharedTypesStatesTerrs2(Enum):
    AL = "AL"
    AK = "AK"
    AS = "AS"
    AZ = "AZ"
    AR = "AR"
    CA = "CA"
    CO = "CO"
    CT = "CT"
    DE = "DE"
    DC = "DC"
    FL = "FL"
    GA = "GA"
    GU = "GU"
    HI = "HI"
    ID = "ID"
    IL = "IL"
    IN = "IN"
    IA = "IA"
    KS = "KS"
    KY = "KY"
    LA = "LA"
    ME = "ME"
    MD = "MD"
    MA = "MA"
    MI = "MI"
    MN = "MN"
    MS = "MS"
    MO = "MO"
    MP = "MP"
    MT = "MT"
    NA = "NA"
    NE = "NE"
    NV = "NV"
    NH = "NH"
    NJ = "NJ"
    NM = "NM"
    NY = "NY"
    NC = "NC"
    ND = "ND"
    OH = "OH"
    OK = "OK"
    OR = "OR"
    PA = "PA"
    PR = "PR"
    RI = "RI"
    SC = "SC"
    SD = "SD"
    TN = "TN"
    TX = "TX"
    UT = "UT"
    VT = "VT"
    VA = "VA"
    VI = "VI"
    WA = "WA"
    WV = "WV"
    WI = "WI"
    WY = "WY"


class Action(BaseModel):
    type: Literal["ACTION"] = Field(
        "ACTION", description="`ACTION` indicates action was taken", title="Type"
    )
    actions: Optional[Union[Union[List[TypeActionTacticValue], Actions], Actions]] = Field(
        None,
        description="Actions taken by the fire department on the scene of the incident.",
        title="Actions",
    )


class Aid(BaseModel):
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    aid_type: TypeAidValue = Field(..., description="The type of aid provided")
    aid_direction: TypeAidDirectionValue = Field(..., description="The direction aid was provided")


class CookingFireSuppressionPresent(BaseModel):
    type: Literal["PRESENT"] = Field(..., title="Type")
    suppression_types: Optional[List[TypeSuppressCookingValue]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[TypeSuppressOperationValue] = None


class CreateUnitPayload(BaseModel):
    type: TypeUnitValue
    staffing: int = Field(..., title="Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")


class CrossStreet(BaseModel):
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street_prefix: Optional[TypeLocSnPrePostValue] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
    )
    street_preposition_type_separator: Optional[TypeLocSnPreSepValue] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix: Optional[TypeLocSnPrePostValue] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    direction_of_travel: Optional[Union[TypeLocSnDirectionValue, DirectionOfTravel]] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
    )
    cross_street_modifier: Union[TypeLocationCrossStreetValue, CrossStreetModifier] = Field(
        ...,
        description="Modifier of the cross street, such as 'nearest' or 'second nearest'",
    )


class CsstHazard(BaseModel):
    ignition_source: Optional[bool] = Field(
        None,
        description="Whether corrugated stainless steel tubing was a suspected ignition source.",
        title="Ignition Source",
    )
    lightning_suspected: Optional[Union[TypeYesNoUnknownValue, LightningSuspected]] = Field(
        None, description="Whether lightning was suspected as cause of ignition."
    )
    grounded: Optional[Union[TypeYesNoUnknownValue, Grounded]] = Field(
        None, description="Whether the CSST was grounded."
    )


class DispatchPayload(BaseModel):
    avl_usage: Optional[bool] = Field(None, title="Avl Usage")
    center_id: Optional[str] = Field(None, title="Center Id")
    cad_software: Optional[str] = Field(None, title="Cad Software")
    psap_type: Optional[TypePsapValue] = None
    psap_capability: Optional[TypePsapCapaValue] = None
    psap_discipline: Optional[TypePsapDiscValue] = None
    psap_jurisdiction: Optional[TypePsapJurisValue] = None
    protocol_fire: Optional[TypeDispProtoFireValue] = None
    protocol_med: Optional[TypeDispProtoMedValue] = None


class ElectricHazardFire(BaseModel):
    reignition: Optional[bool] = Field(
        None, description="Whether there was a re-ignition.", title="Reignition"
    )
    suppression_types: Optional[
        Union[
            Union[List[TypeEmerghazSuppressionValue], SuppressionTypes],
            SuppressionTypes,
        ]
    ] = Field(None, description="Suppression methods used.", title="Suppression Types")


class EntitySetPayload(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    type: TypeEntitySetValue = Field(..., description="The type of entity set.")
    members: Optional[List[EntitySetMembershipPayload]] = Field(None, title="Members")


class EntitySummaryInfoResponse(BaseModel):
    name: str = Field(..., title="Name")
    neris_id: str = Field(..., title="Neris Id")
    address_line_1: str = Field(..., title="Address Line 1")
    city: str = Field(..., title="City")
    state: StatesTerrsOutput
    zip_code: str = Field(..., title="Zip Code")
    department_type: str = Field(..., title="Department Type")
    website: Optional[str] = Field(..., title="Website")
    location: Optional[str] = Field(None, title="Location")
    region_sets: Optional[List[RegionSetResponse]] = Field(None, title="Region Sets")
    stations: Optional[List[StationSummaryInfoResponse]] = Field(None, title="Stations")


class ExposureDisplacement(BaseModel):
    causes: Optional[Union[Union[List[TypeDisplaceCauseValue], Causes], Causes]] = Field(
        None, description="Causes for displacement.", title="Causes"
    )
    type: Literal["EXPOSURE"] = Field("EXPOSURE", title="Type")


class ExternalExposure(BaseModel):
    type: Literal["EXTERNAL_EXPOSURE"] = Field(..., title="Type")
    item_type: Optional[Union[TypeExposureItemValue, ItemType]] = Field(
        None,
        description="Type of property damaged or destroyed from the originating source of the hazard.",
    )


class FfInjuryDetails(BaseModel):
    rank: Optional[constr(min_length=1, max_length=255)] = Field(
        None, description="Rank of firefighter.", examples=["Captain"], title="Rank"
    )
    years_of_service: Optional[float] = Field(
        None, description="Years of service.", examples=["2"], title="Years Of Service"
    )
    job_classification: Optional[Union[TypeJobClassificationValue, JobClassification]] = Field(
        None, description="Job classification of firefighter."
    )
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident in FD Spec.",
        examples=["FD24027442S000U000", "FD24027442S000U001"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the unit responding to the incident if neris id not yet in FD Spec.",
        examples=["A702"],
        title="Reported Unit Id",
    )
    unit_continuity: Optional[bool] = Field(
        None,
        description="Continuity of company at the time of incident.",
        title="Unit Continuity",
    )
    duty_type: Optional[Union[TypeDutyValue, DutyType]] = Field(
        None, description="Duty state of the firefighter at the time of the incident."
    )
    action_type: Optional[Union[TypeCasualtyActionValue, ActionType]] = Field(
        None, description="Actions that occurred during the time of the incident."
    )
    incident_command: Optional[bool] = Field(
        None,
        description="Whether an incident command structure was in place during incident.",
        title="Incident Command",
    )
    incident_stage: Optional[Union[TypeCasualtyTimelineValue, IncidentStage]] = Field(
        None, description="Stage of the incident when the injury occurred."
    )
    ppe_items: Optional[Union[Union[List[TypeCasualtyPpeValue], PpeItems], PpeItems]] = Field(
        None, description="PPE worn during time of incident.", title="Ppe Items"
    )


class FireAlarmPresent(BaseModel):
    type: Literal["PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmFireValue]] = Field(None, title="Alarm Types")
    operation_type: Optional[TypeAlarmOperationValue] = None


class FireRemoval(BaseModel):
    relative_suppression_time: Optional[Union[TypeSuppressTimeValue, RelativeSuppressionTime]] = (
        Field(
            None,
            description="Relative to suppression, when the firefighter was removed from the structure.",
        )
    )


class FireSuppressionFailed(BaseModel):
    type: Literal["FAILED_TO_OPERATE"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeSuppressFailureValue, FailureReason]] = Field(
        None, description="Reason for suppression system failure."
    )


class FireSuppressionIneffective(BaseModel):
    type: Literal["OPERATED_NOT_EFFECTIVE"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeSuppressFailureValue, FailureReason]] = Field(
        None, description="Reason for suppression system failure."
    )
    sprinklers_activated: Optional[int] = Field(
        None,
        description="Number of sprinkler heads activated.",
        examples=[1],
        title="Sprinklers Activated",
    )


class FireSuppressionOperation(BaseModel):
    effectiveness: Union[
        FireSuppressionEffective, FireSuppressionIneffective, FireSuppressionFailed
    ] = Field(..., discriminator="type", title="Effectiveness")


class FireSuppressionPresent(BaseModel):
    type: Literal["PRESENT"] = Field(..., title="Type")
    suppression_types: Optional[List[TypeSuppressFireValue]] = Field(
        None, title="Suppression Types"
    )
    operation_type: Optional[FireSuppressionOperation] = None


class GeoMultipolygon(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    source: TypeGeoSourceValue
    geometry: GeoJsonMultiPolygon


class GeoPoint(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    source: TypeGeoSourceValue
    geometry: GeoJsonPoint


class HTTPValidationError(BaseModel):
    detail: Optional[List[ValidationError]] = Field(None, title="Detail")


class IncidentDisplacement(BaseModel):
    causes: Optional[Union[Union[List[TypeDisplaceCauseValue], Causes], Causes]] = Field(
        None, description="Causes for displacement.", title="Causes"
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class IncidentUnitResponse(BaseModel):
    med_responses: Optional[List[MedResponse]] = Field(None, title="Med Responses")
    point: Optional[GeoPoint] = None
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    type: Literal["INCIDENT"] = Field("INCIDENT", title="Type")


class Injury(BaseModel):
    type: Literal["INJURED_FATAL", "INJURED_NONFATAL"] = Field(..., title="Type")
    cause: Optional[Union[TypeCasualtyCauseValue, Cause]] = Field(
        None, description="Apparent cause of the injury or fatality."
    )
    ff_injury_details: Optional[FfInjuryDetails] = Field(
        None,
        description="Details of the injury sustained by a firefighter. Only possible if casualty-rescue type is `FF`",
    )


class ListEntitiesSummaryInfoResponse(BaseModel):
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    entities: List[EntitySummaryInfoResponse] = Field(..., title="Entities")


class Location(BaseModel):
    additional_attributes: Optional[Dict[str, Any]] = Field(
        None,
        description="JSON string of structure address elements which the transmitter wishes to include.",
        examples=[{"common_name": "Eastside Walmart"}],
        title="Additional Attributes",
    )
    place_type: Optional[Union[TypeLocPlaceValue, PlaceType]] = Field(
        None,
        description="Type of feature identified by the address.",
        examples=["AIRPORT"],
    )
    postal_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="City name for the ZIP Code of an address, as given in the USPS City State file.",
        examples=["Stanton (a post office name in KY)"],
        title="Postal Community",
    )
    neighborhood_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated neighborhood, subdivision or area, either within an incorporated municipality, or in an unincorporated portion of a county or both, where the address is located. ",
        examples=["Cypress Meadows Subdivision"],
        title="Neighborhood Community",
    )
    unincorporated_community: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an unincorporated community, either within an incorporated municipality or in an unincorporated portion of a county, or both, where the address is located. ",
        examples=["14th Ward (a ward in the incorporated municipality of Pittsburgh, PA) "],
        title="Unincorporated Community",
    )
    incorporated_municipality: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the incorporated municipality or other general-purpose local governmental unit (if any) where the address is located.",
        examples=["Haleyville"],
        title="Incorporated Municipality",
    )
    county: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of the county or county-equivalent where the address is located. A county (or its equivalent) is the primary legal division of a state or territory.",
        examples=["Winston County"],
        title="County",
    )
    state: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a state or state equivalent, represented by the two- letter UPPER CASE abbreviation given in USPS Publication 28 [15], Appendix B. A state is a primary governmental division of the United States.",
        examples=["VA"],
        title="State",
    )
    postal_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 5-digit codes that identifies the individual USPS Post Office or metropolitan area delivery station associated with an address.",
        examples=["02109 (one of many ZIP Codes for Boston, MA)"],
        title="Postal Code",
    )
    postal_code_extension: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="System of 4-digit codes that are used after the 5-digit ZIP Code to specify a range of USPS delivery addresses.",
        examples=['"0001" in "02109-0001" (portion of a 02109 ZIP Code).'],
        title="Postal Code Extension",
    )
    country: Optional[Union[TypeLocCspCountryValue, Country]] = Field(
        None,
        description="Name of a country represented by its two-letter ISO 3166-1[14] English country alpha-2 code elements in UPPER CASE letters.",
        examples=["US"],
    )
    street_prefix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that precedes and modifies the Street Name element but is separated from it by a Street Name Pre Type or a Street Name Pre Directional or both.",
        examples=[
            '"Old" in "Old North First Street" ("Old" is a Street Name Pre Modifier because the Street Name Pre Directional "North" separates "Old" from the Street Name "First" and the Street Name Post Type "Street".)'
        ],
        title="Street Prefix Modifier",
    )
    street_prefix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word preceding the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"North" in "North Fairfax Drive"'],
        title="Street Prefix Direction",
    )
    street_prefix: Optional[TypeLocSnPrePostValue] = Field(
        None,
        description="Word or phrase that precedes the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "Avenue A"'],
    )
    street_preposition_type_separator: Optional[TypeLocSnPreSepValue] = Field(
        None,
        description="Preposition or prepositional phrase between the Street Name Pre Type and the Street Name.",
        examples=['"of the" in "Avenue of the Americas"'],
    )
    street: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Element of the complete street name that identifies the particular street (as opposed to any street types, directionals, and modifiers).",
        examples=['"Fairfax" in "North Fairfax Avenue"'],
        title="Street",
    )
    street_postfix: Optional[TypeLocSnPrePostValue] = Field(
        None,
        description="Word or phrase that follows the Street Name element and identifies a type of thoroughfare in a complete street name.",
        examples=['"Avenue" in "North Fairfax Avenue"'],
    )
    street_postfix_direction: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word following the Street Name element that indicates the direction taken by the street from an arbitrary starting point or line, or the sector where it is located. ",
        examples=['"East" in "Seventh Street East"'],
        title="Street Postfix Direction",
    )
    street_postfix_modifier: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Word or phrase that follows and modifies the Street Name element and is either separated from it by a Street Name Post Type and/or a Street Name Post Directional.",
        examples=[
            '"Extension" in "Market Street North Extension" (because "North" separates "Extension" from the Street Name Post Type.'
        ],
        title="Street Postfix Modifier",
    )
    direction_of_travel: Optional[Union[TypeLocSnDirectionValue, DirectionOfTravel]] = Field(
        None,
        description="Word which follows all other street name elements and is used only as needed to indicate direction of travel on a divided roadway and associated frontage roads.",
        examples=['"northbound" in "Interstate Highway 5 North northbound"'],
    )
    number_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that precedes the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"A" in "A19 Calle 117, Toa Alta, PR"'],
        title="Number Prefix",
    )
    number: Optional[int] = Field(
        None,
        description="Integer identifier of a location along a thoroughfare or within a defined community.",
        examples=['"123" in "123 Main Street"'],
        title="Number",
    )
    number_suffix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identifier in the portion of the complete address number that follows the integer Address Number in order to further specify a location along a thoroughfare or within a defined area.",
        examples=['"1"2" in "194-03 1"2 50th Avenue, New York, NY 11365" '],
        title="Number Suffix",
    )
    complete_number: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Address Number Complete includes the Address Number Prefix (if any), the Address Number, Address Number Suffix (if any), and any formatting or separator characters needed to display the official version of the complete address number. The Address Number Complete precedes the complete street name to identify a location along a thoroughfare or within a defined area. ",
        examples=['"A19" in "A19 Calle 117, Toa Alta, PR"'],
        title="Complete Number",
    )
    distance_marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Distance travelled along a route such as a road or highway, indicated by a distance marker sign, typically a post or other marker indicating the distance in miles/kilometers from or to a given point. ",
        examples=['"Milepost 1303" in "Milepost 1303, Alaska Highway"'],
        title="Distance Marker",
    )
    structure: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="A built feature which has a vertical dimension, including both conventional buildings which have walls, doors, and a roof, and other kinds of infrastructure such as cell towers, transformer stations, fuel tanks, and so on. ",
        examples=['"Fuel Storage Shed" in "100 Cantwell Avenue, Fuel Storage Shed"'],
        title="Structure",
    )
    subsite: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of a sub-area within a larger area specified either by site name, by a thoroughfare address, or both.",
        examples=['"Buckeye Village" in "The Ohio State University, Buckeye Village"'],
        title="Subsite",
    )
    site: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name of an exterior area which is publicly known and unique within a given place. A site may contain one or more structures and/or sub-sites.",
        examples=['"Winslow Park and Campground" in "Winslow Park and Campground, Freeport, ME" '],
        title="Site",
    )
    wing: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Designated part of a structure which spans one or many floors, typically including more than one unit or room and representing a significant portion of the structure floor area. ",
        examples=[
            '"Concourse A" in "Pittsburgh International Airport, Airside Terminal, Concourse A" '
        ],
        title="Wing",
    )
    floor: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Standardized identifier for a story or level within a structure, wing, or unit.",
        examples=['"5" in "800 Jefferson Street, 5th Floor" '],
        title="Floor",
    )
    unit_prefix: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that precedes the Unit Value and indicates the kind of unit.",
        examples=['"Apartment" in "422 Via Casitas, Apartment 12" '],
        title="Unit Prefix",
    )
    unit_value: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Part of the complete unit identifier that uniquely identifies a particular unit.",
        examples=['"12" in "422 Via Casitas, Apartment 12" '],
        title="Unit Value",
    )
    room: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Single, distinctly identified, enclosed space within a structure. ",
        examples=['"E427" in "Gilman Memorial Hospital, Room E247" '],
        title="Room",
    )
    section: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified, unenclosed area within a structure, wing, unit, or room. ",
        examples=['"Customer Seating" in "Coastland Mall, Food Court, Customer Seating" '],
        title="Section",
    )
    row: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified linear feature, such as a linear arrangement of seats, workstations, equipment, or storage, within a structure, wing, unit, or room. ",
        examples=['"Aisle 4" in "Warehouse 3, Aisle 4"'],
        title="Row",
    )
    seat: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Identified seat, desk, workstation, or similar precise location within a structure, wing, unit, room, section, or row.",
        examples=['"Cubicle A-7" in "1 Ashburton Place, Room 819, Cubicle A-7"'],
        title="Seat",
    )
    additional_info: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Information that relates to location but does not meet the definition of any other named location elements.",
        examples=["Main Loading Dock"],
        title="Additional Info",
    )
    marker: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Uniquely identified and indivisible infrastructure component, smaller than a structure, which exists either within a structure or exterior to any structure, such as an alarm box, a utility pole, a callbox, or other similar feature. ",
        examples=[
            "Call Box CC-680-118 (an emergency call box on Interstate 680 in Contra Costa County, CA)"
        ],
        title="Marker",
    )
    cross_streets: Optional[List[CrossStreet]] = Field(
        None,
        description="Array of (Street name + optional address number) for the nearest intersection(s).",
        title="Cross Streets",
    )
    location_aliases: Optional[List[Location]] = Field(
        None,
        description="A location that is an alias for the for the top-level location",
        title="Location Aliases",
    )


class LocationUse(BaseModel):
    use_type: Optional[Union[TypeLocationUseValue, UseType]] = Field(
        None, description="Location use type."
    )
    vacancy_cause: Optional[Union[TypeVacancyValue, VacancyCause]] = Field(
        None, description="Apparent reason the location is vacant."
    )
    secondary_use: Optional[Union[TypeLocationUseValue, SecondaryUse]] = Field(
        None,
        description="Secondary location use type, if there was one that impacted the incident response.",
    )
    in_use: Optional[Inuse] = Field(
        None,
        description="If the location is being used, whether it is being used as intended.",
    )


class Mayday(BaseModel):
    mayday: Literal[True] = Field(
        True,
        description="Whether there was a mayday called to indicate a firefighter needed assistance during the incident.",
        title="Mayday",
    )
    relative_suppression_time: Optional[Union[TypeSuppressTimeValue, RelativeSuppressionTime]] = (
        Field(None, description="Relative to suppression, when the mayday was called.")
    )
    rit_activated: Optional[bool] = Field(
        None,
        description="Whether a RIT team was activated following a mayday declaration.",
        title="Rit Activated",
    )


class Medical(BaseModel):
    patient_care_report_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Patient care report identification number.",
        examples=["VAE456M1-02202024"],
        title="Patient Care Report Id",
    )
    patient_care_evaluation: TypeMedicalPatientCareValue = Field(
        ..., description="Status of patient care needs based on evaluation."
    )
    patient_status: Optional[Union[TypeMedicalPatientStatusValue, PatientStatus]] = Field(
        None, description="Status of the patient after FD arrival and intervention."
    )
    transport_disposition: Optional[Union[TypeMedicalTransportValue, TransportDisposition]] = Field(
        None, description="Transport outcome of the incident."
    )


class Noaction(BaseModel):
    type: Literal["NOACTION"] = Field(
        "NOACTION", description="`NOACTION` indicates no action was taken", title="Type"
    )
    noaction_type: Optional[Union[TypeNoactionValue, NoactionType]] = Field(
        None,
        description="Reason no action taken by the fire department on the scene of the incident.",
    )


class OtherAlarmPresent(BaseModel):
    type: Literal["PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmOtherValue]] = Field(None, title="Alarm Types")


class OutsideFireLocationDetail(BaseModel):
    type: Literal["OUTSIDE"] = Field("OUTSIDE", title="Type")
    cause: TypeFireCauseOutValue = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the outdoor fire.",
    )
    acres_burned: Optional[float] = Field(
        None,
        description="Estimated number of acres burned during the incident.",
        examples=["0.5"],
        title="Acres Burned",
    )


class PatchStationPayload(BaseModel):
    address_line_1: Optional[str] = Field(None, title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: Optional[str] = Field(None, title="City")
    state: Optional[NerisSharedTypesStatesTerrs1] = None
    zip_code: Optional[str] = Field(None, title="Zip Code")
    station_id: Optional[str] = Field(None, title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    location: Optional[GeoPoint] = None


class PatchUnitPayload(BaseModel):
    type: Optional[TypeUnitValue] = None
    staffing: Optional[int] = Field(None, title="Staffing")
    cad_designation_1: Optional[str] = Field(None, title="Cad Designation 1")
    cad_designation_2: Optional[str] = Field(None, title="Cad Designation 2")


class PopulationPayload(BaseModel):
    source: Optional[TypePopSourceValue] = None
    protected: Optional[int] = Field(None, title="Protected")


class PresenceKnown(BaseModel):
    presence_known_type: Optional[Union[TypeRescuePresenceKnownValue, PresenceKnownType]] = Field(
        None,
        description="Whether the presence of an occupant in need of rescue was known",
    )


class PvPowergenHazard(BaseModel):
    type: Literal["PHOTOVOLTAICS"] = Field(..., title="Type")
    source_or_target: Optional[Union[TypeEmerghazPvIgnValue, SourceOrTarget1]] = Field(
        None,
        description="Whether photovoltaics were the source of ignition or target. Only applies to `PHOTOVOLTAICS` type.",
    )
    pv_type: Optional[Union[TypeEmerghazPvValue, PvType]] = Field(
        None,
        description="Type of photovoltaics were involved in the incident. Only applies to `PHOTOVOLTAICS` type.",
    )


class RegionPayload(BaseModel):
    crs: Optional[Union[str, int]] = Field(4326, title="Crs")
    source: TypeGeoSourceValue
    geometry: GeoJsonMultiPolygon
    name: Optional[str] = Field(None, title="Name")
    internal_id: Optional[str] = Field(None, title="Internal Id")


class RegionSetPayload(BaseModel):
    name: Optional[str] = Field(None, title="Name")
    type: TypeRegionValue
    primary: bool = Field(..., title="Primary")
    coverage: bool = Field(..., title="Coverage")
    juris: bool = Field(..., title="Juris")
    regions: Optional[List[RegionPayload]] = Field(None, title="Regions")


class Release(BaseModel):
    estimated_amount: Optional[int] = Field(
        None,
        description="Estimated amount released by volume or weight.",
        examples=[1345],
        title="Estimated Amount",
    )
    unit_of_measurement: Optional[Union[TypeHazardUnitValue, UnitOfMeasurement]] = Field(
        None, description="Unit of measurement of the estimated amount released."
    )
    physical_state: Optional[Union[TypeHazardPhysicalStateValue, PhysicalState]] = Field(
        None, description="Physical state of the chemical."
    )
    released_into: Optional[Union[TypeHazardReleasedIntoValue, ReleasedInto]] = Field(
        None, description="Environment which was contaminated."
    )
    cause: Optional[Union[TypeHazardCauseValue, Cause1]] = Field(
        None, description="Cause of the hazmat release."
    )


class Removal(BaseModel):
    type: Literal["REMOVAL"] = Field("REMOVAL", title="Type")
    fire_removal: Optional[FireRemoval] = None
    room_type: Optional[Union[TypeRoomValue, RoomType]] = Field(
        None, description="Type of room/space from which the occupant was rescued."
    )
    elevation_type: Optional[Union[TypeRescueElevationValue, ElevationType]] = Field(
        None, description="Elevation at which the occupant was found."
    )
    gas_isolation: Optional[bool] = Field(
        None,
        description="Whether the space was isolated from the flow of heat and/or toxic gases.",
        title="Gas Isolation",
    )
    rescue_path_type: Optional[Union[TypeRescuePathValue, RescuePathType]] = Field(
        None, description="How the firefighter was removed from the structure."
    )


class RoleActionResourcePayload(BaseModel):
    action: TypeActionValue = Field(..., description="The type of action allowed on the resource.")
    resource: TypeResourceValue = Field(
        ..., description="The type of resource the action is allowed on."
    )


class RolePayload(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )


class RoleResponse(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )
    nuid: UUID = Field(..., description="The unique identifier for the role", title="Nuid")


class RoleWithEntitySetResponse(BaseModel):
    name: str = Field(..., title="Name")
    description: Optional[str] = Field(None, title="Description")
    action_resources: Optional[List[RoleActionResourcePayload]] = Field(
        None, title="Action Resources"
    )
    nuid: UUID = Field(..., description="The unique identifier for the role", title="Nuid")
    entity_set: EntitySetResponse = Field(
        ..., description="The entity set associated with the role attachment"
    )


class SmokeAlarmAlerted(BaseModel):
    type: Literal["WORKING_ALERTED_OCCUPANT"] = Field(..., title="Type")
    occupant_action: Optional[Union[TypeOccupantResponseValue, OccupantAction]] = Field(
        None,
        description="If the alarm operated, describes the occupant reaction or inaction that resulted from the alarm signal.",
    )


class SmokeAlarmFailed(BaseModel):
    type: Literal["FAILED_TO_OPERATE"] = Field(..., title="Type")
    failure_reason: Optional[Union[TypeAlarmFailureValue, FailureReason2]] = Field(
        None, description="Reason for alarm failure."
    )


class SmokeAlarmOperation(BaseModel):
    alerted_or_failed: Union[SmokeAlarmAlerted, SmokeAlarmFailed] = Field(
        ..., discriminator="type", title="Alerted Or Failed"
    )


class SmokeAlarmPresent(BaseModel):
    type: Literal["PRESENT"] = Field(..., title="Type")
    alarm_types: Optional[List[TypeAlarmSmokeValue]] = Field(None, title="Alarm Types")
    operation: Optional[SmokeAlarmOperation] = None


class StationCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")
    units: Optional[List[UnitCreatedModifiedResponse]] = Field(None, title="Units")


class StationPayload(BaseModel):
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[Union[UnitPayload, CreateUnitPayload]]] = Field(None, title="Units")
    location: Optional[GeoPoint] = None
    neris_id: str = Field(..., title="Neris Id")


class StationResponse(BaseModel):
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: StatesTerrsOutput
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[UnitResponse]] = Field(None, title="Units")
    location: Optional[str] = Field(None, title="Location")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")


class StructureFireLocationDetail(BaseModel):
    type: Literal["STRUCTURE"] = Field("STRUCTURE", title="Type")
    arrival_condition: TypeFireConditionArrivalValue = Field(
        ..., description="Fire conditions upon arriving on the scene of the incident."
    )
    progression_evident: Optional[bool] = Field(
        None,
        description="Whether the fire extended beyond the conditions found upon arrival.",
        title="Progression Evident",
    )
    damage_type: TypeFireBldgDamageValue = Field(
        ...,
        description="Rating of damage to the fire building of origin as selected from a list of values.",
    )
    floor_of_origin: int = Field(
        ...,
        description="Storey above or below ground of fire origin.",
        examples=[1, 2, 3],
        title="Floor Of Origin",
    )
    room_of_origin_type: TypeRoomValue = Field(
        ..., description="Type of room of origin of the fire."
    )
    cause: TypeFireCauseInValue = Field(
        ...,
        description="General categorization of the cause (or likely cause) of the structure fire.",
    )


class UserInfoResponse(BaseModel):
    sub: UUID = Field(..., title="Sub")
    email: EmailStr = Field(..., title="Email")
    active: bool = Field(..., title="Active")
    username: UUID = Field(..., title="Username")
    given_name: str = Field(..., title="Given Name")
    family_name: str = Field(..., title="Family Name")
    status: UserStatus
    email_verified: bool = Field(..., title="Email Verified")
    roles: Optional[List[RoleWithEntitySetResponse]] = Field(None, title="Roles")


class UserRoleEntitySetAttachmentResponse(BaseModel):
    role: RoleResponse
    user: NerisApiAuthModelsUserResponse
    entity_set: EntitySetResponse


class ActionTactic(BaseModel):
    action_noaction: Union[Action, Noaction] = Field(
        ..., discriminator="type", title="Action Noaction"
    )


class Casualty(BaseModel):
    injury_or_noninjury: Union[Injury, Noinjury] = Field(
        ..., discriminator="type", title="Injury Or Noninjury"
    )


class Chemical(BaseModel):
    dot_class: TypeHazardDotValue = Field(
        ..., description="Department of Transportation Hazard Classification."
    )
    name: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Name of the chemical/material involved in the incident.",
        title="Name",
    )
    release_occurred: bool = Field(
        ..., description="Whether the chemical was released.", title="Release Occurred"
    )
    release: Optional[Release] = Field(
        None,
        description="Details on a chemical release. Only possible if `chemical_release` is `True`.",
    )


class CookingFireSuppression(BaseModel):
    presence: Union[CookingFireSuppressionPresent, CookingFireSuppressionNotPresent] = Field(
        ..., discriminator="type", title="Presence"
    )


class CreateStationPayload(BaseModel):
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    station_id: str = Field(..., title="Station Id")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    staffing: Optional[int] = Field(None, title="Staffing")
    units: Optional[List[CreateUnitPayload]] = Field(None, title="Units")
    location: Optional[GeoPoint] = None


class DepartmentCreatedModifiedResponse(BaseModel):
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    valid_start: AwareDatetime = Field(..., title="Valid Start")
    stations: Optional[List[StationCreatedModifiedResponse]] = Field(None, title="Stations")


class DepartmentPayload(BaseModel):
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[DispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    contact: Optional[ContactPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    stations: Optional[List[Union[StationPayload, CreateStationPayload]]] = Field(
        None, title="Stations"
    )
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class DepartmentResponse(BaseModel):
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[StatesTerrsOutput] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: StatesTerrsOutput
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[str] = Field(None, title="Department Type")
    entity_type: Optional[str] = Field(None, title="Entity Type")
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationResponse] = None
    dispatch: Optional[DispatchResponse] = None
    staffing: Optional[StaffingResponse] = None
    assessment: Optional[AssessmentResponse] = None
    contact: Optional[ContactResponse] = None
    shift: Optional[ShiftResponse] = None
    fire_services: Optional[List[str]] = Field(None, title="Fire Services")
    ems_services: Optional[List[str]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[str]] = Field(None, title="Investigation Services")
    stations: Optional[List[StationResponse]] = Field(None, title="Stations")
    location: Optional[str] = Field(None, title="Location")
    region_sets: Optional[List[RegionSetResponse]] = Field(None, title="Region Sets")
    neris_id: str = Field(..., title="Neris Id")
    version: int = Field(..., title="Version")
    last_modified: AwareDatetime = Field(..., title="Last Modified")


class DispatchUnitResponse(BaseModel):
    med_responses: Optional[List[MedResponse]] = Field(None, title="Med Responses")
    point: Optional[GeoPoint] = None
    unit_neris_id: Optional[constr(pattern=r"^FD\d{8}S\d{3}U\d{3}$")] = Field(
        None,
        description="NERIS ID of the unit responding to the incident.",
        examples=["FD24027000S000U000"],
        title="Unit Neris Id",
    )
    reported_unit_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Name or ID of the unit responding to the incident if not yet in Entity Spec (or cannot be furnished).",
        examples=["A702"],
        title="Reported Unit Id",
    )
    staffing: Optional[int] = Field(
        None, description="On-scene staffing of unit.", examples=[4], title="Staffing"
    )
    dispatch: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit is dispatched.", title="Dispatch"
    )
    enroute_to_scene: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit goes enroute to scene of the incident.",
        title="Enroute To Scene",
    )
    on_scene: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit arrived on scene.", title="On Scene"
    )
    canceled_enroute: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp for units that were canceled prior to arrival.",
        title="Canceled Enroute",
    )
    staging: Optional[AwareDatetime] = Field(
        None, description="Timestamp that the unit stages on scene.", title="Staging"
    )
    unit_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp that the unit clears the incident.",
        title="Unit Clear",
    )
    incident_clear: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp when dispatch closes incident.",
        title="Incident Clear",
    )
    type: Literal["DISPATCH"] = Field("DISPATCH", title="Type")


class ElectricHazard(BaseModel):
    type: TypeEmerghazElecValue = Field(
        ...,
        description="Additional specificity on the battery powered / stored energy emerging hazard.",
    )
    source_or_target: Optional[Union[TypeSourceTargetValue, SourceOrTarget]] = Field(
        None, description="Whether the battery was the source or target."
    )
    involved_in_crash: Optional[Union[bool, ElectricHazardCrash]] = Field(
        None,
        description="Whether the electric vehicle was involved in crash. Only applicable to `ELECTRIC_VEHICLE` types",
        title="Involved In Crash",
    )
    fire_details: Optional[ElectricHazardFire] = Field(
        None, description="Fire details for the electric emerging hazard."
    )


class Exposure(BaseModel):
    location_detail: Union[ExternalExposure, InternalExposure] = Field(
        ..., discriminator="type", title="Location Detail"
    )
    location: Location
    location_use: Optional[LocationUse] = None
    point: Optional[GeoPoint] = None
    polygon: Optional[GeoMultipolygon] = None
    displacements: Optional[List[ExposureDisplacement]] = Field(None, title="Displacements")
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    damage_type: TypeExposureDamageValue = Field(
        ..., description="Rating of damage to the exposure."
    )


class FfRescue(BaseModel):
    type: Literal["FIREFIGHTER_ASSISTED_EVAC", "FIREFIGHTER_RESCUED"] = Field(..., title="Type")
    removal_or_nonremoval: Union[Removal, Nonremoval] = Field(
        ..., discriminator="type", title="Removal Or Nonremoval"
    )
    rescue_mode: Optional[TypeRescueModeValue] = Field(None, description="Primary mode for rescue.")
    actions: Optional[Union[Union[List[TypeRescueActionValue], Actions2], Actions2]] = Field(
        None, description="Action taken to support the rescue.", title="Actions"
    )
    impedances: Optional[Union[Union[List[TypeRescueImpedanceValue], Impedances], Impedances]] = (
        Field(
            None,
            description="Whether conditions impacted the ability of rescue.",
            title="Impedances",
        )
    )


class Fire(BaseModel):
    location_detail: Union[StructureFireLocationDetail, OutsideFireLocationDetail] = Field(
        ..., discriminator="type", title="Location Detail"
    )
    water_supply: TypeWaterSupplyValue = Field(
        ..., description="Describes the type of water supply utilized for the incident."
    )
    investigation_needed: TypeFireInvestNeedValue = Field(
        ...,
        description="Assessment by incident commander and/or officer in charge of the incident as to whether the fire necessitated a formal fire investigation.",
    )
    investigation_types: Union[List[TypeFireInvestValue], InvestigationTypes] = Field(
        ...,
        description="Categorizes the general type of investigation completed at the structure fire incident.",
        title="Investigation Types",
    )
    suppression_appliances: Optional[
        Union[
            Union[List[TypeSuppressApplianceValue], SuppressionAppliances],
            SuppressionAppliances,
        ]
    ] = Field(
        None,
        description="Describes the appliances used for suppression.",
        title="Suppression Appliances",
    )


class FireAlarm(BaseModel):
    presence: Union[FireAlarmPresent, FireAlarmNotPresent] = Field(
        ..., discriminator="type", title="Presence"
    )


class FireSuppression(BaseModel):
    presence: Union[FireSuppressionPresent, FireSuppressionNotPresent] = Field(
        ..., discriminator="type", title="Presence"
    )


class Hazsit(BaseModel):
    disposition: TypeHazardDispositionValue = Field(
        ..., description="Outcome of the hazmat incident."
    )
    evacuated: int = Field(
        ...,
        description="Number of occupants/businesses evacuated during the incident response.",
        examples=[2],
        title="Evacuated",
    )
    chemicals: Optional[List[Chemical]] = Field(None, title="Chemicals")


class IncidentBase(BaseModel):
    indoors: Optional[bool] = Field(
        None,
        description="Whether the incident primarily took place indoors.",
        title="Indoors",
    )
    people_present: Optional[bool] = Field(
        None,
        description="Whether people were present at the time of the incident.",
        title="People Present",
    )
    animals_rescued: Optional[int] = Field(
        None,
        description="Total number of animals rescued.",
        examples=[1],
        title="Animals Rescued",
    )
    impedance_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of any obstacles that impacted the incident.",
        title="Impedance Narrative",
    )
    outcome_narrative: Optional[constr(min_length=1, max_length=100000)] = Field(
        None,
        description="Description of the final disposition of the incident.",
        title="Outcome Narrative",
    )
    department_neris_id: constr(pattern=r"^FD\d{8}$") = Field(
        ...,
        description="NERIS ID of the Fire Department to which aid was given/received.",
        examples=["FD24027000"],
        title="Department Neris Id",
    )
    incident_number: constr(min_length=1, max_length=255) = Field(
        ...,
        description="The department's internal ID for the incident.",
        examples=["IN20240703HAWV"],
        title="Incident Number",
    )
    point: Optional[GeoPoint] = None
    polygon: Optional[GeoMultipolygon] = None
    location: Location
    location_use: Optional[LocationUse] = None


class PowergenHazards(RootModel[Union[PvPowergenHazard, OtherPowergenHazard]]):
    root: Union[PvPowergenHazard, OtherPowergenHazard] = Field(..., discriminator="type")


class ListUserInfoResponse(BaseModel):
    page_size: int = Field(..., title="Page Size")
    page_count: int = Field(..., title="Page Count")
    page_number: int = Field(..., title="Page Number")
    total_count: int = Field(..., title="Total Count")
    users: Optional[List[UserInfoResponse]] = Field(None, title="Users")


class OtherAlarm(BaseModel):
    presence: Union[OtherAlarmPresent, OtherAlarmNotPresent] = Field(
        ..., discriminator="type", title="Presence"
    )


class PatchDepartmentPayload(BaseModel):
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: Optional[str] = Field(None, title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: Optional[str] = Field(None, title="City")
    state: Optional[NerisSharedTypesStatesTerrs1] = None
    zip_code: Optional[str] = Field(None, title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: Optional[str] = Field(None, title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[DispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    contact: Optional[ContactPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class Rescue(BaseModel):
    ffrescue_or_nonffrescue: Union[FfRescue, NonFfRescue] = Field(
        ...,
        description="Whether the rescue was _performed_ by a firefighter or nonfirefighter.",
        discriminator="type",
        title="Ffrescue Or Nonffrescue",
    )
    presence_known: Optional[PresenceKnown] = Field(
        None,
        description="Details of whether the presence of an occupant in need of rescue was known. Only possible if casualty-rescue type is `NONFF`",
    )
    mayday: Optional[Mayday] = Field(
        None,
        description="Details of a mayday called during the incident. Only possible if casualty-rescue type is `FF`",
    )


class SmokeAlarm(BaseModel):
    presence: Union[SmokeAlarmPresent, SmokeAlarmNotPresent] = Field(
        ..., discriminator="type", title="Presence"
    )


class CasualtyRescue(BaseModel):
    type: Type1 = Field(
        ...,
        description="Whether the person _rescued/sustaining a casualty_ is a firefighter or nonfirefighter.",
        title="Type",
    )
    casualty: Optional[Casualty] = None
    rescue: Optional[Rescue] = None
    birth_month_year: Optional[constr(min_length=7, max_length=7)] = Field(
        None,
        description="MM/YYYY formatted month and year of birth of the person(s) injured or rescued.",
        examples=["06/1972"],
        title="Birth Month Year",
    )
    gender: Optional[Union[TypeGenderValue, Gender]] = Field(
        None, description="Gender of the person(s) injured or rescued."
    )
    race: Optional[Union[TypeRaceValue, Race]] = Field(
        None, description="Race of the person(s) injured or rescued."
    )


class CreateDepartmentPayload(BaseModel):
    mail_address_line_1: Optional[str] = Field(None, title="Mail Address Line 1")
    mail_address_line_2: Optional[str] = Field(None, title="Mail Address Line 2")
    mail_city: Optional[str] = Field(None, title="Mail City")
    mail_state: Optional[NerisSharedTypesStatesTerrs1] = None
    mail_zip_code: Optional[str] = Field(None, title="Mail Zip Code")
    address_line_1: str = Field(..., title="Address Line 1")
    address_line_2: Optional[str] = Field(None, title="Address Line 2")
    city: str = Field(..., title="City")
    state: NerisSharedTypesStatesTerrs1
    zip_code: str = Field(..., title="Zip Code")
    internal_id: Optional[str] = Field(None, title="Internal Id")
    name: str = Field(..., title="Name")
    email: Optional[str] = Field(None, title="Email")
    website: Optional[str] = Field(None, title="Website")
    continue_edu: Optional[bool] = Field(None, title="Continue Edu")
    department_type: Optional[TypeDeptValue] = None
    entity_type: Optional[TypeEntityValue] = None
    rms_software: Optional[str] = Field(None, title="Rms Software")
    population: Optional[PopulationPayload] = None
    dispatch: Optional[DispatchPayload] = None
    staffing: Optional[StaffingPayload] = None
    assessment: Optional[AssessmentPayload] = None
    contact: Optional[ContactPayload] = None
    shift: Optional[ShiftPayload] = None
    fire_services: Optional[List[TypeServFdValue]] = Field(None, title="Fire Services")
    ems_services: Optional[List[TypeServEmsValue]] = Field(None, title="Ems Services")
    investigation_services: Optional[List[TypeServInvestValue]] = Field(
        None, title="Investigation Services"
    )
    stations: Optional[List[CreateStationPayload]] = Field(None, title="Stations")
    location: Optional[GeoPoint] = None
    region_sets: Optional[List[RegionSetPayload]] = Field(None, title="Region Sets")


class Dispatch(BaseModel):
    location: Location
    point: Optional[GeoPoint] = None
    comments: Optional[List[Comment]] = Field(None, title="Comments")
    unit_responses: List[DispatchUnitResponse] = Field(..., title="Unit Responses")
    tactic_timestamps: Optional[DispatchTacticTimestamps] = None
    dispatch_center_id: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="This 4 digit ID is a unique identifier for each PSAP dispatch center.",
        examples=["1234"],
        title="Dispatch Center Id",
    )
    incident_number: constr(min_length=1, max_length=255) = Field(
        ...,
        description="Unique identifier for the event that requires dispatch of department resources.",
        examples=["FDID_20230814000001", "FDID_20230814000002"],
        title="Incident Number",
    )
    type: TypeIncidentValue = Field(
        ...,
        description="Specific incident type that details the nature of the incident; levels up into incident_category.",
    )
    determinant_code: Optional[constr(min_length=1, max_length=8)] = Field(
        None,
        description="Output code from dispatch protocol based on the call specifics.",
        examples=["17-D-5"],
        title="Determinant Code",
    )
    incident_code: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Department-specific incident code pulled from CAD; levels up into incident_type.",
        examples=["STRF1", "ALS2"],
        title="Incident Code",
    )
    disposition: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description="Closing disposition of call set by dispatcher if call changes from initial dispatch.",
        examples=["No Patient Found", "Building Secure"],
        title="Disposition",
    )
    aid_given: Optional[bool] = Field(
        None,
        description="Identifies if the dispatching units are providing aid (automatic or mutual) to another department.",
        title="Aid Given",
    )
    automatic_alarm: Optional[bool] = Field(
        None,
        description="Identifies if the call is an automatic alarm.",
        title="Automatic Alarm",
    )
    call_arrival: AwareDatetime = Field(
        ...,
        description="Timestamp at which call arrives at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Arrival",
    )
    call_answered: Optional[AwareDatetime] = Field(
        None,
        description="Timestamp at which call is answered at PSAP or department dispatch center.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Answered",
    )
    call_open: AwareDatetime = Field(
        ...,
        description="Timestamp at which call processing begins.",
        examples=[
            "2024-06-13T21:14:02.162497-07:00",
            "1718338442.162497",
            1718338442.162497,
            1718338442,
        ],
        title="Call Open",
    )


class IncidentPayload(BaseModel):
    incident_base: IncidentBase
    incident_types: List[TypeIncidentValueRel] = Field(
        ...,
        description="\n                - Incidents with a `FIRE` type require all fire suppression and alarm modules: smoke_alarm, fire_alarm, other_alarm, fire_suppression.\n                - Incidents with a `FIRE||STRUCTURE_FIRE||CONFINED_COOKING_APPLIANCE_FIRE` type require the cooking_fire_suppression module.\n            ",
        title="Incident Types",
    )
    special_modifiers: Optional[List[TypeSpecialModifierValue]] = Field(
        None, title="Special Modifiers"
    )
    aids: Optional[List[Aid]] = Field(None, title="Aids")
    nonfd_aids: Optional[List[TypeAidNonfdValue]] = Field(None, title="Nonfd Aids")
    actions_tactics: Optional[ActionTactic] = None
    dispatch: Dispatch
    tactic_timestamps: Optional[IncidentTacticTimestamps] = None
    unit_responses: Optional[List[IncidentUnitResponse]] = Field(None, title="Unit Responses")
    exposures: Optional[List[Exposure]] = Field(None, title="Exposures")
    displacements: Optional[List[IncidentDisplacement]] = Field(None, title="Displacements")
    casualty_rescues: Optional[List[CasualtyRescue]] = Field(None, title="Casualty Rescues")
    fire_detail: Optional[Fire] = Field(
        None,
        description="Fire module. Only possible if at least one `FIRE` incident type is present",
    )
    hazsit_detail: Optional[Hazsit] = Field(
        None,
        description="Hazsit module. Only possible if at least one `HAZSIT` incident type is present",
    )
    medical_details: Optional[List[Medical]] = Field(
        None,
        description="Medical module(s). Only possible if at least one `MEDICAL` incident type is present",
        title="Medical Details",
    )
    smoke_alarm: Optional[SmokeAlarm] = None
    fire_alarm: Optional[FireAlarm] = None
    other_alarm: Optional[OtherAlarm] = None
    fire_suppression: Optional[FireSuppression] = None
    cooking_fire_suppression: Optional[CookingFireSuppression] = None
    electric_hazards: Optional[List[ElectricHazard]] = Field(None, title="Electric Hazards")
    powergen_hazards: Optional[List[PowergenHazards]] = Field(None, title="Powergen Hazards")
    csst_hazard: Optional[CsstHazard] = None


Location.model_rebuild()
